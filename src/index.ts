enum MainWeaponTypeId {
  BARE_HAND,
  ONE_HANDED_SWORD,
  TWO_HANDED_SWORD,
  BOW,
  BOWGUN,
  STAFF,
  MAGIC_DEVICE,
  KNUCKLES,
  HALBERD,
  KATANA,
}

enum SubWeaponTypeId {
  NONE,
  KATANA,
  ONE_HANDED_SWORD,
  MAGIC_DEVICE,
  DAGGER,
  SHIELD,
  NINJUTSU_SCROLL,
  ARROW,
  KNUCKLES,
}

enum StatId {
  FLAT_STR,
  PERCENT_STR,

  FLAT_INT,
  PERCENT_INT,

  FLAT_DEX,
  PERCENT_DEX,

  FLAT_VIT,
  PERCENT_VIT,

  FLAT_AGI,
  PERCENT_AGI,

  FLAT_WEAPON_ATK,
  PERCENT_WEAPON_ATK,

  FLAT_MATK,
  PERCENT_MATK,

  FLAT_ATK,
  PERCENT_ATK,

  FLAT_ASPD,
  PERCENT_ASPD,

  FLAT_CSPD,
  PERCENT_CSPD,

  FLAT_CRITICAL_RATE,
  PERCENT_CRITICAL_RATE,

  FLAT_CRITICAL_DAMAGE,
  PERCENT_CRITICAL_DAMAGE,

  FLAT_MAX_HP,
  PERCENT_MAX_HP,

  FLAT_MAX_MP,
  PERCENT_MAX_MP,

  FLAT_ACCURACY,
  PERCENT_ACCURACY,

  FLAT_DODGE,
  PERCENT_DODGE,

  FLAT_DEF,
  PERCENT_DEF,

  FLAT_MDEF,
  PERCENT_MDEF,

  FLAT_UNSHEATHE_ATTACK,
  PERCENT_UNSHEATHE_ATTACK,

  FLAT_ATTACK_MP_RECOVERY,
  PERCENT_ATTACK_MP_RECOVERY,

  FLAT_NATURAL_HP_REGEN,
  PERCENT_NATURAL_HP_REGEN,
  FLAT_NATURAL_MP_REGEN,
  PERCENT_NATURAL_MP_REGEN,

  STABILITY,

  MAGIC_PIERCE,
  PHYSICAL_PIERCE,

  LONG_RANGE_DAMAGE,
  SHORT_RANGE_DAMAGE,

  MOTION_SPEED,

  ATK_UP_STR,
  ATK_UP_INT,
  ATK_UP_DEX,
  ATK_UP_VIT,
  ATK_UP_AGI,

  MATK_UP_STR,
  MATK_UP_INT,
  MATK_UP_DEX,
  MATK_UP_VIT,
  MATK_UP_AGI,

  ATK_DOWN_STR,
  ATK_DOWN_INT,
  ATK_DOWN_DEX,
  ATK_DOWN_VIT,
  ATK_DOWN_AGI,

  MATK_DOWN_STR,
  MATK_DOWN_INT,
  MATK_DOWN_DEX,
  MATK_DOWN_VIT,
  MATK_DOWN_AGI,

  MAGIC_RESISTANCE,
  PHYSICAL_RESISTANCE,

  LIGHT_RESISTANCE,
  DARK_RESISTANCE,

  FIRE_RESISTANCE,
  WATER_RESISTANCE,
  EARTH_RESISTANCE,
  WIND_RESISTANCE,

  NEUTRAL_RESISTANCE,
  AILMENT_RESISTANCE,

  DAMAGE_TO_DARK,
  DAMAGE_TO_LIGHT,
  DAMAGE_TO_EARTH,
  DAMAGE_TO_WATER,
  DAMAGE_TO_FIRE,
  DAMAGE_TO_WIND,

  AGGRO,

  TUMBLE_UNAVAILABLE,
  FLINCH_UNAVAILABLE,
  STUN_UNAVAILABLE,

  DARK_ELEMENT,
  LIGHT_ELEMENT,
  EARTH_ELEMENT,
  WATER_ELEMENT,
  FIRE_ELEMENT,
  WIND_ELEMENT,

  GUARD_POWER,
  GUARD_RECHARGE,
  GUARD_BREAK,

  EVASION_RECHARGE,
  ANTICIPATE,

  ITEM_COOLDOWN,
  INVINCIBLE_AID,

  ABSOLUTE_ACCURACY,
  ABSOLUTE_DODGE,

  PHYSICAL_BARRIER,
  MAGIC_BARRIER,
  FRACTIONAL_BARRIER,
  BARRIER_COOLDOWN,

  ADDITIONAL_MELEE,
  ADDITIONAL_MAGIC,
}

type Stat = [StatId, number];

type StatMapBuilder = <I extends Input>(_: I) => Stat[];

enum PersonalStatId {
  CRT,
  LUK,
  TEC,
  MTL,
  NONE,
}

enum ArmorTypeId {
  LIGHT,
  HEAVY,
  NORMAL,
  NONE,
}

// enum ElementType {
//   DARK,
//   LIGHT,
//   EARTH,
//   WATER,
//   FIRE,
//   WIND,
// }

enum ResonanceSetId {
  MATK_AND_ATK,
  ACC_AND_CRIT,
  ASPD_AND_CSPD,
}

enum ParamId {
  CHARACTER_LEVEL,

  CHARACTER_BASE_STR,
  CHARACTER_BASE_INT,
  CHARACTER_BASE_DEX,
  CHARACTER_BASE_VIT,
  CHARACTER_BASE_AGI,

  CHARACTER_PERSONAL_STAT_ID,
  CHARACTER_PERSONAL_STAT_VALUE,

  CHARACTER_MAINWEAPON_TYPE,
  CHARACTER_MAINWEAPON_ATK,
  CHARACTER_MAINWEAPON_REFINEMENT,
  CHARACTER_MAINWEAPON_STABILITY,
  CHARACTER_MAINWEAPON_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP,

  CHARACTER_SUBWEAPON_TYPE,
  CHARACTER_SUBWEAPON_ATK,
  CHARACTER_SUBWEAPON_DEF,
  CHARACTER_SUBWEAPON_REFINEMENT,
  CHARACTER_SUBWEAPON_STABILITY,
  CHARACTER_SUBWEAPON_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP,
  CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION,
  CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION,

  CHARACTER_ARMOR_DEF,
  CHARACTER_ARMOR_REFINEMENT,
  CHARACTER_ARMOR_TYPE,
  CHARACTER_ARMOR_STATMAP,
  CHARACTER_ARMOR_CRYSTAL1_STATMAP,
  CHARACTER_ARMOR_CRYSTAL2_STATMAP,

  CHARACTER_ADDITIONAL_GEAR_DEF,
  CHARACTER_ADDITIONAL_GEAR_REFINEMENT,
  CHARACTER_ADDITIONAL_GEAR_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SPECIAL_GEAR_DEF,
  CHARACTER_SPECIAL_GEAR_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN,
  CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS,
  CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_BURDEN,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_COMBAT_TIME,
  CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS,
  CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER,
  CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE,
  CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL,

  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS,
  CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_ISACTIVE,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL,

  CHARACTER_AILMENTS_WEAKEN_ISACTIVE,
  CHARACTER_AILMENTS_FLINCH_ISACTIVE,
  CHARACTER_AILMENTS_TUMBLE_ISACTIVE,
  CHARACTER_AILMENTS_STUN_ISACTIVE,
  CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE,
  CHARACTER_AILMENTS_POISON_ISACTIVE,
  CHARACTER_AILMENTS_PARALYSIS_ISACTIVE,
  CHARACTER_AILMENTS_BLINDNESS_ISACTIVE,
  CHARACTER_AILMENTS_IGNITION_ISACTIVE,
  CHARACTER_AILMENTS_FREEZE_ISACTIVE,
  CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE,
  CHARACTER_AILMENTS_SLOW_ISACTIVE,
  CHARACTER_AILMENTS_STOP_ISACTIVE,
  CHARACTER_AILMENTS_FEAR_ISACTIVE,
  CHARACTER_AILMENTS_DIZZY_ISACTIVE,
  CHARACTER_AILMENTS_LETHARGY_ISACTIVE,
  CHARACTER_AILMENTS_SILENCE_ISACTIVE,
  CHARACTER_AILMENTS_BLEED_ISACTIVE,
  CHARACTER_AILMENTS_FATIGUE_ISACTIVE,
  CHARACTER_AILMENTS_DAZZLED_ISACTIVE,

  CHARACTER_CONSUMABLES,
  CHARACTER_FOODBUFFS,

  CHARACTER_REGISLETS_ZEROSTANCE_LEVEL,
  CHARACTER_REGISLETS_MAXHPBOOST_LEVEL,
  CHARACTER_REGISLETS_MAXMPBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL,
  CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICDEFENSEBOOST_LEVEL,
  CHARACTER_REGISLETS_PHYSICALDEFENSEBOOST_LEVEL,
  CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL,
  CHARACTER_REGISLETS_DODGEBOOST_LEVEL,
  CHARACTER_REGISLETS_ACCURACYBOOST_LEVEL,
  CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL,
  CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL,
  CHARACTER_REGISLETS_POWERRESONANCE_LEVEL,
}

interface Input {
  [ParamId.CHARACTER_LEVEL]: number;

  [ParamId.CHARACTER_BASE_STR]: number;
  [ParamId.CHARACTER_BASE_INT]: number;
  [ParamId.CHARACTER_BASE_DEX]: number;
  [ParamId.CHARACTER_BASE_VIT]: number;
  [ParamId.CHARACTER_BASE_AGI]: number;
  [ParamId.CHARACTER_PERSONAL_STAT_ID]: PersonalStatId;
  [ParamId.CHARACTER_PERSONAL_STAT_VALUE]: number;

  [ParamId.CHARACTER_MAINWEAPON_TYPE]: MainWeaponTypeId;
  [ParamId.CHARACTER_MAINWEAPON_ATK]: number;
  [ParamId.CHARACTER_MAINWEAPON_REFINEMENT]: number;
  [ParamId.CHARACTER_MAINWEAPON_STABILITY]: number;
  [ParamId.CHARACTER_MAINWEAPON_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SUBWEAPON_TYPE]: SubWeaponTypeId;
  [ParamId.CHARACTER_SUBWEAPON_ATK]: number;
  [ParamId.CHARACTER_SUBWEAPON_DEF]: number;
  [ParamId.CHARACTER_SUBWEAPON_REFINEMENT]: number;
  [ParamId.CHARACTER_SUBWEAPON_STABILITY]: number;
  [ParamId.CHARACTER_SUBWEAPON_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION]: number;
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION]: number;

  [ParamId.CHARACTER_ARMOR_DEF]: number;
  [ParamId.CHARACTER_ARMOR_REFINEMENT]: number;
  [ParamId.CHARACTER_ARMOR_TYPE]: ArmorTypeId;
  [ParamId.CHARACTER_ARMOR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ARMOR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ARMOR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_ADDITIONAL_GEAR_DEF]: number;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_REFINEMENT]: number;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SPECIAL_GEAR_DEF]: number;
  [ParamId.CHARACTER_SPECIAL_GEAR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN]: boolean;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_BURDEN]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_COMBAT_TIME]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL]: number;

  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET]: ResonanceSetId;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL]: number;

  [ParamId.CHARACTER_CONSUMABLES]: Stat[]; // statmap for now
  [ParamId.CHARACTER_FOODBUFFS]: Stat[]; // statmap for now

  [ParamId.CHARACTER_AILMENTS_WEAKEN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FLINCH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_TUMBLE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_STUN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_POISON_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_PARALYSIS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_BLINDNESS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_IGNITION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FREEZE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_SLOW_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_STOP_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FEAR_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_DIZZY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_LETHARGY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_SILENCE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_BLEED_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FATIGUE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_DAZZLED_ISACTIVE]: boolean;

  [ParamId.CHARACTER_REGISLETS_ZEROSTANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAXMPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICDEFENSEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_PHYSICALDEFENSEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_DODGEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_ACCURACYBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL]: number;
}

// ---------- UTILS --------------

export const add = (a: number, b: number) => a + b;
export const total = (base: number, percent: number, flat: number) =>
  base * (1 + percent / 100) + flat;

export const isUsingStatAccessibleSubWeapon = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ||
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.DAGGER ||
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.NINJUTSU_SCROLL ||
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD;

export const isUsingMainOHS = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponTypeId.ONE_HANDED_SWORD;

export const isUsingSubOHS = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
  SubWeaponTypeId.ONE_HANDED_SWORD;

export const isUsingMainTHS = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponTypeId.TWO_HANDED_SWORD;

export const isUsingMainHAL = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD;

export const isUsingDualSwords = (input: Input) =>
  isUsingMainOHS(input) &&
  isUsingSubOHS(input) &&
  input[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL] >
    0;

export const isUsingMainBWG = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN;

export const isUsingMainKN = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES;

export const isUsingSubArrow = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW;

export const isNotUsingSubWeapon = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE;

export const flattenedStatsFromMainWeapon = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_STATMAP](input);

export const flattenedStatsFromMainWeaponCrystal1 = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP](input);

export const flattenedStatsFromMainWeaponCrystal2 = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP](input);

export const flattenedStatsFromSubWeapon = (input: Input) =>
  isUsingStatAccessibleSubWeapon(input) ?
    input[ParamId.CHARACTER_SUBWEAPON_STATMAP](input)
  : [];

export const flattenedStatsFromArmor = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_STATMAP](input);

export const flattenedStatsFromArmorCrystal1 = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_CRYSTAL1_STATMAP](input);

export const flattenedStatsFromArmorCrystal2 = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_CRYSTAL2_STATMAP](input);

export const flattenedStatsFromAdditionalGear = (input: Input) =>
  input[ParamId.CHARACTER_ADDITIONAL_GEAR_STATMAP](input);

export const flattenedStatsFromAdditionalGearCrystal1 = (input: Input) =>
  input[ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP](input);

export const flattenedStatsFromAdditionalGearCrystal2 = (input: Input) =>
  input[ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP](input);

export const flattenedStatsFromSpecialGear = (input: Input) =>
  input[ParamId.CHARACTER_SPECIAL_GEAR_STATMAP](input);

export const flattenedStatsFromSpecialGearCrystal1 = (input: Input) =>
  input[ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP](input);

export const flattenedStatsFromSpecialGearCrystal2 = (input: Input) =>
  input[ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP](input);

export const flattenedStats = (input: Input) =>
  ([] as Stat[]).concat(
    flattenedStatsFromMainWeapon(input),
    flattenedStatsFromMainWeaponCrystal1(input),
    flattenedStatsFromMainWeaponCrystal2(input),
    flattenedStatsFromSubWeapon(input),
    flattenedStatsFromArmor(input),
    flattenedStatsFromArmorCrystal1(input),
    flattenedStatsFromArmorCrystal2(input),
    flattenedStatsFromAdditionalGear(input),
    flattenedStatsFromAdditionalGearCrystal1(input),
    flattenedStatsFromAdditionalGearCrystal2(input),
    flattenedStatsFromSpecialGear(input),
    flattenedStatsFromSpecialGearCrystal1(input),
    flattenedStatsFromSpecialGearCrystal2(input),
    input[ParamId.CHARACTER_FOODBUFFS],
    input[ParamId.CHARACTER_CONSUMABLES],
  );

// ---------- BASIC STATS --------------

// AGI
export const totalPercentAGIFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentAGI = (input: Input) =>
  totalPercentAGIFromEquipment(input);

export const totalFlatAGIFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatAGI = (input: Input) =>
  totalFlatAGIFromEquipment(input) + godspeedTotalFlatAGI(input);

export const totalAGI = (input: Input) =>
  total(
    input[ParamId.CHARACTER_BASE_AGI],
    totalPercentAGI(input),
    totalFlatAGI(input),
  );

// DEX
export const totalPercentDEXFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentDEX = (input: Input) =>
  totalPercentDEXFromEquipment(input);

export const totalFlatDEXFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatDEX = (input: Input) =>
  totalFlatDEXFromEquipment(input);

export const totalDEX = (input: Input) =>
  total(
    input[ParamId.CHARACTER_BASE_DEX],
    totalPercentDEX(input),
    totalFlatDEX(input),
  );

// STR

export const totalPercentSTRFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentSTR = (input: Input) =>
  totalPercentSTRFromEquipment(input);

export const totalFlatSTRFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatSTR = (input: Input) =>
  totalFlatSTRFromEquipment(input);

export const totalSTR = (input: Input) =>
  total(
    input[ParamId.CHARACTER_BASE_STR],
    totalPercentSTR(input),
    totalFlatSTR(input),
  );

// INT

export const totalPercentINTFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentINT = (input: Input) =>
  totalPercentINTFromEquipment(input);

export const totalFlatINTFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatINT = (input: Input) =>
  totalFlatINTFromEquipment(input);

export const totalINT = (input: Input) =>
  total(
    input[ParamId.CHARACTER_BASE_INT],
    totalPercentINT(input),
    totalFlatINT(input),
  );

// VIT

export const totalPercentVITFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentVIT = (input: Input) =>
  totalPercentVITFromEquipment(input);

export const totalFlatVITFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatVIT = (input: Input) =>
  totalFlatVITFromEquipment(input);

export const totalVIT = (input: Input) =>
  total(
    input[ParamId.CHARACTER_BASE_VIT],
    totalPercentVIT(input),
    totalFlatVIT(input),
  );

// ---------- DERIVED STATS --------------

// accuracy
export const totalBaseAccuracy = (input: Input) =>
  Math.floor(input[ParamId.CHARACTER_LEVEL] + totalDEX(input));

export const totalPercentAccuracyFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_ACCURACY)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentAccuracyFromSkills = (input: Input) =>
  dualSwordMasteryTotalPercentAccuracy(input) +
  dualSwordControlTotalPercentAccuracy(input) +
  samuraiArcheryTotalPercentAccuracy(input) +
  twoHandedTotalPercentAccuracy(input);

export const totalPercentAccuracy = (input: Input) =>
  totalPercentAccuracyFromEquipment(input) +
  totalFlatAccuracyFromSkills(input);

export const totalFlatAccuracyFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_ACCURACY)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatAccuracyFromSkills = (input: Input) =>
  bushidoTotalFlatAccuracy(input) + accuracyUPTotalFlatAccuracy(input);

export const totalFlatAccuracy = (input: Input) =>
  totalFlatAccuracyFromEquipment(input) +
  totalFlatAccuracyFromSkills(input);

export const totalAccuracy = (input: Input) =>
  total(
    totalBaseAccuracy(input),
    totalPercentAccuracy(input),
    totalFlatAccuracy(input),
  );

export const totalAnticipate = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.ANTICIPATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// ailment resistance

export const totalAilmentResistanceFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.AILMENT_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalAilmentResistanceFromMTL = (input: Input) =>
  input[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.MTL ?
    Math.floor(input[ParamId.CHARACTER_PERSONAL_STAT_VALUE] / 3.4)
  : 0;

export const totalAilmentResistance = (input: Input) =>
  totalAilmentResistanceFromEquipment(input) +
  totalAilmentResistanceFromMTL(input);

// ASPD

export const totalDualWieldBaseASPD = (input: Input) =>
  Math.floor(
    100 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 4 +
      (totalAGI(input) + totalSTR(input) - 1) / 5,
  );

export const totalOneHandedSwordBaseASPD = (input: Input) =>
  Math.floor(
    100 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 4 +
      (totalAGI(input) + totalSTR(input) - 1) / 5,
  );

export const totalTwoHandedSwordBaseASPD = (input: Input) =>
  Math.floor(
    50 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 2 +
      (totalAGI(input) + totalSTR(input) - 1) / 5,
  );

export const totalBowBaseASPD = (input: Input) =>
  Math.floor(
    75 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 3 +
      (totalAGI(input) + totalDEX(input) * 2 - 1) / 10,
  );

export const totalBowgunBaseASPD = (input: Input) =>
  Math.floor(
    30 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 2.2 +
      totalDEX(input) * 0.2,
  );

export const totalStaffBaseASPD = (input: Input) =>
  Math.floor(
    60 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) +
      (totalAGI(input) + totalINT(input) - 1) / 5,
  );

export const totalMagicDeviceBaseASPD = (input: Input) =>
  Math.floor(
    90 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 4 +
      (totalINT(input) - 1) / 5,
  );

export const totalKnuckleBaseASPD = (input: Input) =>
  Math.floor(
    120 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 4.6 +
      totalDEX(input) / 10 +
      totalSTR(input) / 10,
  );

export const totalHalberdBaseASPD = (input: Input) =>
  Math.floor(
    25 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 3.5 +
      totalSTR(input) * 0.2,
  );

export const totalKatanaBaseASPD = (input: Input) =>
  Math.floor(
    200 +
      input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 3.9 +
      totalSTR(input) * 0.3,
  );

export const totalBareHandBaseASPD = (input: Input) =>
  Math.floor(
    1000 + input[ParamId.CHARACTER_LEVEL] + totalAGI(input) * 9.6,
  );

export const totalBaseASPD = (input: Input) =>
  isUsingDualSwords(input) ? totalDualWieldBaseASPD(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseASPD(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseASPD(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseASPD(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseASPD(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseASPD(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseASPD(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseASPD(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD ?
    totalHalberdBaseASPD(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseASPD(input)
  : totalBareHandBaseASPD(input);

export const totalPercentASPDFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_ASPD)
    .map((stat) => stat[1])
    .reduce(add, 0) +
  armorTypeIdPercentASPDModifier(input) +
  subWeaponShieldPercentASPDModifier(input);

export const totalPercentASPDFromSkills = (input: Input) =>
  quickSlashTotalPercentASPD(input) +
  berserkTotalPercentASPD(input) +
  quickAuraTotalPercentASPD(input);

export const totalPercentASPD = (input: Input) =>
  totalPercentASPDFromEquipment(input) + totalPercentASPDFromSkills(input);

export const totalFlatASPDFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_ASPD)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatASPDFromSkills = (input: Input) =>
  quickSlashTotalFlatASPD(input) +
  berserkTotalFlatASPD(input) +
  martialDisciplineTotalFlatASPD(input) +
  dualSwordControlTotalFlatASPD(input) +
  quickAuraTotalFlatASPD(input) +
  godspeedWieldTotalFlatASPD(input);

export const totalFlatASPD = (input: Input) =>
  totalFlatASPDFromEquipment(input) + totalFlatASPDFromSkills(input);

export const totalASPD = (input: Input) =>
  total(
    totalBaseASPD(input),
    totalPercentASPD(input),
    totalFlatASPD(input),
  );

// ATK

export const totalDualWieldBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalSTR(input) +
  totalDEX(input) * 2 +
  totalAGI(input) +
  totalMainWeaponATK(input);

// A bit skeptical on this one, maybe this does not multiply STR/DEX by 2 if and only if STR/DEX  is equal to 1
export const totalOneHandedSwordBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalSTR(input) * 2 +
  totalDEX(input) * 2 +
  totalMainWeaponATK(input);

export const totalTwoHandedSwordBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalSTR(input) * 3 +
  totalDEX(input) +
  totalMainWeaponATK(input);

export const totalBowBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalDEX(input) * 3 +
  totalSTR(input) +
  totalMainWeaponATK(input);

export const totalBowgunBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalDEX(input) * 4 +
  totalMainWeaponATK(input) +
  hunterBowgunTotalBaseATK(input);

export const totalStaffBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalSTR(input) * 3 +
  totalINT(input) +
  totalMainWeaponATK(input);

export const totalMagicDeviceBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalINT(input) * 2 +
  totalAGI(input) * 2 +
  totalMainWeaponATK(input);

export const totalKnuckleBaseATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalAGI(input) * 2 +
      totalDEX(input) * 0.5 +
      totalMainWeaponATK(input),
  );

export const totalHalberdBaseATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalSTR(input) * 2.5 +
      totalAGI(input) * 1.5 +
      totalMainWeaponATK(input),
  );

export const totalKatanaBaseATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalSTR(input) * 1.5 +
      totalDEX(input) * 2.5 +
      totalMainWeaponATK(input),
  );

export const totalBareHandBaseATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalSTR(input) +
  1 +
  totalMainWeaponATK(input);

export const totalBaseATK = (input: Input) =>
  isUsingDualSwords(input) ? totalDualWieldBaseATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD ?
    totalHalberdBaseATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseATK(input)
  : totalBareHandBaseATK(input) +
    totalBaseATKValueFromATKUP(input) +
    totalBaseATKValueFromATKDOWN(input);

export const totalPercentATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponMagicDevicePercentATKModifier(input);

export const totalPercentATKFromSkills = (input: Input) =>
  swordMasteryTotalPercentATK(input) +
  shotMasteryTotalPercentATK(input) +
  martialMasteryTotalPercentATK(input) +
  halberdMasteryTotalPercentATK(input) +
  bushidoTotalPercentATK(input) +
  warCryTotalPercentATK(input);

export const totalPercentATK = (input: Input) =>
  totalPercentATKFromEquipment(input) +
  totalPercentATKFromSkills(input) +
  castMasteryTotalPercentATK(input); // this one is a special case, so im not going to include it in skills func;

// this fuhction is only dedicated for wizard atk calculation

export const totalFlatATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + physicalAttackBoostTotalFlatATK(input);

export const totalFlatATKFromSkills = (input: Input) =>
  attackUPTotalFlatATK(input) + intimidatingPowerTotalFlatATK(input);

export const totalFlatATK = (input: Input) =>
  totalFlatATKFromEquipment(input) + totalFlatATKFromSkills(input);

export const totalATK = (input: Input) =>
  total(totalBaseATK(input), totalPercentATK(input), totalFlatATK(input));

// cdmg

export const totalBaseCriticalDamage = (input: Input) => {
  const agi = totalAGI(input);
  const str = totalSTR(input);

  return agi > str ?
      Math.floor(150 + (agi + str) / 10)
    : Math.floor(150 + str / 5);
};

export const totalPercentCriticalDamageFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_CRITICAL_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentCriticalDamageFromSkills = (input: Input) =>
  criticalUPTotalPercentCriticalDamage(input);

export const totalPercentCriticalDamage = (input: Input) =>
  totalPercentCriticalDamageFromEquipment(input) +
  totalPercentCriticalDamageFromSkills(input);

export const totalFlatCriticalDamage = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_CRITICAL_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalCriticalDamage = (input: Input) => {
  const val = total(
    totalBaseCriticalDamage(input),
    totalPercentCriticalDamage(input),
    totalFlatCriticalDamage(input),
  );

  return val > 300 ? 300 + Math.floor((val - 300) / 2) : val; // soft cap
};

export const totalMagicCriticalDamageConversion = (input: Input) =>
  25 + spellBurstTotalMagicCriticalDamageConversion(input);

/** NOTE:
 * this is only for display purposes, magic critical damage is dynamic therefore
 * it is not advisable to add this function to the skill calculations due to
 * several factors that can increase the `mcdmg` conversion.
 */
export const totalMagicCriticalDamage = (input: Input) =>
  Math.floor(
    100 +
      (totalCriticalDamage(input) - 100) *
        (totalMagicCriticalDamageConversion(input) / 100),
  );

// critrate
export const totalBaseCriticalRate = (input: Input) =>
  input[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.CRT ?
    Math.floor(25 + input[ParamId.CHARACTER_PERSONAL_STAT_VALUE] / 3.4)
  : 0;

export const totalPercentCriticalRateFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_CRITICAL_RATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentCriticalRateFromSkills = (input: Input) =>
  criticalSpearTotalPercentCriticalRate(input) +
  dualSwordMasteryTotalPercentCriticalRate(input) +
  dualSwordControlTotalPercentCriticalRate(input);

export const totalPercentCriticalRate = (input: Input) =>
  totalPercentCriticalRateFromEquipment(input) +
  totalPercentCriticalRateFromSkills(input);

export const totalFlatCriticalRateFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_CRITICAL_RATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatCriticalRateFromSkills = (input: Input) =>
  criticalSpearTotalFlatCriticalRate(input) +
  twoHandedTotalFlatCriticalRate(input) +
  criticalUPTotalFlatCriticalRate(input);

export const totalFlatCriticalRate = (input: Input) =>
  totalFlatCriticalRateFromEquipment(input) +
  totalFlatCriticalRateFromSkills(input);

export const totalCriticalRate = (input: Input) => {
  return total(
    totalBaseCriticalRate(input),
    totalPercentCriticalRate(input),
    totalFlatCriticalRate(input),
  );
};

/** NOTE:
 * this is only for display purposes, magic critical damage is dynamic therefore
 * it is not advisable to add this function to the skill calculations due to
 * several factors that can increase the `mcdmg` conversion.
 */
export const totalMagicCriticalRateConversion = (input: Input) =>
  spellBurstTotalMagicCriticalRateConversion(input);

export const totalMagicCriticalRate = (input: Input) =>
  Math.floor(
    totalCriticalRate(input) *
      (totalMagicCriticalRateConversion(input) / 100),
  );

// add edge cases?
export const totalMagicCriticalRateAgainstWeakenedTarget = (
  input: Input,
) =>
  totalCriticalRate(input) *
  ((totalMagicCriticalRateConversion(input) + 50) / 100);

// CSPD
export const totalBaseCSPD = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      1.16 * totalAGI(input) +
      2.94 * totalDEX(input),
  );

export const totalPercentCSPDFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_CSPD)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentCSPDFromSkills = (input: Input) =>
  magicWarriorMasteryTotalPercentCSPD(input) +
  highCycleTotalPercentCSPD(input) +
  castMasteryTotalPercentCSPD(input);

export const totalPercentCSPD = (input: Input) =>
  totalPercentCSPDFromEquipment(input) + totalPercentCSPDFromSkills(input);

export const totalFlatCSPDFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_CSPD)
    .map((stat) => stat[1])
    .reduce(add, 0) + magicSpeedBoostTotalFlatCSPD(input);

export const totalFlatCSPDFromSkills = (input: Input) =>
  magicWarriorMasteryTotalFlatCSPD(input) +
  highCycleTotalFlatCSPD(input) +
  castMasteryTotalFlatCSPD(input) +
  overlimitTotalFlatCSPD(input);

export const totalFlatCSPD = (input: Input) =>
  totalFlatCSPDFromEquipment(input) + totalFlatCSPDFromSkills(input);

export const totalCSPD = (input: Input) =>
  total(
    totalBaseCSPD(input),
    totalPercentCSPD(input),
    totalFlatCSPD(input),
  );

// DEF
export const normalArmorBaseDEF = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalVIT(input) +
  totalEquipmentDEF(input);

export const lightArmorBaseDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 0.8 +
      totalVIT(input) * 0.25 +
      totalEquipmentDEF(input),
  );

export const heavyArmorBaseDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 1.2 +
      totalVIT(input) * 2 +
      totalEquipmentDEF(input),
  );

export const noArmorBaseDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 0.4 +
      totalVIT(input) * 0.1 +
      totalEquipmentDEF(input),
  );

export const totalBaseDEF = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseDEF(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseDEF(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseDEF(input)
  : noArmorBaseDEF(input);

export const totalPercentDEFFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_DEF)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponArrowPercentDEFModifier(input);

export const totalPercentDEFFromSkills = (input: Input) =>
  berserkTotalPercentDEF(input) + forceShieldTotalPercentDEF(input);

export const totalPercentDEF = (input: Input) =>
  totalPercentDEFFromEquipment(input) + totalPercentDEFFromSkills(input);

export const totalFlatDEFFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_DEF)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatDEFFromSkills = (input: Input) =>
  forceShieldTotalFlatDEF(input) +
  defenseUPTotalFlatDEF(input) +
  defenseMasteryTotalFlatDEF(input);

export const totalFlatDEF = (input: Input) =>
  totalFlatDEFFromEquipment(input) + totalFlatDEFFromSkills(input);

export const totalDEF = (input: Input) =>
  total(totalBaseDEF(input), totalPercentDEF(input), totalFlatDEF(input));

// Dodge
export const normalArmorBaseDodge = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalAGI(input);

export const lightArmorBaseDodge = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 1.25 + totalAGI(input) * 1.75,
  ) + 30;

export const heavyArmorBaseDodge = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 0.5 + totalAGI(input) * 0.75,
  ) - 15;

export const noArmorBaseDodge = (input: Input) =>
  Math.floor(input[ParamId.CHARACTER_LEVEL] * 1.5 + totalAGI(input) * 2) +
  75;

export const totalBaseDodge = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseDodge(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseDodge(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseDodge(input)
  : noArmorBaseDodge(input);

export const totalPercentDodge = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_DODGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatDodge = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_DODGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + dodgeUPTotalFlatDodge(input);

export const totalDodge = (input: Input) =>
  total(
    totalBaseDodge(input),
    totalPercentDodge(input),
    totalFlatDodge(input),
  );

// MATK

export const totalDualWieldBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalINT(input) * 3 + totalDEX(input);

export const totalOneHandedSwordBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalINT(input) * 3 + totalDEX(input);

export const totalTwoHandedSwordBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalINT(input) * 3 + totalDEX(input);

export const totalBowBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalINT(input) * 3 + totalDEX(input);

export const totalBowgunBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] + totalINT(input) * 3 + totalDEX(input);

export const totalStaffBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalINT(input) * 4 +
  totalDEX(input) +
  totalMainWeaponATK(input);

export const totalMagicDeviceBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalINT(input) * 4 +
  totalDEX(input) +
  totalMainWeaponATK(input);

export const totalKnuckleBaseMATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalINT(input) * 4 +
      totalDEX(input) +
      totalMainWeaponATK(input) * 0.5,
  );

export const totalHalberdBaseMATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalINT(input) * 2 +
      totalDEX(input) +
      totalAGI(input),
  );

export const totalKatanaBaseMATK = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] +
      totalINT(input) * 1.5 +
      totalDEX(input),
  );

export const totalBareHandBaseMATK = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalINT(input) * 3 +
  totalDEX(input) +
  1;

export const totalBaseMATK = (input: Input) =>
  (isUsingDualSwords(input) ? totalDualWieldBaseMATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseMATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseMATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseMATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseMATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseMATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseMATK(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseMATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD ?
    totalHalberdBaseMATK(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseMATK(input)
  : totalBareHandBaseMATK(input)) +
  totalBaseMATKValueFromMATKUP(input) +
  totalBaseMATKValueFromMATKDOWN(input);

export const totalPercentMATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_MATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponKnucklePercentMATKModifier(input);

export const totalPercentMATKFromSkills = (input: Input) =>
  magicMasteryTotalPercentMATK(input) + prayerTotalPercentMATK(input);

export const totalPercentMATK = (input: Input) =>
  totalPercentMATKFromEquipment(input) + totalPercentMATKFromSkills(input);

export const totalFlatMATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_MATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + magicAttackBoostTotalFlatMATK(input);

export const totalFlatMATKFromSkills = (input: Input) =>
  magicUPTotalFlatMATK(input) +
  increasedEnergyTotalFlatMATK(input) +
  magicWarriorMasteryTotalFlatMATK(input) +
  conversionTotalFlatMATK(input);

export const totalFlatMATK = (input: Input) =>
  totalFlatMATKFromEquipment(input) + totalFlatMATKFromSkills(input);

export const totalMATK = (input: Input) =>
  total(
    totalBaseMATK(input),
    totalPercentMATK(input),
    totalFlatMATK(input),
  );

// MAX HP
export const totalBaseMaxHP = (input: Input) =>
  93 +
  Math.floor(
    (totalVIT(input) + 22.4) * (input[ParamId.CHARACTER_LEVEL] / 3),
  ); // need to confirm this

export const totalPercentMaxHPFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_MAX_HP)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentMaxHPFromSkills = (input: Input) =>
  HPBoostTotalPercentMaxHP(input);

export const totalPercentMaxHP = (input: Input) =>
  totalPercentMaxHPFromEquipment(input) +
  totalPercentMaxHPFromSkills(input);

export const totalFlatMaxHPFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0) + maxHPBoostTotalFlatMaxMP(input);

export const totalFlatMaxHPFromSkills = (input: Input) =>
  bushidoTotalFlatMaxHP(input) +
  HPBoostTotalFlatMaxHP(input) +
  forceShieldTotalFlatMaxHP(input) +
  magicalShieldTotalFlatMaxHP(input);

export const totalFlatMaxHP = (input: Input) =>
  totalFlatMaxHPFromEquipment(input) + totalFlatMaxHPFromSkills(input);

export const totalMaxHP = (input: Input) =>
  total(
    totalBaseMaxHP(input),
    totalPercentMaxHP(input),
    totalFlatMaxHP(input),
  );

// MAX MP

export const totalBaseMaxMP = (input: Input) =>
  input[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.TEC ?
    input[ParamId.CHARACTER_PERSONAL_STAT_VALUE] > 0 ?
      Math.floor(
        100 +
          input[ParamId.CHARACTER_LEVEL] +
          totalINT(input) / 10 +
          (input[ParamId.CHARACTER_PERSONAL_STAT_VALUE] - 1),
      )
    : Math.floor(
        100 + input[ParamId.CHARACTER_LEVEL] + totalINT(input) / 10,
      )
  : 0;

export const totalPercentMaxMP = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatMaxMPFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0) + maxMPBoostTotalFlatMaxMP(input);

export const totalFlatMaxMPFromSkills = (input: Input) =>
  bushidoTotalFlatMaxMP(input) + MPBoostTotalFlatMaxMP(input);

export const totalFlatMaxMP = (input: Input) =>
  totalFlatMaxMPFromEquipment(input) + totalFlatMaxMPFromSkills(input);

export const totalMaxMP = (input: Input) =>
  total(
    totalBaseMaxMP(input),
    totalPercentMaxMP(input),
    totalFlatMaxMP(input),
  );

// MDEF

export const normalArmorBaseMDEF = (input: Input) =>
  input[ParamId.CHARACTER_LEVEL] +
  totalINT(input) +
  totalEquipmentDEF(input);

export const lightArmorBaseMDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 0.8 +
      totalINT(input) * 0.25 +
      totalEquipmentDEF(input),
  );

export const heavyArmorBaseMDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 1.2 +
      totalINT(input) * 2 +
      totalEquipmentDEF(input),
  );

export const noArmorBaseMDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * 0.4 +
      totalINT(input) * 0.1 +
      totalEquipmentDEF(input),
  );

export const totalBaseMDEF = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseMDEF(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseMDEF(input)
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseMDEF(input)
  : noArmorBaseMDEF(input);

export const totalPercentMDEFFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_MDEF)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponArrowPercentMDEFModifier(input);

export const totalPercentMDEFFromSkills = (input: Input) =>
  berserkTotalPercentMDEF(input) + magicalShieldTotalPercentMDEF(input);

export const totalPercentMDEF = (input: Input) =>
  totalPercentMDEFFromEquipment(input) + totalPercentMDEFFromSkills(input);

export const totalFlatMDEFFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_MDEF)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatMDEFFromSkills = (input: Input) =>
  magicalShieldTotalFlatMDEF(input) +
  defenseUPTotalFlatMDEF(input) +
  defenseMasteryTotalFlatMDEF(input);

export const totalFlatMDEF = (input: Input) =>
  totalFlatMDEFFromEquipment(input) + totalFlatMDEFFromSkills(input);

export const totalMDEF = (input: Input) =>
  total(
    totalBaseMDEF(input),
    totalPercentMDEF(input),
    totalFlatMDEF(input),
  );

// modifiers
export const armorTypeIdPercentASPDModifier = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ? 50
  : input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ? -50
  : 0;

export const subWeaponMagicDevicePercentATKModifier = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    -15 + magicWarriorMasteryTotalPercentATKPenaltyReduction(input)
  : 0;

export const subWeaponShieldPercentASPDModifier = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    -50 + shieldMasteryPercentASPDPenaltyReduction(input)
  : 0;

export const subWeaponKnucklePercentMATKModifier = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KNUCKLES ?
    -15
  : 0;

export const subWeaponArrowPercentMDEFModifier = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ?
    -25
  : 0;

export const subWeaponArrowPercentDEFModifier = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ?
    -25
  : 0;

// stability

export const totalDualWieldBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(input) + totalDEX(input) * 3) / 40,
  );

export const totalOneHandedSwordBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(input) + totalDEX(input) * 3) / 40,
  );

export const totalTwoHandedSwordBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(input) / 10,
  );

export const totalBowBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(input) + totalDEX(input)) / 20,
  );

export const totalBowgunBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalSTR(input) / 20,
  );

export const totalStaffBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalSTR(input) / 20,
  );

export const totalMagicDeviceBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(input) / 10,
  );

export const totalKnuckleBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(input) / 40,
  );

export const totalHalberdBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(input) + totalDEX(input)) / 20,
  );

export const totalKatanaBaseStability = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(input) * 3 + totalDEX(input)) / 40,
  );
export const totalBareHandBaseStability = (input: Input) =>
  Math.floor(1 + totalDEX(input) / 3);

export const totalBaseStability = (input: Input) =>
  isUsingDualSwords(input) ? totalDualWieldBaseStability(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseStability(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseStability(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseStability(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseStability(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseStability(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseStability(input)
  : (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseStability(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD ?
    totalHalberdBaseStability(input)
  : input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseStability(input)
  : totalBareHandBaseStability(input);

// --------------- Equipment stats ---------------

// defensive
export const totalEquipmentDEF = (input: Input) =>
  (input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    input[ParamId.CHARACTER_SUBWEAPON_DEF]
  : 0) +
  input[ParamId.CHARACTER_ARMOR_DEF] +
  input[ParamId.CHARACTER_ADDITIONAL_GEAR_DEF] +
  input[ParamId.CHARACTER_SPECIAL_GEAR_DEF];

export const totalRefinementReduction = (input: Input) =>
  ((
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ||
    (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE && // magic skin
      magicSkinLevel(input) > 0)
  ) ?
    input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0) +
  input[ParamId.CHARACTER_ARMOR_REFINEMENT] +
  input[ParamId.CHARACTER_ADDITIONAL_GEAR_REFINEMENT];

// element
export const mainWeaponElement = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_STATMAP](input)
    .filter(
      (stat) =>
        (stat[0] === StatId.EARTH_ELEMENT ||
          stat[0] === StatId.FIRE_ELEMENT ||
          stat[0] === StatId.WIND_ELEMENT ||
          stat[0] === StatId.WATER_ELEMENT ||
          stat[0] === StatId.DARK_ELEMENT ||
          stat[0] === StatId.LIGHT_ELEMENT) &&
        stat[1] > 0,
    )
    .map((stat) =>
      stat[0] === StatId.EARTH_ELEMENT ? "earth"
      : stat[0] === StatId.FIRE_ELEMENT ? "fire"
      : stat[0] === StatId.WIND_ELEMENT ? "wind"
      : stat[0] === StatId.WATER_ELEMENT ? "water"
      : stat[0] === StatId.DARK_ELEMENT ? "dark"
      : stat[0] === StatId.LIGHT_ELEMENT ? "light"
      : "neutral",
    )
    .reduce((prev, curr) => (curr !== "neutral" ? curr : prev), "neutral");

export const subWeaponElement = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_STATMAP](input)
    .filter(
      (stat) =>
        (stat[0] === StatId.EARTH_ELEMENT ||
          stat[0] === StatId.FIRE_ELEMENT ||
          stat[0] === StatId.WIND_ELEMENT ||
          stat[0] === StatId.WATER_ELEMENT ||
          stat[0] === StatId.DARK_ELEMENT ||
          stat[0] === StatId.LIGHT_ELEMENT) &&
        stat[1] > 0,
    )
    .map((stat) =>
      stat[0] === StatId.EARTH_ELEMENT ? "earth"
      : stat[0] === StatId.FIRE_ELEMENT ? "fire"
      : stat[0] === StatId.WIND_ELEMENT ? "wind"
      : stat[0] === StatId.WATER_ELEMENT ? "water"
      : stat[0] === StatId.DARK_ELEMENT ? "dark"
      : stat[0] === StatId.LIGHT_ELEMENT ? "light"
      : "neutral",
    )
    .reduce((prev, curr) => (curr !== "neutral" ? curr : prev), "neutral");

// equipment related stability

export const totalStabilityFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.STABILITY)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalStabilityFromSkills = (input: Input) =>
  berserkTotalStability(input) +
  samuraiArcheryTotalStability(input) +
  twoHandedTotalStability(input);

export const totalStability = (input: Input) =>
  totalBaseStability(input) +
  totalStabilityFromEquipment(input) +
  totalStabilityFromSkills(input);

/** graze effect lacking here */
export const totalMinimumStability = (input: Input) =>
  totalStability(input);

/** graze effect lacking here */
export const totalMaximumStability = (input: Input) => 100;

export const totalMagicStability = (input: Input) =>
  Math.floor((100 + totalStability(input)) / 2);

export const totalMinimumMagicStability = (input: Input) =>
  totalMagicStability(input);

export const totalMaximumMagicStability = (input: Input) =>
  totalMagicStability(input) > 90 ?
    totalMagicStability(input) - 90 + 100
  : 100;

// weapon atk

export const totalMainWeaponRefinementBonusMainWeaponATK = (
  input: Input,
) =>
  Math.floor(
    input[ParamId.CHARACTER_MAINWEAPON_ATK] *
      (input[ParamId.CHARACTER_MAINWEAPON_REFINEMENT] ** 2 / 100),
  ) + input[ParamId.CHARACTER_MAINWEAPON_REFINEMENT];
export const totalSubWeaponRefinementBonusSubWeaponATK = (input: Input) =>
  isUsingDualSwords(input) ?
    Math.floor(
      input[ParamId.CHARACTER_SUBWEAPON_ATK] *
        (input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] ** 2 / 200),
    ) + input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0;

export const totalPercentWeaponATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_WEAPON_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentWeaponATKFromSkills = (input: Input) =>
  swordMasteryTotalPercentWeaponATK(input) +
  shotMasteryTotalPercentWeaponATK(input) +
  martialMasteryTotalPercentWeaponATK(input) +
  magicMasteryTotalPercentWeaponATK(input) +
  halberdMasteryTotalPercentWeaponATK(input) +
  bushidoTotalPercentWeaponATK(input) +
  twoHandedTotalPercentWeaponATK(input) +
  braveAuraTotalPercentWeaponATK(input) +
  busterBladeTotalPercentWeaponATK(input);

export const totalPercentWeaponATK = (input: Input) =>
  totalPercentWeaponATKFromEquipment(input) +
  totalPercentWeaponATKFromSkills(input);

export const totalFlatWeaponATKFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_WEAPON_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatWeaponATKFromSkills = (input: Input) =>
  samuraiArcheryTotalFlatWeaponATK(input) +
  unarmedMasteryTotalFlatWeaponATK(input);

export const totalFlatWeaponATK = (input: Input) =>
  totalFlatWeaponATKFromEquipment(input) +
  totalFlatWeaponATKFromSkills(input);

export const totalMainWeaponATK = (input: Input) =>
  total(
    input[ParamId.CHARACTER_MAINWEAPON_ATK],
    totalPercentWeaponATK(input) +
      flashBlastTotalPercentMainWeaponATK(input),
    totalFlatWeaponATK(input) +
      totalMainWeaponRefinementBonusMainWeaponATK(input),
  );

export const totalSubWeaponATK = (input: Input) =>
  isUsingDualSwords(input) ?
    total(
      input[ParamId.CHARACTER_SUBWEAPON_ATK],
      totalPercentWeaponATK(input),
      totalFlatWeaponATK(input),
    ) + totalSubWeaponRefinementBonusSubWeaponATK(input)
  : 0;

// non-derived

// damage to element/ dte

export const totalMagicDamageToElementBasedFromINT = (input: Input) =>
  Math.floor(input[ParamId.CHARACTER_BASE_INT] / 10);

export const totalDamageToDark = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_DARK)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDamageToLight = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_LIGHT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDamageToFire = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_FIRE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDamageToEarth = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_EARTH)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDamageToWind = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_WIND)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDamageToWater = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_WATER)
    .map((stat) => stat[1])
    .reduce(add, 0);

// evasion
export const totalBaseEvasionRecharge = (input: Input) => {
  // TODO
};

export const totalPercentEvasionRecharge = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.EVASION_RECHARGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + godspeedWieldTotalPercentEvasionRecharge(input);

// NOTE: Not sure for this calculations atm, so i might not be finishing this for now

// guard
export const totalBaseGuardPower = (input: Input) =>
  Math.min(
    [
      input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ? 5000 : 0,
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
        7500
      : 0,
      (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.TWO_HANDED_SWORD
      ) ?
        5000
      : 0,
      (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.HALBERD
      ) ?
        2500
      : 0,
      hiddenTalentTotalBaseGuardPower(input),
    ].reduce(add, 0),
    10000,
  );

export const totalPercentGuardPower = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.GUARD_POWER)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalGuardPower = (input: Input) =>
  totalBaseGuardPower(input) * (totalPercentGuardPower(input) / 100);

export const totalBaseGuardRecharge = (input: Input) =>
  [
    input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ? 25 : 0,
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
      75
    : 0,
    (
      input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.TWO_HANDED_SWORD
    ) ?
      50
    : 0,
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD ?
      25
    : 0,
    hiddenTalentTotalBaseGuardRecharge(input),
  ].reduce(add, 0);

export const totalPercentGuardRecharge = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.GUARD_RECHARGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + heavyArmorMasteryTotalGuardRecharge(input);

export const totalGuardRecharge = (input: Input) =>
  Math.floor(
    (totalBaseGuardRecharge(input) * totalPercentGuardRecharge(input)) /
      100,
  );

export const totalGuardBreak = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.GUARD_BREAK)
    .map((stat) => stat[1])
    .reduce(add, 0);

// pierce
export const totalMagicPierce = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.MAGIC_PIERCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPhysicalPierce = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PHYSICAL_PIERCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// range damage
export const totalLongRangeDamage = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.LONG_RANGE_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalShortRangeDamage = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.SHORT_RANGE_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// resistance
export const totalPhysicalResistanceFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PHYSICAL_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPhysicalResistanceFromSkills = (input: Input) =>
  forceShieldTotalPhysicalResistance(input) +
  godspeedWieldTotalPhysicalResistance(input) +
  siphonBarrierTotalPhysicalResistance(input);

export const totalPhysicalResistance = (input: Input) =>
  totalPhysicalResistanceFromEquipment(input) +
  totalPhysicalResistanceFromSkills(input);

export const totalMagicResistanceFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.MAGIC_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalMagicResistanceFromSkills = (input: Input) =>
  magicalShieldTotalMagicResistance(input) +
  godspeedWieldTotalMagicResistance(input) +
  siphonBarrierTotalMagicResistance(input);

export const totalMagicResistance = (input: Input) =>
  totalMagicResistanceFromEquipment(input) +
  totalMagicResistanceFromSkills(input);

export const totalLightResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.LIGHT_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalDarkResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.DARK_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFireResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FIRE_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalEarthResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.EARTH_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalWindResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.WIND_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalWaterResistance = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.WATER_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// -------------SPECIAL STATS -------------

// ampr
export const totalBaseAMPR = (input: Input) =>
  Math.floor(10 + totalMaxMP(input) / 100);

export const totalPercentAMPR = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_ATTACK_MP_RECOVERY)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatAMPRFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_ATTACK_MP_RECOVERY)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatAMPRFromSkills = (input: Input) =>
  aggravateTotalFlatAMPR(input) +
  etherFlareTotalFlatAMPR(input) +
  ultimaQiChargeTotalFlatAMPR(input);

export const totalFlatAMPR = (input: Input) =>
  totalFlatAMPRFromEquipment(input) + totalFlatAMPRFromSkills(input);

export const totalAMPR = (input: Input) =>
  total(
    totalBaseAMPR(input),
    totalPercentAMPR(input),
    totalFlatAMPR(input),
  );

// ATK DOWN

export const totalBaseATKValueFromATKDOWNAGI = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * input[ParamId.CHARACTER_BASE_AGI];

export const totalBaseATKValueFromATKDOWNDEX = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_DEX];

export const totalBaseATKValueFromATKDOWNINT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_INT];

export const totalBaseATKValueFromATKDOWNSTR = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_STR];

export const totalBaseATKValueFromATKDOWNVIT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_VIT];

export const totalBaseATKValueFromATKDOWN = (input: Input) =>
  [
    totalBaseATKValueFromATKDOWNAGI(input),
    totalBaseATKValueFromATKDOWNDEX(input),
    totalBaseATKValueFromATKDOWNINT(input),
    totalBaseATKValueFromATKDOWNSTR(input),
    totalBaseATKValueFromATKDOWNVIT(input),
  ].reduce(add);

// ATK UP

export const totalBaseATKValueFromATKUPAGI = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_UP_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * input[ParamId.CHARACTER_BASE_AGI];

export const totalBaseATKValueFromATKUPDEX = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_UP_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_DEX];

export const totalBaseATKValueFromATKUPINT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_UP_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_INT];

export const totalBaseATKValueFromATKUPSTR = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_UP_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_STR];

export const totalBaseATKValueFromATKUPVIT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.ATK_UP_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_VIT];

export const totalBaseATKValueFromATKUP = (input: Input) =>
  [
    totalBaseATKValueFromATKUPAGI(input),
    totalBaseATKValueFromATKUPDEX(input),
    totalBaseATKValueFromATKUPINT(input),
    totalBaseATKValueFromATKUPSTR(input),
    totalBaseATKValueFromATKUPVIT(input),
  ].reduce(add);

// MATK DOWN
export const totalBaseMATKValueFromMATKDOWNAGI = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * input[ParamId.CHARACTER_BASE_AGI];

export const totalBaseMATKValueFromMATKDOWNDEX = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_DEX];

export const totalBaseMATKValueFromMATKDOWNINT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_INT];

export const totalBaseMATKValueFromMATKDOWNSTR = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_STR];

export const totalBaseMATKValueFromMATKDOWNVIT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_VIT];

export const totalBaseMATKValueFromMATKDOWN = (input: Input) =>
  [
    totalBaseMATKValueFromMATKDOWNAGI(input),
    totalBaseMATKValueFromMATKDOWNDEX(input),
    totalBaseMATKValueFromMATKDOWNINT(input),
    totalBaseMATKValueFromMATKDOWNSTR(input),
    totalBaseMATKValueFromMATKDOWNVIT(input),
  ].reduce(add);

// MATK UP

export const totalBaseMATKValueFromMATKUPAGI = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_UP_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * input[ParamId.CHARACTER_BASE_AGI];

export const totalBaseMATKValueFromMATKUPDEX = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_UP_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_DEX];

export const totalBaseMATKValueFromMATKUPINT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_UP_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_INT];

export const totalBaseMATKValueFromMATKUPSTR = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_UP_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_STR];

export const totalBaseMATKValueFromMATKUPVIT = (input: Input) =>
  Math.floor(
    flattenedStats(input)
      .filter((stat) => stat[0] === StatId.MATK_UP_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * input[ParamId.CHARACTER_BASE_VIT];

export const totalBaseMATKValueFromMATKUP = (input: Input) =>
  [
    totalBaseMATKValueFromMATKUPAGI(input),
    totalBaseMATKValueFromMATKUPDEX(input),
    totalBaseMATKValueFromMATKUPINT(input),
    totalBaseMATKValueFromMATKUPSTR(input),
    totalBaseMATKValueFromMATKUPVIT(input),
  ].reduce(add, 0);

// CAST TIME REDUCTION

export const totalCastTimeReduction = (input: Input) =>
  Math.floor(
    totalCSPD(input) > 1000 ?
      50 + ((totalCSPD(input) - 1000) / 90) * 0.5
    : totalCSPD(input) / 20,
  );

// motion speed
export const totalMotionSpeed = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.MOTION_SPEED)
    .map((stat) => stat[1])
    .reduce(add, 0) + Math.floor((totalASPD(input) - 1000) / 180);

// unsheathe attack
export const totalPercentUnsheatheAttackFromEquipment = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_UNSHEATHE_ATTACK)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentUnsheatheAttackFromSkills = (input: Input) =>
  godspeedTotalPercentUnsheatheAttack(input) +
  flashBlastTotalPercentUnsheatheAttack(input);

export const totalPercentUnsheatheAttack = (input: Input) =>
  totalPercentUnsheatheAttackFromEquipment(input) +
  totalPercentUnsheatheAttackFromSkills(input);

export const totalFlatUnsheatheAttack = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.FLAT_UNSHEATHE_ATTACK)
    .map((stat) => stat[1])
    .reduce(add, 0);

// ---------- SKILLS AND PASSIVES --------------

// barehand skills

export const hiddenTalentLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL];

export const hiddenTalentTotalBaseGuardPower = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    hiddenTalentLevel(input) * 500
  : 0;

export const hiddenTalentTotalBaseGuardRecharge = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    5 + 2 * hiddenTalentLevel(input)
  : 0;

export const hiddenTalentTotalEvasionCount = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(2 + hiddenTalentLevel(input) * 0.4)
  : 0;

export const hiddenTalentTotalBaseEvasionRecharge = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    hiddenTalentLevel(input) < 10 ?
      0.1 * hiddenTalentLevel(input)
    : 10
  : 0;

export const hiddenTalentTotalCostQiReductionForNonBareHandSkills = (
  input: Input,
) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(0.5 * hiddenTalentLevel(input))
  : 0;

export const ultimaQiChargeLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL];

export const ultimaQiChargeTotalFlatAMPR = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(ultimaQiChargeLevel(input) * 0.5)
  : 0;

export const ultimaQiChargeTotalCostQiReductionForNonBareHandSkills = (
  input: Input,
) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    20 - ultimaQiChargeLevel(input)
  : 0;

export const unarmedMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL];

export const unarmedMasteryTotalFlatWeaponATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(
      (input[ParamId.CHARACTER_LEVEL] * unarmedMasteryLevel(input)) / 10,
    )
  : 0;

export const unarmedMasteryTotalQiChargeLimit = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    unarmedMasteryLevel(input) < 10 ?
      10 + unarmedMasteryLevel(input) * 10
    : 100 + input[ParamId.CHARACTER_LEVEL]
  : 0;

// blade skills

export const berserkIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE];
export const berserkLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL];

export const berserkTotalPercentASPD = (input: Input) =>
  berserkIsActive(input) ? berserkLevel(input) * 10 : 0;

export const berserkTotalFlatASPD = (input: Input) =>
  berserkIsActive(input) ? berserkLevel(input) * 100 : 0;

export const berserkTotalFlatCriticalRate = (input: Input) =>
  berserkIsActive(input) ? Math.floor(berserkLevel(input) * 2.5) : 0;

export const berserkTotalStability = (input: Input) =>
  berserkIsActive(input) ?
    isUsingMainOHS(input) || isUsingMainTHS(input) ?
      Math.floor(berserkLevel(input) * 2.5)
    : berserkLevel(input) * 5
  : 0;

export const berserkTotalPercentDEF = (input: Input) =>
  berserkIsActive(input) ?
    isUsingMainOHS(input) && !isUsingDualSwords(input) ?
      Math.floor((100 - berserkLevel(input)) / 2)
    : 100 - berserkLevel(input)
  : 0;

export const berserkTotalPercentMDEF = (input: Input) =>
  berserkIsActive(input) ?
    isUsingMainOHS(input) && !isUsingDualSwords(input) ?
      Math.floor((100 - berserkLevel(input)) / 2)
    : 100 - berserkLevel(input)
  : 0;

export const busterBladeLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL];

export const busterBladeIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE];

export const busterBladeTotalPercentWeaponATK = (input: Input) =>
  isUsingMainOHS(input) || isUsingMainTHS(input) ?
    busterBladeIsActive(input) ? busterBladeLevel(input)
    : 0
  : 0;

export const quickSlashLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL];

export const quickSlashTotalPercentASPD = (input: Input) =>
  isUsingMainOHS(input) || isUsingMainTHS(input) ?
    quickSlashLevel(input)
  : 0;

export const quickSlashTotalFlatASPD = (input: Input) =>
  isUsingMainOHS(input) || isUsingMainTHS(input) ?
    quickSlashLevel(input) * 10
  : 0;

export const swordMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL];

export const swordMasteryTotalPercentATK = (input: Input) =>
  isUsingMainOHS(input) || isUsingMainTHS(input) ?
    swordMasteryLevel(input) >= 8 ? 3
    : swordMasteryLevel(input) >= 3 ? 2
    : 1
  : 0;

export const swordMasteryTotalPercentWeaponATK = (input: Input) =>
  isUsingMainOHS(input) || isUsingMainTHS(input) ?
    swordMasteryLevel(input) * 3
  : 0;

export const warCryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL];

export const warCryIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE];

export const warCryTotalPercentATK = (input: Input) =>
  warCryIsActive(input) ?
    isUsingMainTHS(input) ? warCryLevel(input) * 10 + 5
    : warCryLevel(input) * 10
  : 0;

// dualswords skills

export const dualSwordControlLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL];

export const dualSwordControlTotalPercentCriticalRate = (input: Input) =>
  isUsingDualSwords(input) ? 5 + dualSwordControlLevel(input) * 3 : 0;

export const dualSwordControlTotalPercentAccuracy = (input: Input) =>
  isUsingDualSwords(input) ? 5 + dualSwordControlLevel(input) * 3 : 0;

export const dualSwordControlTotalFlatASPD = (input: Input) =>
  isUsingDualSwords(input) ? 50 * dualSwordControlLevel(input) : 0;

export const dualSwordMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL];

export const dualSwordMasteryTotalPercentCriticalRate = (input: Input) =>
  isUsingDualSwords(input) ? -55 + dualSwordMasteryLevel(input) * 3 : 0;

export const dualSwordMasteryTotalPercentAccuracy = (input: Input) =>
  isUsingDualSwords(input) ? -55 + dualSwordMasteryLevel(input) * 3 : 0;

export const flashBlastLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL];

export const flashBlastIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE];

export const flashBlastTotalPercentUnsheatheAttack = (input: Input) =>
  flashBlastIsActive(input) ? flashBlastLevel(input) : 0;

export const flashBlastTotalPercentMainWeaponATK = (input: Input) =>
  flashBlastIsActive(input) ?
    isUsingDualSwords(input) && flashBlastLevel(input) > 0 ?
      25
    : 0
  : 0;

export const godspeedLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

export const godspeedTotalFlatAGI = (input: Input) =>
  godspeedLevel(input) + Math.max(godspeedLevel(input) - 5, 0);

export const godspeedTotalPercentUnsheatheAttack = (input: Input) =>
  isUsingDualSwords(input) ?
    godspeedLevel(input) + 15
  : godspeedLevel(input) + 5;

// guard skills

export const advancedEvasionLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL];

export const advancedEvasionTotalEvasionRecharge = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    advancedEvasionLevel(input)
  : 0;

export const advancedGuardLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL];

export const advancedGuardTotalGuardRecharge = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    advancedGuardLevel(input)
  : 0;

export const advancedGuardTotalGuardPower = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    Math.floor((1 + advancedGuardLevel(input)) / 2)
  : 0;

export const heavyArmorMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL];

export const heavyArmorMasteryTotalGuardRecharge = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorMasteryLevel(input)
  : 0;

export const lightArmorMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL];

export const lightArmorMasteryTotalEvasionRecharge = (input: Input) =>
  input[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorMasteryLevel(input)
  : 0;

export const criticalSpearLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL];

export const criticalSpearTotalPercentCriticalRate = (input: Input) =>
  isUsingMainHAL(input) ? Math.floor(criticalSpearLevel(input) * 0.5) : 0;

export const criticalSpearTotalFlatCriticalRate = (input: Input) =>
  isUsingMainHAL(input) ?
    Math.floor(criticalSpearLevel(input) * 0.5 + 0.5)
  : 0;

export const godspeedWieldStacks = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS];

export const godspeedWieldLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

export const godspeedWieldIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE];

export const godspeedWieldTotalFlatASPD = (input: Input) =>
  godspeedWieldIsActive(input) ?
    isUsingMainHAL(input) ?
      30 * godspeedWieldLevel(input) * godspeedWieldStacks(input) +
      100 * godspeedWieldStacks(input)
    : 30 * godspeedWieldLevel(input) * godspeedWieldStacks(input)
  : 0;

export const godspeedWieldTotalMotionSpeed = (input: Input) =>
  godspeedWieldIsActive(input) ?
    godspeedWieldLevel(input) * godspeedWieldStacks(input)
  : 0;

export const almightyWieldLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL];

export const godspeedWieldTotalPhysicalResistance = (input: Input) =>
  godspeedWieldIsActive(input) ?
    isUsingMainHAL(input) ?
      -(
        (100 - 3 * godspeedWieldLevel(input)) *
          godspeedWieldStacks(input) +
        45 * godspeedWieldStacks(input) +
        Math.floor(almightyWieldLevel(input) * 0.5) *
          godspeedWieldStacks(input)
      )
    : -((100 - 3 * godspeedWieldLevel(input)) * godspeedWieldStacks(input))
  : 0;

export const godspeedWieldTotalMagicResistance = (input: Input) =>
  godspeedWieldIsActive(input) ?
    isUsingMainHAL(input) ?
      -(
        (100 - 3 * godspeedWieldLevel(input)) *
          godspeedWieldStacks(input) +
        45 * godspeedWieldStacks(input) +
        Math.floor(almightyWieldLevel(input) * 0.5) *
          godspeedWieldStacks(input)
      )
    : -((100 - 3 * godspeedWieldLevel(input)) * godspeedWieldStacks(input))
  : 0;

export const godspeedWieldTotalFlatMaxMP = (input: Input) =>
  godspeedWieldIsActive(input) ? -(100 * godspeedWieldStacks(input)) : 0;

export const godspeedWieldTotalPercentEvasionRecharge = (input: Input) =>
  godspeedWieldIsActive(input) ?
    godspeedWieldLevel(input) * godspeedWieldStacks(input)
  : 0;

export const halberdMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL];

export const halberdMasteryTotalPercentATK = (input: Input) =>
  isUsingMainHAL(input) ?
    halberdMasteryLevel(input) >= 8 ? 3
    : halberdMasteryLevel(input) >= 3 ? 2
    : 1
  : 0;

export const halberdMasteryTotalPercentWeaponATK = (input: Input) =>
  isUsingMainHAL(input) ? halberdMasteryLevel(input) * 3 : 0;

export const quickAuraLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL];

export const quickAuraIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE];

export const quickAuraTotalFlatASPD = (input: Input) =>
  quickAuraIsActive(input) ? quickAuraLevel(input) * 50 : 0;

export const quickAuraTotalPercentASPD = (input: Input): number =>
  quickAuraIsActive(input) ? Math.floor(quickAuraLevel(input) * 2.5) : 0;

// hunter skills

export const hunterBowgunLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL];

export const hunterBowgunTotalBaseATK = (input: Input) =>
  (
    isUsingMainBWG(input) &&
    !(isUsingSubArrow(input) || isNotUsingSubWeapon(input))
  ) ?
    (1 + (Math.floor(hunterBowgunLevel(input) * 1.5) * 5) / 3 / 100) *
    input[ParamId.CHARACTER_MAINWEAPON_ATK]
  : 0;

// magic blade skills
export const conversionLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL];

export const conversionTotalFlatMATK = (input: Input) =>
  (
    isUsingMainTHS(input) ||
    isUsingMainBWG(input) ||
    isUsingMainKN(input) ||
    isUsingMainOHS(input)
  ) ?
    Math.floor(
      (conversionLevel(input) ** 2 / 100) *
        (isUsingMainKN(input) ?
          totalMainWeaponATK(input) * 0.5
        : totalMainWeaponATK(input)),
    )
  : 0;

export const dualBringerLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL];
export const dualBringerIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE];

// refactor this
export const totalNumberOfMagicBladeSkills = (input: Input) =>
  [
    (
      input[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL] > 0 ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL] > 0 ?
      1
    : 0,
    (
      input[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL] >
      0
    ) ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL] > 0 ?
      1
    : 0,
    (
      input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      input[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL] > 0 ?
      1
    : 0,
    (
      input[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL] > 0 ?
      1
    : 0,
    (
      input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL] >
      0
    ) ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL] > 0 ?
      1
    : 0,
    input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL] > 0 ?
      1
    : 0,
  ].reduce(add, 0);

export const totalNegativePercentATK = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_ATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);
// + subWeaponMagicDevicePercentATKModifier(input);

export const totalNegativePercentMATK = (input: Input) =>
  flattenedStats(input)
    .filter((stat) => stat[0] === StatId.PERCENT_MATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const dualBringerTotalSkillModifier = (input: Input) =>
  Math.min(
    100,
    dualBringerLevel(input) * totalNumberOfMagicBladeSkills(input),
  );

export const dualBringerTotalATK = (input: Input) =>
  (
    dualBringerIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.floor(
      Math.max(
        0,
        (totalMATK(input) - totalATK(input)) *
          ((100 - Math.abs(totalNegativePercentATK(input))) / 100) *
          (dualBringerTotalSkillModifier(input) / 100) -
          (totalATK(input) * Math.abs(totalNegativePercentATK(input))) /
            100,
      ),
    )
  : 0;

export const dualBringerTotalMATK = (input: Input) =>
  (
    dualBringerIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.floor(
      Math.max(
        0,
        (totalATK(input) - totalMATK(input)) *
          ((100 - Math.abs(totalNegativePercentMATK(input))) / 100) *
          (dualBringerTotalSkillModifier(input) / 100) -
          (totalMATK(input) * Math.abs(totalNegativePercentMATK(input))) /
            100,
      ),
    )
  : 0;

export const dualBringerTotalDuration = (input: Input) =>
  (
    dualBringerIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.max(10, Math.floor(input[ParamId.CHARACTER_SUBWEAPON_ATK] / 10))
  : 0;

export const dualBringerTotalMagicCriticalDamageConversion = (
  input: Input,
) =>
  (
    dualBringerIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    totalINT(input) > totalSTR(input)
  ) ?
    Math.floor(dualBringerLevel(input) * 2.5)
  : 0;

export const dualBringerTotalMagicCriticalRateConversion = (
  input: Input,
) =>
  (
    dualBringerIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    totalSTR(input) > totalINT(input)
  ) ?
    Math.floor(dualBringerLevel(input) * 2.5)
  : 0;

export const etherFlareLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL];

export const etherFlareInflictedIgniteOnEnemy = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE];

export const etherFlareTotalFlatAMPR = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    etherFlareInflictedIgniteOnEnemy(input)
  ) ?
    15 +
    Math.floor(etherFlareLevel(input) / 6) * 5 +
    Math.floor(etherFlareLevel(input) / 5) * 5
  : 0;

export const magicSkinLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL];

export const magicSkinTotalRefinementReduction = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE && magicSkinLevel(input) > 0
  ) ?
    input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0;

export const magicWarriorMasteryLevel = (input: Input) =>
  input[
    ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL
  ];

export const magicWarriorMasteryTotalPercentATKPenaltyReduction = (
  input: Input,
) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(input) + (isUsingMainOHS(input) ? 5 : 0)
  : 0;

export const magicWarriorMasteryTotalFlatMATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(input) * 2 +
    (magicWarriorMasteryLevel(input) - 5 > 0 ?
      magicWarriorMasteryLevel(input) - 5
    : 0)
  : 0;

export const magicWarriorMasteryTotalFlatCSPD = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(input) * 10
  : 0;

export const magicWarriorMasteryTotalPercentCSPD = (input: Input) =>
  (
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(input) * 1 +
    Math.max(magicWarriorMasteryLevel(input) - 5, 0)
  : 0;

export const resonanceLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL];
export const resonanceIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE];
export const resonanceActiveSet = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET];

export const activeResonanceRegislet = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL] > 0 ?
    "focusResonance"
  : input[ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL] > 0 ?
    "speedResonance"
  : input[ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL] > 0 ?
    "powerResonance"
  : "none";

export const resonanceTotalFlatATK = (input: Input) =>
  activeResonanceRegislet(input) === "powerResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(input) * 2 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2 -
          (resonanceLevel(input) * 2 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2) *
            (powerResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.MATK_AND_ATK
  ) ?
    Math.floor(
      resonanceLevel(input) * 2 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2,
    )
  : 0;

export const resonanceTotalFlatMATK = (input: Input) =>
  activeResonanceRegislet(input) === "powerResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(input) * 2 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2 -
          (resonanceLevel(input) * 2 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2) *
            (powerResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.MATK_AND_ATK
  ) ?
    Math.floor(
      resonanceLevel(input) * 2 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2,
    )
  : 0;

export const resonanceTotalFlatASPD = (input: Input) =>
  activeResonanceRegislet(input) === "speedResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(input) * 25 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50 -
          (resonanceLevel(input) * 25 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50) *
            (speedResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.ASPD_AND_CSPD
  ) ?
    Math.floor(
      resonanceLevel(input) * 25 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50,
    )
  : 0;

export const resonanceTotalFlatCSPD = (input: Input) =>
  activeResonanceRegislet(input) === "speedResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(input) * 25 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50 -
          (resonanceLevel(input) * 25 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50) *
            (speedResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.ASPD_AND_CSPD
  ) ?
    Math.floor(
      resonanceLevel(input) * 25 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50,
    )
  : 0;

export const resonanceTotalFlatAccuracy = (input: Input) =>
  activeResonanceRegislet(input) === "focusResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        35 +
          resonanceLevel(input) * 2 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3 -
          (35 +
            resonanceLevel(input) * 2 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3) *
            (focusResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.ACC_AND_CRIT
  ) ?
    Math.floor(
      35 +
        resonanceLevel(input) * 2 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3,
    )
  : 0;

export const resonanceTotalFlatCriticalRate = (input: Input) =>
  activeResonanceRegislet(input) === "focusResonance" ?
    (
      resonanceIsActive(input) &&
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        10 +
          resonanceLevel(input) * 2 +
          input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3 -
          (10 +
            resonanceLevel(input) * 2 +
            input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3) *
            (focusResonanceTotalReduction(input) / 100),
      )
    : 0
  : (
    resonanceIsActive(input) &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(input) === ResonanceSetId.ACC_AND_CRIT
  ) ?
    Math.floor(
      10 +
        resonanceLevel(input) * 2 +
        input[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3,
    )
  : 0;

export const siphonBarrierLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL];

export const siphonBarrierIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE];

export const siphonBarrierTotalPhysicalResistance = (input: Input) =>
  (
    (input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE) &&
    siphonBarrierIsActive(input)
  ) ?
    siphonBarrierLevel(input) * 9
  : 0;

export const siphonBarrierTotalMagicResistance = (input: Input) =>
  (
    (input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE) &&
    siphonBarrierIsActive(input)
  ) ?
    siphonBarrierLevel(input) * 9
  : 0;

// magic skills

export const magicMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL];

export const magicMasteryTotalPercentMATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicMasteryLevel(input) >= 8 ? 3
    : magicMasteryLevel(input) >= 3 ? 2
    : 1
  : 0;

export const magicMasteryTotalPercentWeaponATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicMasteryLevel(input) * 3
  : 0;

export const qadalLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL];

export const qadalIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE];

export const qadalCharge = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_BURDEN];

export const qadalTimeActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_COMBAT_TIME];

export const qadalTotalLastDamageModifier = (input: Input) =>
  qadalIsActive(input) ?
    qadalCharge(input) > Math.floor(qadalTimeActive(input) / 3) ?
      Math.floor(qadalTimeActive(input) / 3)
    : qadalCharge(input)
  : 0;

// martial skills

export const aggravateLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL];

export const aggravateTotalFlatAMPR = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    Math.floor(aggravateLevel(input) * 0.5)
  : 0;

export const aggravateTotalPercentAccuracy = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    aggravateLevel(input) * 2
  : 0;

export const martialDisciplineLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL];

export const martialDisciplineTotalMartialSkillDamageBonus = (
  input: Input,
) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(input)
  : 0;

export const martialDisciplineTotalPercentASPD = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(input)
  : 0;

export const martialDisciplineTotalFlatASPD = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(input)
  : 0;

export const martialMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL];

export const martialMasteryTotalPercentATK = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialMasteryLevel(input) >= 8 ? 3
    : martialMasteryLevel(input) >= 3 ? 2
    : 1
  : 0;

export const martialMasteryTotalPercentWeaponATK = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialMasteryLevel(input) * 3
  : 0;

// mononofu skills

export const bushidoLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL];

export const bushidoTotalPercentATK = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    bushidoLevel(input) >= 8 ? 3
    : bushidoLevel(input) >= 3 ? 2
    : 1
  : 0;

export const bushidoTotalPercentWeaponATK = (input: Input) =>
  input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    bushidoLevel(input) * 3
  : 0;

export const bushidoTotalFlatMaxHP = (input: Input) =>
  bushidoLevel(input) * 10;

export const bushidoTotalFlatMaxMP = (input: Input) =>
  bushidoLevel(input) * 10;

export const bushidoTotalFlatAccuracy = (input: Input) =>
  bushidoLevel(input);

export const twoHandedLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL];

// TODO MOVE THIS TO THE NINJASKILLS SECTION
//  export const isNinjaSpiritMaxed = (input: Intermediateinput) =>
//   input[ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL] === 10;

export const twoHandedTotalPercentWeaponATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(input) === 10) ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      twoHandedLevel(input)
    : 0
  : input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    twoHandedLevel(input)
  : 0;

export const twoHandedTotalPercentAccuracy = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(input) === 10) ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      twoHandedLevel(input)
    : 0
  : input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    twoHandedLevel(input)
  : 0;

export const twoHandedTotalFlatCriticalRate = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(input) === 10) ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.KATANA
      ) ?
        twoHandedLevel(input)
      : (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.ONE_HANDED_SWORD ||
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.MAGIC_DEVICE
      ) ?
        Math.floor(twoHandedLevel(input) * 0.5)
      : 0
    : 0
  : input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    Math.floor(twoHandedLevel(input) * 0.5)
  : 0;

export const twoHandedTotalStability = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(input) === 10) ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.KATANA
      ) ?
        twoHandedLevel(input)
      : (
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.ONE_HANDED_SWORD ||
        input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.MAGIC_DEVICE
      ) ?
        Math.floor(twoHandedLevel(input) * 0.5)
      : 0
    : 0
  : input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    Math.floor(twoHandedLevel(input) * 0.5)
  : 0;

export const twoHandedTotalATKOnCrit = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA &&
    (input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ||
      (input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(input) === 10))
  ) ?
    totalATK(input) * Math.floor((100 + 5 * twoHandedLevel(input)) / 100)
  : 0;

// ninja skills
export const ninjaSpiritLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL];

export const ninjaSpiritTotalFlatDodge = (input: Input) =>
  ninjaSpiritLevel(input);

// prayer skills

export const prayerLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL];

export const prayerIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE];

export const prayerTotalPercentMATK = (input: Input) =>
  prayerIsActive(input) ?
    (
      input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      prayerLevel(input) + 5
    : prayerLevel(input)
  : 0;

// Shield Skills

export const forceShieldLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL];

export const forceShieldTotalFlatDEF = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(input) * 2
  : 0;

export const forceShieldTotalPercentDEF = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(input)
  : 0;

export const forceShieldTotalFlatMaxHP = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(input) * 50
  : 0;

export const forceShieldTotalPhysicalResistance = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(input)
  : 0;

export const magicalShieldLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL];

export const magicalShieldTotalFlatMDEF = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(input) * 2
  : 0;

export const magicalShieldTotalPercentMDEF = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(input)
  : 0;

export const magicalShieldTotalFlatMaxHP = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(input) * 50
  : 0;
export const magicalShieldTotalMagicResistance = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(input)
  : 0;

export const shieldMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL];

export const shieldMasteryPercentASPDPenaltyReduction = (input: Input) =>
  input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    shieldMasteryLevel(input) * 5
  : 0;

// shot skills

export const longRangeLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL];

export const longRangeTotalSkillDamageModifier = (input: Input) =>
  longRangeLevel(input);

export const samuraiArcheryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL];

export const samuraiArcheryStacks = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS];

export const samuraiArcheryTotalFlatWeaponATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    Math.min(
      Math.floor(
        input[ParamId.CHARACTER_SUBWEAPON_ATK] *
          0.1 *
          samuraiArcheryLevel(input),
      ),
      Math.floor(
        input[ParamId.CHARACTER_MAINWEAPON_ATK] *
          Math.floor(input[ParamId.CHARACTER_MAINWEAPON_STABILITY] / 100) *
          0.1 *
          samuraiArcheryLevel(input),
      ),
    )
  : 0;

export const samuraiArcheryTotalStability = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    Math.floor(input[ParamId.CHARACTER_SUBWEAPON_STABILITY] / 4)
  : 0;
export const samuraiArcheryTotalPercentAccuracy = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    input[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    samuraiArcheryLevel(input) * samuraiArcheryStacks(input)
  : 0;

export const shotMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL];

export const shotMasteryTotalPercentATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW
  ) ?
    shotMasteryLevel(input) >= 8 ? 3
    : shotMasteryLevel(input) >= 3 ? 2
    : 1
  : 0;

export const shotMasteryTotalPercentWeaponATK = (input: Input) =>
  (
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ||
    input[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW
  ) ?
    shotMasteryLevel(input) * 3
  : 0;

// support skills
export const braveAuraLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL];

export const braveAuraIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE];

export const braveAuraTotalPercentWeaponATK = (input: Input) =>
  braveAuraIsActive(input) ? 10 + braveAuraLevel(input) * 2 : 0;

export const braveAuraTotalLastDamageModifier = (input: Input) =>
  braveAuraIsActive(input) ? braveAuraLevel(input) * 2 : 0;

export const highCycleIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE];

export const highCycleLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL];

export const highCycleTotalFlatCSPD = (input: Input) =>
  highCycleIsActive(input) ? 50 + highCycleLevel(input) * 50 : 0;

export const highCycleTotalPercentCSPD = (input: Input) =>
  highCycleIsActive(input) ? highCycleLevel(input) * 25 : 0;

export const highCycleTotalPercentNMPR = (input: Input) =>
  highCycleIsActive(input) ?
    Math.floor(-50.5 - highCycleLevel(input) * 2.5)
  : 0;

export const highCycleTotalPercentAMPR = (input: Input) =>
  highCycleIsActive(input) ?
    Math.floor(-90.5 - highCycleLevel(input) * 1.5)
  : 0;

export const manaRechargeLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL];

export const manaRechargeIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE];

export const manaRechargeTotalLastDamageModifier = (input: Input) =>
  manaRechargeIsActive(input) ? -(50 - manaRechargeLevel(input) * 2.5) : 0;

// survival skills

export const HPBoostLevel = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL];

export const HPBoostTotalPercentMaxHP = (input: Input) =>
  HPBoostLevel(input) * 2;

export const HPBoostTotalFlatMaxHP = (input: Input) =>
  HPBoostLevel(input) * 100;

export const MPBoostLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL];

export const MPBoostTotalFlatMaxMP = (input: Input) =>
  MPBoostLevel(input) * 30;

// Wizard skills

export const castMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL];

export const wizardSkillsLevels = (input: Input) => [
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL],
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL],
];

export const totalWizardSkillsLearned = (input: Input) =>
  wizardSkillsLevels(input)
    .filter((level) => (level > 0 ? 1 : 0))
    .reduce(add, 0);

export const totalWizardSkillsPoints = (input: Input) =>
  wizardSkillsLevels(input).reduce(add, 0);

export const castMasteryTotalPercentCSPD = (input: Input) =>
  (
    (input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(input) > 0
  ) ?
    Math.floor(castMasteryLevel(input) * 1.5) +
    (totalWizardSkillsLearned(input) - 1) *
      Math.floor(castMasteryLevel(input) / 2)
  : 0;

export const castMasteryTotalFlatCSPD = (input: Input) =>
  (
    (input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(input) > 0
  ) ?
    castMasteryLevel(input) * totalWizardSkillsPoints(input)
  : 0;

export const castMasteryTotalPercentATK = (input: Input) =>
  (
    (input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      input[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(input) > 0
  ) ?
    -Math.ceil(50 - 2.5 * castMasteryLevel(input))
  : 0;

export const familiaIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE];

export const familiaLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL];

export const familiaTotalFlatMATK = (input: Input) =>
  familiaIsActive(input) ?
    Math.floor(
      input[ParamId.CHARACTER_LEVEL] / (10 - familiaLevel(input) * 0.6),
    )
  : 0;

export const familiaTotalFlatMaxMP = (input: Input) =>
  familiaIsActive(input) ? 100 + familiaLevel(input) * 10 : 0;

export const familiaTotalAdditionalMagic = (input: Input) =>
  familiaIsActive(input) ? 5 * familiaLevel(input) : 0;

export const overlimitLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL];

export const overlimitIsActive = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE];

export const overlimitTotalElementDamageModifier = (input: Input) =>
  overlimitIsActive(input) ?
    overlimitLevel(input) +
    sorceryGuideTotalElementDamageModifierBonusForOverlimit(input)
  : 0;

export const overlimitTotalFlatCSPD = (input: Input) =>
  overlimitIsActive(input) ?
    -1000 + sorceryGuideTotalCSPDPenaltyReductionForOverlimit(input)
  : 0;

export const sorceryGuideLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL];

export const sorceryGuideTotalCSPDPenaltyReductionForOverlimit = (
  input: Input,
) => sorceryGuideLevel(input) * 50;

export const sorceryGuideTotalElementDamageModifierBonusForOverlimit = (
  input: Input,
) => sorceryGuideLevel(input);

export const totalPercentATKForWizardSkills = (input: Input) =>
  totalPercentATKFromEquipment(input) + totalPercentATKFromSkills(input);

export const totalATKForWizardSkills = (input: Input) =>
  Math.floor(
    total(
      totalBaseATK(input),
      totalPercentATKForWizardSkills(input),
      totalFlatATK(input),
    ) * 0.25,
  );

export const totalMATKForWizardSkills = (input: Input) =>
  Math.floor(totalMATK(input) * 0.75);

export const totalWizardATK = (input: Input) =>
  totalATKForWizardSkills(input) + totalMATKForWizardSkills(input);

// battle skills
export const accuracyUPTotalFlatAccuracy = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL];

export const attackUPLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL];

export const attackUPTotalFlatATK = (input: Input) =>
  Math.floor(
    (input[ParamId.CHARACTER_LEVEL] * (2.5 * attackUPLevel(input))) / 100,
  );

export const criticalUPLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL];

export const criticalUPTotalFlatCriticalRate = (input: Input) =>
  Math.floor(criticalUPLevel(input) / 2);

export const criticalUPTotalPercentCriticalDamage = (input: Input) =>
  Math.floor(criticalUPLevel(input) / 2);

export const defenseMasteryLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL];

export const defenseMasteryTotalFlatDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseMasteryLevel(input)) / 100),
  );

export const defenseMasteryTotalFlatMDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseMasteryLevel(input)) / 100),
  );

export const defenseUPLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL];

export const defenseUPTotalFlatDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * ((2.5 * defenseUPLevel(input)) / 100),
  );

export const defenseUPTotalFlatMDEF = (input: Input) =>
  Math.floor(
    input[ParamId.CHARACTER_LEVEL] * ((2.5 * defenseUPLevel(input)) / 100),
  );
export const dodgeUPTotalFlatDodge = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL];
export const increasedEnergyLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL];

export const increasedEnergyTotalFlatMATK = (input: Input) =>
  (input[ParamId.CHARACTER_LEVEL] * (2.5 * increasedEnergyLevel(input))) /
  100;
export const intimidatingPowerLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL];

export const intimidatingPowerTotalFlatATK = (input: Input) =>
  Math.floor(
    (input[ParamId.CHARACTER_LEVEL] *
      (2.5 * intimidatingPowerLevel(input))) /
      100,
  );

export const magicUPLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL];

export const magicUPTotalFlatMATK = (input: Input) =>
  Math.floor(
    (input[ParamId.CHARACTER_LEVEL] * (2.5 * magicUPLevel(input))) / 100,
  );
export const spellBurstLevel = (input: Input) =>
  input[ParamId.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL];

export const spellBurstTotalMagicCriticalDamageConversion = (
  input: Input,
) => spellBurstLevel(input) * 2.5;

export const spellBurstTotalMagicCriticalRateConversion = (input: Input) =>
  spellBurstLevel(input) * 2.5;
// regislets

export const magicAttackBoostTotalFlatMATK = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL];

export const physicalAttackBoostTotalFlatATK = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL];

export const maxMPBoostTotalFlatMaxMP = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_MAXMPBOOST_LEVEL];

export const maxHPBoostTotalFlatMaxMP = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL] * 10;

export const magicSpeedBoostTotalFlatCSPD = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL];

export const attackSpeedBoostTotalFlatCSPD = (input: Input) =>
  input[ParamId.CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL];

export const focusResonanceTotalReduction = (input: Input) =>
  95 - 5 * input[ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL];

export const speedResonanceTotalReduction = (input: Input) =>
  95 - 5 * input[ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL];

export const powerResonanceTotalReduction = (input: Input) =>
  95 - 5 * input[ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL];

//  interface input {

//   // FIGURE OUT WHAT KIND OF BULLSHEIIETHETT YOU WANNA DO HERE
// }

// features and improvements
// - library api
// - eliminate string data in the calculator (use enums instead)

type Enumerate<N extends number, Acc extends number[] = []> =
  Acc["length"] extends N ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>;

type NumRange<F extends number, T extends number> = Exclude<
  Enumerate<T>,
  Enumerate<F>
>;

//

export type OneHandedSword = "one-handed-sword";

export type TwoHandedSword = "two-handed-sword";

export type Bow = "bow";

export type Bowgun = "bowgun";

export type Staff = "staff";

export type MagicDevice = "magic-device";

export type Halberd = "halberd";

export type Katana = "katana";

export type Knuckle = "knuckle";

export type BareHand = "bare-hand";

export type MainWeaponType =
  | OneHandedSword
  | TwoHandedSword
  | Bow
  | Bowgun
  | Staff
  | MagicDevice
  | Halberd
  | Katana
  | Knuckle
  | BareHand;

export type NinjutsuScroll = "ninjutsu-scroll";

export type Arrow = "arrow";

export type Shield = "shield";

export type Dagger = "dagger";

export type None = "none";

export type SubWeaponType =
  | OneHandedSword
  | Katana
  | Knuckle
  | MagicDevice
  | NinjutsuScroll
  | Arrow
  | Shield
  | Dagger
  | None;

export type Light = "light";

export type Heavy = "heavy";

export type Normal = "normal";

export type ArmorType = Light | Heavy | Normal | None;

export type PersonalStatName = "LUK" | "MTL" | "TEC" | "CRT" | "none";

export type ResonanceSet = "ATK/MATK" | "ACC/CRIT" | "ASPD/CSPD";

interface Properties {
  level: number;
  STR: number;
  INT: number;
  DEX: number;
  VIT: number;
  AGI: number;
  personalStat: PersonalStatName;
  personalStatValue: number;
}

interface Equipments {
  mainweapon: {
    type: MainWeaponType;
    ATK: number;
    refinement: NumRange<1, 16>;
    stability: NumRange<0, 101>;

    stats: StatMapBuilder; // change this later with type callable | xtal name
    crystal1: StatMapBuilder;
    crystal2: StatMapBuilder;
  };

  subweapon: {
    type: SubWeaponType;

    ATK: number;
    DEF: number;
    refinement: NumRange<1, 16>;
    stability: NumRange<0, 101>;
    stats: StatMapBuilder;
    crystal1: StatMapBuilder;
    crystal2: StatMapBuilder;
    scrollCastTimeReduction: number;
    scrollMPReduction: number;
  };

  armor: {
    DEF: number;
    type: ArmorType;
    refinement: NumRange<1, 16>;
    stats: StatMapBuilder;
    crystal1: StatMapBuilder;
    crystal2: StatMapBuilder;
  };

  additionalGear: {
    DEF: number;
    refinement: NumRange<1, 16>;
    stats: StatMapBuilder;
    crystal1: StatMapBuilder;
    crystal2: StatMapBuilder;
  };

  specialGear: {
    DEF: number;
    refinement: NumRange<1, 16>;
    stats: StatMapBuilder;
    crystal1: StatMapBuilder;
    crystal2: StatMapBuilder;
  };
}

interface Config {
  properties: Partial<Properties>;

  equipments: {
    mainweapon: {
      type: MainWeaponType;
      ATK: number;
      refinement: NumRange<1, 16>;
      stability: NumRange<0, 101>;

      stats: StatMapBuilder; // change this later with type callable | xtal name
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    subweapon: {
      type: SubWeaponType;

      ATK: number;
      DEF: number;
      refinement: NumRange<1, 16>;
      stability: NumRange<0, 101>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
      scrollCastTimeReduction: number;
      scrollMPReduction: number;
    };

    armor: {
      DEF: number;
      type: ArmorType;
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    additionalGear: {
      DEF: number;
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    specialGear: {
      DEF: number;
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };
  };

  skillTrees: {
    bladeSkills: {
      hardhit: { level: number };
      astute: { level: number };
      triggerslash: { level: number; isActive: boolean };

      rampage: { level: number; isActive: boolean };

      meteorbreaker: { level: number };
      shutout: { level: number };
      lunarslash: { level: number };
      sonicblade: { level: number };
      spiralair: { level: number };
      swordtempest: { level: number };
      busterblade: { level: number; isActive: boolean };

      aurablade: { level: number };
      swordmastery: { level: number };
      quickslash: { level: number };
      swordtechniques: { level: number };
      warcry: { level: number; isActive: boolean };

      berserk: { level: number; isActive: boolean };

      gladiate: { level: number };
      swiftattack: { level: number };
    };

    shotSkills: {
      powershot: { level: number };
      bullseye: { level: number };
      arrowrain: { level: number };
      snipe: { level: number };
      crossfire: { level: number };
      vanquisher: { level: number };
      twinstorm: {
        level: number;
        isActive: boolean;
        onCooldown: boolean;
      };

      retrogradeshot: { level: number };
      moebashot: { level: number };
      paralysisshot: { level: number };
      smokedust: { level: number };
      armbreak: { level: number };
      parabolacannon: { level: number };
      shotmastery: { level: number };
      samuraiarchery: { level: number; stacks: number };
      sneakattack: { level: number };
      longrange: { level: number };
      quickdraw: { level: number };
      decoyshot: { level: number };
      fatalshot: { level: number };
    };

    magicSkills: {
      magicarrows: { level: number };
      magicjavelin: { level: number };
      magiclances: { level: number };
      magicimpact: { level: number };
      magicfinale: { level: number };
      chronosshift: { level: number };
      magicwall: { level: number };
      magicblast: { level: number };
      magicstorm: { level: number };
      magicburst: { level: number };
      magiccannon: { level: number };
      magiccrash: { level: number };
      magicmastery: { level: number };
      magicknife: { level: number };
      qadal: {
        level: number;
        burden: number;
        combatTime: number;
        isActive: boolean;
      };
      mpcharge: { level: number };
      chaincast: { level: number; isActive: boolean; stacks: number };
      powerwave: { level: number };
      maximizer: { level: number };
      rapidcharge: {
        level: number;
        isActive: boolean;
        amountMPRecoveredFromMaximizer: number;
      };
      enchantedbarriers: { level: number };
      magicguardianbeam: { level: number };
    };

    survivalSkills: {
      playdead: { level: number };
      expgainup: { level: number };
      droprateup: { level: number };
      saferest: { level: number };
      hpboost: { level: number };
      fightershigh: { level: number };
      shortrest: { level: number };
      mpboost: { level: number };
      soberanalysis: { level: number };
    };

    supportSkills: {
      firstaid: { level: number };
      miniheal: { level: number };
      recovery: { level: number };
      sanctuary: { level: number };
      heal: { level: number };
      liferecovery: { level: number };
      braveaura: { level: number; isActive: boolean };
      highcycle: { level: number; isActive: boolean };
      quickmotion: { level: number; isActive: boolean };
      manarecharge: { level: number; isActive: boolean };
      magicbarrier: { level: number; isActive: boolean };
      immunity: { level: number; isActive: boolean };
      fastreaction: { level: number; isActive: boolean };
    };

    battleSkills: {
      magicup: { level: number };
      concentrate: { level: number };
      attackup: { level: number };
      whack: { level: number };
      defenseup: { level: number };
      dodgeup: { level: number };
      desperateresist: { level: number };
      criticalup: { level: number };
      accuracyup: { level: number };
      increasedenergy: { level: number };
      intimidatingpower: { level: number };
      defensemastery: { level: number };
      spellburst: { level: number };
      secretchaseattack: { level: number };
      supergrip: { level: number };
    };

    mononofuSkills: {
      issen: { level: number };
      pulseblade: { level: number };
      triplethrust: { level: number; isActive: boolean };

      hassohappa: { level: number };
      tenryuransei: { level: number };
      kasumisetsugetsuka: { level: number };
      garyoutensei: { level: number };
      shadowlessslash: { level: number };
      pommelstrike: { level: number };
      magadachi: { level: number };
      zanteisettetsu: { level: number };
      bushido: { level: number };
      shukuchi: { level: number; isActive: boolean };

      nukiuchisennosen: { level: number };
      twohanded: { level: number };
      meikyoushisui: { level: number; isActive: boolean };
      kairikiranshin: { level: number; isActive: boolean };

      dauntless: { level: number; stacks: number };
      dauntless_stacks: number;
      bouncingblade: { level: number; isActive: boolean };
    };

    dualSwordSkills: {
      dualswordmastery: { level: number };
      twinslash: { level: number };
      spinningslash: { level: number };
      phantomslash: { level: number };
      aerialcut: { level: number };
      crossparry: { level: number; isActive: boolean; isParried: boolean };
      chargingslash: { level: number };
      shadowstep: { level: number; isActive: boolean };

      shiningcross: { level: number };
      lunarmisfortune: { level: number };
      twinbusterblade: { level: number; isActive: boolean };

      reflex: { level: number };
      flashblast: { level: number; isActive: boolean };

      stormreaper: { level: number };
      dualswordcontrol: { level: number };
      godspeed: { level: number };
      saberaura: { level: number };
      crescentsaber: { level: number };
    };

    magicBladeSkills: {
      magicwarriormastery: { level: number };
      conversion: { level: number; isActive: boolean };

      resonance: { level: number; isActive: boolean; set: ResonanceSet };

      enchantedspell: { level: number };
      dualbringer: { level: number; isActive: boolean };

      etherflare: { level: number; isActive: boolean };

      elementslash: { level: number };
      enchantsword: { level: number };
      enchantedburst: { level: number };
      unionsword: { level: number };
      siphonbarrier: { level: number; isActive: boolean };

      teleport: { level: number };
      siphonrecall: { level: number };
      floatdash: { level: number };
      magicskin: { level: number };
    };

    shieldSkills: {
      shieldmastery: { level: number };
      shieldbash: { level: number };
      shieldcannon: { level: number };
      guardstrike: { level: number };
      forceshield: { level: number };
      magicalshield: { level: number };
      shielduppercut: { level: number };
      dualshields: { level: number };
      shieldrepair: { level: number };
      belagerung: { level: number };
      protection: { level: number; isActive: boolean };
      aegis: { level: number; isActive: boolean };
      guardian: { level: number };
    };

    guardSkills: {
      heavyarmormastery: { level: number };
      advancedguard: { level: number };
      physicalguard: { level: number };
      lightarmormastery: { level: number };
      advancedevasion: { level: number };
      mirageevasion: { level: number };
    };

    halberdSkills: {
      flashstab: { level: number };
      cannonspear: { level: number };
      dragontail: { level: number };
      diveimpact: { level: number };
      dragontooth: { level: number };
      draconiccharge: { level: number };
      deadlyspear: { level: number };
      punishray: { level: number };
      strikestab: { level: number };
      chronosdivine: { level: number };
      infinitedimension: { level: number };
      halberdmastery: { level: number };
      criticalspear: { level: number };
      tornadolance: { level: number };
      quickaura: { level: number; isActive: boolean };
      warcryofstruggle: { level: number };
      godspeedwield: { level: number; isActive: boolean; stacks: number };
      almightywield: { level: number };
      busterlance: { level: number };
    };

    martialSkills: {
      smash: { level: number };
      bash: { level: number };
      shellbreak: { level: number };
      heavysmash: { level: number };
      chariot: { level: number };
      abstractarms: { level: number };
      sonicwave: { level: number };
      earthbind: { level: number };
      triplekick: { level: number };
      rush: { level: number; isActive: boolean };
      asuraaura: { level: number; isActive: boolean };
      flashblink: { level: number };
      martialmastery: { level: number };
      martialdiscipline: { level: number };
      chakra: { level: number; isActive: boolean };
      energycontrol: { level: number; isActive: boolean };
      aggravate: { level: number };
      strongchaseattack: { level: number };
      slide: { level: number };
    };

    bareHandSkills: {
      unarmedmastery: { level: number };
      qicharge: { level: number };
      lionrage: { level: number };
      ultimalionrage: { level: number };
      ravingstorm: { level: number };
      ultimaravingstorm: { level: number };
      internalelixir: { level: number };
      clashofenmity: { level: number };
      miraclecomeback: { level: number };
      ultimaqicharge: { level: number };
      hiddentalent: { level: number };
      earthshaker: { level: number; isActive: boolean };
    };

    hunterSkills: {
      kick: { level: number };
      sunrisearrow: { level: number };
      magicarrow: { level: number; isActive: boolean };
      satellitearrow: { level: number };
      sleeptrap: { level: number };
      beartrap: { level: number };
      landmine: { level: number };
      darktrap: { level: number };
      homingshot: { level: number };
      detection: { level: number; isActive: boolean };

      cyclonearrow: { level: number };
      verticalair: { level: number };
      hunterbowgun: { level: number };
      multiplehunt: { level: number; isActive: boolean }; // should be able to know which buff is active using subweapon info
    };

    ninjaSkills: {
      ninjutsu: { level: number };
      ninjaspirit: { level: number };
      ninjutsudrilli: { level: number };
      ninjutsudrillii: { level: number };
    };

    wizardSkills: {
      familia: { level: number; isActive: boolean };

      lightning: { level: number };
      blizzard: { level: number };
      meteorstrike: { level: number };
      imperialray: { level: number };
      manacrystal: { level: number };
      stonebarrier: { level: number };
      advancedfamilia: { level: number; isActive: boolean };
      castmastery: { level: number };
      crystallaser: { level: number };
      overlimit: { level: number; isActive: boolean };
      sorceryguide: { level: number };
    };

    priestSkills: {
      bless: { level: number };
      gloria: { level: number };
      enhancedbless: { level: number };
      royalheal: { level: number };
      holyfist: { level: number };
      holylight: { level: number };
      etherbarrier: { level: number; isActive: boolean };

      prayer: { level: number; isActive: boolean };

      staffthrust: { level: number };
      exorcism: { level: number };
      holybook: { level: number; isActive: boolean };

      nemesis: { level: number };
    };
  };

  consumables: Stat[];
  foodBuffs: Stat[];

  ailments: {
    weaken: boolean;
    flinch: boolean;
    tumble: boolean;
    stun: boolean;
    knockback: boolean;
    poison: boolean;
    paralysis: boolean;
    blindness: boolean;
    ignition: boolean;
    freeze: boolean;
    armorbreak: boolean;
    slow: boolean;
    stop: boolean;
    fear: boolean;
    dizzy: boolean;
    lethargy: boolean;
    silence: boolean;
    bleed: boolean;
    fatigue: boolean;
    dazzled: boolean;
  };

  regislets: {
    zerostance: number;
    maxhpboost: number;
    maxmpboost: number;
    magicattackboost: number;
    physicalattackboost: number;
    magicdefenseboost: number;
    physicaldefenseboost: number;
    attackspeedboost: number;
    magicspeedboost: number;
    dodgeboost: number;
    accuracyboost: number;
    focusresonance: number;
    speedresonance: number;
    powerresonance: number;
  };
}

export const getPersonalStatIdFromPersonalStatName = (
  name: PersonalStatName,
) =>
  name === "CRT" ? PersonalStatId.CRT
  : name === "LUK" ? PersonalStatId.LUK
  : name === "MTL" ? PersonalStatId.MTL
  : name === "TEC" ? PersonalStatId.TEC
  : PersonalStatId.NONE;

export const getMainWeaponTypeIdFromMainWeaponType = (
  mainWeapon: MainWeaponType,
) =>
  mainWeapon === "two-handed-sword" ? MainWeaponTypeId.TWO_HANDED_SWORD
  : mainWeapon === "bow" ? MainWeaponTypeId.BOW
  : mainWeapon === "bowgun" ? MainWeaponTypeId.BOWGUN
  : mainWeapon === "halberd" ? MainWeaponTypeId.HALBERD
  : mainWeapon === "katana" ? MainWeaponTypeId.KATANA
  : mainWeapon === "knuckle" ? MainWeaponTypeId.KNUCKLES
  : mainWeapon === "magic-device" ? MainWeaponTypeId.MAGIC_DEVICE
  : mainWeapon === "one-handed-sword" ? MainWeaponTypeId.ONE_HANDED_SWORD
  : mainWeapon === "staff" ? MainWeaponTypeId.STAFF
  : MainWeaponTypeId.BARE_HAND;

export const getSubWeaponTypeIdFromSubWeaponType = (
  subWeapon: SubWeaponType,
) =>
  subWeapon === "arrow" ? SubWeaponTypeId.ARROW
  : subWeapon === "dagger" ? SubWeaponTypeId.DAGGER
  : subWeapon === "katana" ? SubWeaponTypeId.KATANA
  : subWeapon === "knuckle" ? SubWeaponTypeId.KNUCKLES
  : subWeapon === "magic-device" ? SubWeaponTypeId.MAGIC_DEVICE
  : subWeapon === "ninjutsu-scroll" ? SubWeaponTypeId.NINJUTSU_SCROLL
  : subWeapon === "one-handed-sword" ? SubWeaponTypeId.ONE_HANDED_SWORD
  : subWeapon === "shield" ? SubWeaponTypeId.SHIELD
  : SubWeaponTypeId.NONE;

export const getArmorTypeIdFromArmorType = (armorType: ArmorType) =>
  armorType === "heavy" ? ArmorTypeId.HEAVY
  : armorType === "light" ? ArmorTypeId.LIGHT
  : armorType === "normal" ? ArmorTypeId.NORMAL
  : ArmorTypeId.NONE;

const defaultStatMapBuilder: StatMapBuilder = (_: Input) => [];

export const getResonanceSetIdFromResonanceSet = (
  resonanceSet: ResonanceSet,
) =>
  resonanceSet === "ACC/CRIT" ? ResonanceSetId.ACC_AND_CRIT
  : resonanceSet === "ASPD/CSPD" ? ResonanceSetId.ASPD_AND_CSPD
  : ResonanceSetId.MATK_AND_ATK;

export const createInput = (config: Partial<Config>): Input => ({
  [ParamId.CHARACTER_LEVEL]: config.properties?.level || 1,

  [ParamId.CHARACTER_BASE_STR]: config.properties?.STR || 1,
  [ParamId.CHARACTER_BASE_INT]: config.properties?.INT || 1,
  [ParamId.CHARACTER_BASE_DEX]: config.properties?.DEX || 1,
  [ParamId.CHARACTER_BASE_VIT]: config.properties?.VIT || 1,
  [ParamId.CHARACTER_BASE_AGI]: config.properties?.AGI || 1,
  [ParamId.CHARACTER_PERSONAL_STAT_ID]:
    getPersonalStatIdFromPersonalStatName(
      config.properties?.personalStat || "none",
    ),
  [ParamId.CHARACTER_PERSONAL_STAT_VALUE]:
    config.properties?.personalStatValue || 0,

  [ParamId.CHARACTER_MAINWEAPON_TYPE]:
    getMainWeaponTypeIdFromMainWeaponType(
      config.equipments?.mainweapon?.type || "bare-hand",
    ),
  [ParamId.CHARACTER_MAINWEAPON_ATK]:
    config.equipments?.mainweapon?.ATK || 0,
  [ParamId.CHARACTER_MAINWEAPON_REFINEMENT]:
    config.equipments?.mainweapon?.refinement || 0,
  [ParamId.CHARACTER_MAINWEAPON_STABILITY]:
    config.equipments?.mainweapon?.stability || 0,
  [ParamId.CHARACTER_MAINWEAPON_STATMAP]:
    config.equipments?.mainweapon?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP]:
    config.equipments?.mainweapon?.crystal1 || defaultStatMapBuilder,
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP]:
    config.equipments?.mainweapon?.crystal2 || defaultStatMapBuilder,

  [ParamId.CHARACTER_SUBWEAPON_TYPE]: getSubWeaponTypeIdFromSubWeaponType(
    config.equipments?.subweapon?.type || "none",
  ),
  [ParamId.CHARACTER_SUBWEAPON_ATK]:
    config.equipments?.subweapon?.ATK || 0,
  [ParamId.CHARACTER_SUBWEAPON_DEF]:
    config.equipments?.subweapon?.DEF || 0,
  [ParamId.CHARACTER_SUBWEAPON_REFINEMENT]:
    config.equipments?.subweapon?.refinement || 0,
  [ParamId.CHARACTER_SUBWEAPON_STABILITY]:
    config.equipments?.subweapon?.stability || 0,
  [ParamId.CHARACTER_SUBWEAPON_STATMAP]:
    config.equipments?.subweapon?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP]:
    config.equipments?.subweapon?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP]:
    config.equipments?.subweapon?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION]:
    config.equipments?.subweapon?.scrollCastTimeReduction || 0,
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION]:
    config.equipments?.subweapon?.scrollMPReduction || 0,

  // continue here

  [ParamId.CHARACTER_ARMOR_DEF]: config.equipments?.armor?.DEF || 0,
  [ParamId.CHARACTER_ARMOR_REFINEMENT]:
    config.equipments?.armor?.refinement || 0,
  [ParamId.CHARACTER_ARMOR_TYPE]: getArmorTypeIdFromArmorType(
    config.equipments?.armor?.type || "none",
  ),
  [ParamId.CHARACTER_ARMOR_STATMAP]:
    config.equipments?.armor?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_ARMOR_CRYSTAL1_STATMAP]:
    config.equipments?.armor?.crystal1 || defaultStatMapBuilder,
  [ParamId.CHARACTER_ARMOR_CRYSTAL2_STATMAP]:
    config.equipments?.armor?.crystal2 || defaultStatMapBuilder,

  [ParamId.CHARACTER_ADDITIONAL_GEAR_DEF]:
    config.equipments?.additionalGear?.DEF || 0,
  [ParamId.CHARACTER_ADDITIONAL_GEAR_REFINEMENT]:
    config.equipments?.additionalGear?.refinement || 0,
  [ParamId.CHARACTER_ADDITIONAL_GEAR_STATMAP]:
    config.equipments?.additionalGear?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP]:
    config.equipments?.additionalGear?.crystal1 || defaultStatMapBuilder,
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP]:
    config.equipments?.additionalGear?.crystal2 || defaultStatMapBuilder,

  [ParamId.CHARACTER_SPECIAL_GEAR_DEF]:
    config.equipments?.specialGear?.DEF || 0,
  [ParamId.CHARACTER_SPECIAL_GEAR_STATMAP]:
    config.equipments?.specialGear?.stats || defaultStatMapBuilder,
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP]:
    config.equipments?.specialGear?.crystal1 || defaultStatMapBuilder,
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP]:
    config.equipments?.specialGear?.crystal2 || defaultStatMapBuilder,

  [ParamId.CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL]:
    config.skillTrees?.bladeSkills?.hardhit?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL]:
    config.skillTrees?.bladeSkills?.astute?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL]:
    config.skillTrees?.bladeSkills?.triggerslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE]:
    config.skillTrees?.bladeSkills?.triggerslash?.isActive || false,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL]:
    config.skillTrees?.bladeSkills?.rampage?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE]:
    config.skillTrees?.bladeSkills?.rampage?.isActive || false,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL]:
    config.skillTrees?.bladeSkills?.meteorbreaker?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL]:
    config.skillTrees?.bladeSkills?.shutout?.level || 0,

  [ParamId.CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL]:
    config.skillTrees?.bladeSkills?.lunarslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL]:
    config.skillTrees?.bladeSkills?.sonicblade?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL]:
    config.skillTrees?.bladeSkills?.spiralair?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL]:
    config.skillTrees?.bladeSkills?.swordtempest?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL]:
    config.skillTrees?.bladeSkills?.busterblade?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE]:
    config.skillTrees?.bladeSkills?.busterblade?.isActive || false,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL]:
    config.skillTrees?.bladeSkills?.aurablade?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL]:
    config.skillTrees?.bladeSkills?.swordmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL]:
    config.skillTrees?.bladeSkills?.quickslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL]:
    config.skillTrees?.bladeSkills?.swordtechniques?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL]:
    config.skillTrees?.bladeSkills?.warcry?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE]:
    config.skillTrees?.bladeSkills?.warcry?.isActive || false,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL]:
    config.skillTrees?.bladeSkills?.berserk?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE]:
    config.skillTrees?.bladeSkills?.berserk?.isActive || false,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL]:
    config.skillTrees?.bladeSkills?.gladiate?.level || 0,
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL]:
    config.skillTrees?.bladeSkills?.swiftattack?.level || 0,

  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL]:
    config.skillTrees?.shotSkills?.powershot?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL]:
    config.skillTrees?.shotSkills?.bullseye?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL]:
    config.skillTrees?.shotSkills?.arrowrain?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL]:
    config.skillTrees?.shotSkills?.snipe?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL]:
    config.skillTrees?.shotSkills?.crossfire?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL]:
    config.skillTrees?.shotSkills?.vanquisher?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL]:
    config.skillTrees?.shotSkills?.twinstorm?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE]:
    config.skillTrees?.shotSkills?.twinstorm?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN]:
    config.skillTrees?.shotSkills?.twinstorm?.onCooldown || false,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL]:
    config.skillTrees?.shotSkills?.retrogradeshot?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL]:
    config.skillTrees?.shotSkills?.moebashot?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL]:
    config.skillTrees?.shotSkills?.paralysisshot?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL]:
    config.skillTrees?.shotSkills?.smokedust?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL]:
    config.skillTrees?.shotSkills?.armbreak?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL]:
    config.skillTrees?.shotSkills?.parabolacannon?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL]:
    config.skillTrees?.shotSkills?.shotmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL]:
    config.skillTrees?.shotSkills?.samuraiarchery?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS]:
    config.skillTrees?.shotSkills?.samuraiarchery?.stacks || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL]:
    config.skillTrees?.shotSkills?.sneakattack?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL]:
    config.skillTrees?.shotSkills?.longrange?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL]:
    config.skillTrees?.shotSkills?.quickdraw?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL]:
    config.skillTrees?.shotSkills?.decoyshot?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL]:
    config.skillTrees?.shotSkills?.fatalshot?.level || 0,

  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL]:
    config.skillTrees?.magicSkills?.magicarrows?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL]:
    config.skillTrees?.magicSkills?.magicjavelin?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL]:
    config.skillTrees?.magicSkills?.magiclances?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL]:
    config.skillTrees?.magicSkills?.magicimpact?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL]:
    config.skillTrees?.magicSkills?.magicfinale?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL]:
    config.skillTrees?.magicSkills?.chronosshift?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL]:
    config.skillTrees?.magicSkills?.magicwall?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL]:
    config.skillTrees?.magicSkills?.magicblast?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL]:
    config.skillTrees?.magicSkills?.magicstorm?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL]:
    config.skillTrees?.magicSkills?.magicburst?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL]:
    config.skillTrees?.magicSkills?.magiccannon?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL]:
    config.skillTrees?.magicSkills?.magiccrash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL]:
    config.skillTrees?.magicSkills?.magicmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL]:
    config.skillTrees?.magicSkills?.magicknife?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL]:
    config.skillTrees?.magicSkills?.qadal?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_BURDEN]:
    config.skillTrees?.magicSkills?.qadal?.burden || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE]:
    config.skillTrees?.magicSkills?.qadal?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_COMBAT_TIME]:
    config.skillTrees?.magicSkills?.qadal?.combatTime || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL]:
    config.skillTrees?.magicSkills?.mpcharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL]:
    config.skillTrees?.magicSkills?.chaincast?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE]:
    config.skillTrees?.magicSkills?.chaincast?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS]:
    config.skillTrees?.magicSkills?.chaincast?.stacks || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL]:
    config.skillTrees?.magicSkills?.powerwave?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL]:
    config.skillTrees?.magicSkills?.maximizer?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL]:
    config.skillTrees?.magicSkills?.rapidcharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE]:
    config.skillTrees?.magicSkills?.rapidcharge?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER]:
    config.skillTrees?.magicSkills?.rapidcharge
      ?.amountMPRecoveredFromMaximizer || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL]:
    config.skillTrees?.magicSkills?.enchantedbarriers?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL]:
    config.skillTrees?.magicSkills?.magicguardianbeam?.level || 0,

  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL]:
    config.skillTrees?.survivalSkills?.playdead?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL]:
    config.skillTrees?.survivalSkills?.expgainup?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL]:
    config.skillTrees?.survivalSkills?.droprateup?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL]:
    config.skillTrees?.survivalSkills?.saferest?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL]:
    config.skillTrees?.survivalSkills?.hpboost?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL]:
    config.skillTrees?.survivalSkills?.fightershigh?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL]:
    config.skillTrees?.survivalSkills?.shortrest?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL]:
    config.skillTrees?.survivalSkills?.mpboost?.level || 0,
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL]:
    config.skillTrees?.survivalSkills?.soberanalysis?.level || 0,

  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL]:
    config.skillTrees?.supportSkills?.firstaid?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL]:
    config.skillTrees?.supportSkills?.miniheal?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL]:
    config.skillTrees?.supportSkills?.recovery?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL]:
    config.skillTrees?.supportSkills?.sanctuary?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL]:
    config.skillTrees?.supportSkills?.heal?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL]:
    config.skillTrees?.supportSkills?.liferecovery?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL]:
    config.skillTrees?.supportSkills?.braveaura?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE]:
    config.skillTrees?.supportSkills?.braveaura?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL]:
    config.skillTrees?.supportSkills?.highcycle?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE]:
    config.skillTrees?.supportSkills?.highcycle?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL]:
    config.skillTrees?.supportSkills?.quickmotion?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE]:
    config.skillTrees?.supportSkills?.quickmotion?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL]:
    config.skillTrees?.supportSkills?.manarecharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE]:
    config.skillTrees?.supportSkills?.manarecharge?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL]:
    config.skillTrees?.supportSkills?.magicbarrier?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE]:
    config.skillTrees?.supportSkills?.magicbarrier?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL]:
    config.skillTrees?.supportSkills?.immunity?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE]:
    config.skillTrees?.supportSkills?.immunity?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL]:
    config.skillTrees?.supportSkills?.fastreaction?.level || 0,
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE]:
    config.skillTrees?.supportSkills?.fastreaction?.isActive || false,

  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL]:
    config.skillTrees?.battleSkills?.magicup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL]:
    config.skillTrees?.battleSkills?.concentrate?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL]:
    config.skillTrees?.battleSkills?.attackup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL]:
    config.skillTrees?.battleSkills?.whack?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL]:
    config.skillTrees?.battleSkills?.defenseup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL]:
    config.skillTrees?.battleSkills?.dodgeup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL]:
    config.skillTrees?.battleSkills?.desperateresist?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL]:
    config.skillTrees?.battleSkills?.criticalup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL]:
    config.skillTrees?.battleSkills?.accuracyup?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL]:
    config.skillTrees?.battleSkills?.increasedenergy?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL]:
    config.skillTrees?.battleSkills?.intimidatingpower?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL]:
    config.skillTrees?.battleSkills?.defensemastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL]:
    config.skillTrees?.battleSkills?.spellburst?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL]:
    config.skillTrees?.battleSkills?.secretchaseattack?.level || 0,
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL]:
    config.skillTrees?.battleSkills?.supergrip?.level || 0,

  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL]:
    config.skillTrees?.mononofuSkills?.issen?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL]:
    config.skillTrees?.mononofuSkills?.pulseblade?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL]:
    config.skillTrees?.mononofuSkills?.triplethrust?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE]:
    config.skillTrees?.mononofuSkills?.triplethrust?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL]:
    config.skillTrees?.mononofuSkills?.hassohappa?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL]:
    config.skillTrees?.mononofuSkills?.tenryuransei?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL]:
    config.skillTrees?.mononofuSkills?.kasumisetsugetsuka?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL]:
    config.skillTrees?.mononofuSkills?.garyoutensei?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL]:
    config.skillTrees?.mononofuSkills?.shadowlessslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL]:
    config.skillTrees?.mononofuSkills?.pommelstrike?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL]:
    config.skillTrees?.mononofuSkills?.magadachi?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL]:
    config.skillTrees?.mononofuSkills?.zanteisettetsu?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL]:
    config.skillTrees?.mononofuSkills?.bushido?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL]:
    config.skillTrees?.mononofuSkills?.shukuchi?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE]:
    config.skillTrees?.mononofuSkills?.shukuchi?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL]:
    config.skillTrees?.mononofuSkills?.nukiuchisennosen?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL]:
    config.skillTrees?.mononofuSkills?.twohanded?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL]:
    config.skillTrees?.mononofuSkills?.meikyoushisui?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE]:
    config.skillTrees?.mononofuSkills?.meikyoushisui?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL]:
    config.skillTrees?.mononofuSkills?.kairikiranshin?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE]:
    config.skillTrees?.mononofuSkills?.kairikiranshin?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL]:
    config.skillTrees?.mononofuSkills?.dauntless?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS]:
    config.skillTrees?.mononofuSkills?.dauntless?.stacks || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL]:
    config.skillTrees?.mononofuSkills?.bouncingblade?.level || 0,
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE]:
    config.skillTrees?.mononofuSkills?.bouncingblade?.isActive || false,

  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL]:
    config.skillTrees?.dualSwordSkills?.dualswordmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL]:
    config.skillTrees?.dualSwordSkills?.twinslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL]:
    config.skillTrees?.dualSwordSkills?.spinningslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL]:
    config.skillTrees?.dualSwordSkills?.phantomslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL]:
    config.skillTrees?.dualSwordSkills?.aerialcut?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL]:
    config.skillTrees?.dualSwordSkills?.crossparry?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE]:
    config.skillTrees?.dualSwordSkills?.crossparry?.isActive || false,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED]:
    config.skillTrees?.dualSwordSkills?.crossparry?.isParried || false,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL]:
    config.skillTrees?.dualSwordSkills?.chargingslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL]:
    config.skillTrees?.dualSwordSkills?.shadowstep?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE]:
    config.skillTrees?.dualSwordSkills?.shadowstep?.isActive || false,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL]:
    config.skillTrees?.dualSwordSkills?.shiningcross?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL]:
    config.skillTrees?.dualSwordSkills?.lunarmisfortune?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL]:
    config.skillTrees?.dualSwordSkills?.twinbusterblade?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE]:
    config.skillTrees?.dualSwordSkills?.twinbusterblade?.isActive || false,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL]:
    config.skillTrees?.dualSwordSkills?.reflex?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL]:
    config.skillTrees?.dualSwordSkills?.flashblast?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE]:
    config.skillTrees?.dualSwordSkills?.flashblast?.isActive || false,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL]:
    config.skillTrees?.dualSwordSkills?.stormreaper?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL]:
    config.skillTrees?.dualSwordSkills?.dualswordcontrol?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL]:
    config.skillTrees?.dualSwordSkills?.godspeed?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL]:
    config.skillTrees?.dualSwordSkills?.saberaura?.level || 0,
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL]:
    config.skillTrees?.dualSwordSkills?.crescentsaber?.level || 0,

  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL]:
    config.skillTrees?.magicBladeSkills?.magicwarriormastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL]:
    config.skillTrees?.magicBladeSkills?.conversion?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE]:
    config.skillTrees?.magicBladeSkills?.conversion?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL]:
    config.skillTrees?.magicBladeSkills?.resonance?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE]:
    config.skillTrees?.magicBladeSkills?.resonance?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET]:
    getResonanceSetIdFromResonanceSet(
      config.skillTrees?.magicBladeSkills?.resonance?.set || "ATK/MATK",
    ), // continue
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL]:
    config.skillTrees?.magicBladeSkills?.enchantedspell?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL]:
    config.skillTrees?.magicBladeSkills?.dualbringer?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE]:
    config.skillTrees?.magicBladeSkills?.dualbringer?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL]:
    config.skillTrees?.magicBladeSkills?.etherflare?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE]:
    config.skillTrees?.magicBladeSkills?.etherflare?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL]:
    config.skillTrees?.magicBladeSkills?.elementslash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL]:
    config.skillTrees?.magicBladeSkills?.enchantsword?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL]:
    config.skillTrees?.magicBladeSkills?.enchantedburst?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL]:
    config.skillTrees?.magicBladeSkills?.unionsword?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL]:
    config.skillTrees?.magicBladeSkills?.siphonbarrier?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE]:
    config.skillTrees?.magicBladeSkills?.siphonbarrier?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL]:
    config.skillTrees?.magicBladeSkills?.teleport?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL]:
    config.skillTrees?.magicBladeSkills?.siphonrecall?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL]:
    config.skillTrees?.magicBladeSkills?.floatdash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL]:
    config.skillTrees?.magicBladeSkills?.magicskin?.level || 0,

  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL]:
    config.skillTrees?.shieldSkills?.shieldmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL]:
    config.skillTrees?.shieldSkills?.shieldbash?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL]:
    config.skillTrees?.shieldSkills?.shieldcannon?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL]:
    config.skillTrees?.shieldSkills?.guardstrike?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL]:
    config.skillTrees?.shieldSkills?.forceshield?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL]:
    config.skillTrees?.shieldSkills?.magicalshield?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL]:
    config.skillTrees?.shieldSkills?.shielduppercut?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL]:
    config.skillTrees?.shieldSkills?.dualshields?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL]:
    config.skillTrees?.shieldSkills?.shieldrepair?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL]:
    config.skillTrees?.shieldSkills?.belagerung?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL]:
    config.skillTrees?.shieldSkills?.protection?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE]:
    config.skillTrees?.shieldSkills?.protection?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL]:
    config.skillTrees?.shieldSkills?.aegis?.level || 0,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE]:
    config.skillTrees?.shieldSkills?.aegis?.isActive || false,
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL]:
    config.skillTrees?.shieldSkills?.guardian?.level || 0,

  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL]:
    config.skillTrees?.guardSkills?.heavyarmormastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL]:
    config.skillTrees?.guardSkills?.advancedguard?.level || 0,
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL]:
    config.skillTrees?.guardSkills?.physicalguard?.level || 0,
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL]:
    config.skillTrees?.guardSkills?.lightarmormastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL]:
    config.skillTrees?.guardSkills?.advancedevasion?.level || 0,
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL]:
    config.skillTrees?.guardSkills?.mirageevasion?.level || 0,

  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL]:
    config.skillTrees?.halberdSkills?.flashstab?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL]:
    config.skillTrees?.halberdSkills?.cannonspear?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL]:
    config.skillTrees?.halberdSkills?.dragontail?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL]:
    config.skillTrees?.halberdSkills?.diveimpact?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL]:
    config.skillTrees?.halberdSkills?.dragontooth?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL]:
    config.skillTrees?.halberdSkills?.draconiccharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL]:
    config.skillTrees?.halberdSkills?.deadlyspear?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL]:
    config.skillTrees?.halberdSkills?.punishray?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL]:
    config.skillTrees?.halberdSkills?.strikestab?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL]:
    config.skillTrees?.halberdSkills?.chronosdivine?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL]:
    config.skillTrees?.halberdSkills?.infinitedimension?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL]:
    config.skillTrees?.halberdSkills?.halberdmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL]:
    config.skillTrees?.halberdSkills?.criticalspear?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL]:
    config.skillTrees?.halberdSkills?.tornadolance?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL]:
    config.skillTrees?.halberdSkills?.quickaura?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE]:
    config.skillTrees?.halberdSkills?.quickaura?.isActive || false,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL]:
    config.skillTrees?.halberdSkills?.warcryofstruggle?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL]:
    config.skillTrees?.halberdSkills?.godspeedwield?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE]:
    config.skillTrees?.halberdSkills?.godspeedwield?.isActive || false,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS]:
    config.skillTrees?.halberdSkills?.godspeedwield?.stacks || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL]:
    config.skillTrees?.halberdSkills?.flashstab?.level || 0,
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL]:
    config.skillTrees?.halberdSkills?.busterlance?.level || 0,

  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL]:
    config.skillTrees?.martialSkills?.smash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL]:
    config.skillTrees?.martialSkills?.bash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL]:
    config.skillTrees?.martialSkills?.shellbreak?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL]:
    config.skillTrees?.martialSkills?.heavysmash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL]:
    config.skillTrees?.martialSkills?.chariot?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL]:
    config.skillTrees?.martialSkills?.abstractarms?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL]:
    config.skillTrees?.martialSkills?.sonicwave?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL]:
    config.skillTrees?.martialSkills?.earthbind?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL]:
    config.skillTrees?.martialSkills?.triplekick?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL]:
    config.skillTrees?.martialSkills?.rush?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE]:
    config.skillTrees?.martialSkills?.rush?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL]:
    config.skillTrees?.martialSkills?.asuraaura?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE]:
    config.skillTrees?.martialSkills?.asuraaura?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL]:
    config.skillTrees?.martialSkills?.flashblink?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL]:
    config.skillTrees?.martialSkills?.martialmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL]:
    config.skillTrees?.martialSkills?.martialdiscipline?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL]:
    config.skillTrees?.martialSkills?.chakra?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE]:
    config.skillTrees?.martialSkills?.chakra?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL]:
    config.skillTrees?.martialSkills?.smash?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE]:
    config.skillTrees?.martialSkills?.energycontrol?.isActive || false,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL]:
    config.skillTrees?.martialSkills?.aggravate?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL]:
    config.skillTrees?.martialSkills?.strongchaseattack?.level || 0,
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL]:
    config.skillTrees?.martialSkills?.slide?.level || 0,

  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL]:
    config.skillTrees?.bareHandSkills?.unarmedmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL]:
    config.skillTrees?.bareHandSkills?.qicharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL]:
    config.skillTrees?.bareHandSkills?.lionrage?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL]:
    config.skillTrees?.bareHandSkills?.ultimalionrage?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL]:
    config.skillTrees?.bareHandSkills?.ravingstorm?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL]:
    config.skillTrees?.bareHandSkills?.ultimaravingstorm?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL]:
    config.skillTrees?.bareHandSkills?.internalelixir?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL]:
    config.skillTrees?.bareHandSkills?.clashofenmity?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL]:
    config.skillTrees?.bareHandSkills?.miraclecomeback?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL]:
    config.skillTrees?.bareHandSkills?.ultimaqicharge?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL]:
    config.skillTrees?.bareHandSkills?.hiddentalent?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL]:
    config.skillTrees?.bareHandSkills?.earthshaker?.level || 0,
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE]:
    config.skillTrees?.bareHandSkills?.earthshaker?.isActive || false,

  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL]:
    config.skillTrees?.hunterSkills?.kick?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL]:
    config.skillTrees?.hunterSkills?.sunrisearrow?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL]:
    config.skillTrees?.hunterSkills?.magicarrow?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE]:
    config.skillTrees?.hunterSkills?.magicarrow?.isActive || false,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL]:
    config.skillTrees?.hunterSkills?.satellitearrow?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL]:
    config.skillTrees?.hunterSkills?.sleeptrap?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL]:
    config.skillTrees?.hunterSkills?.beartrap?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL]:
    config.skillTrees?.hunterSkills?.landmine?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL]:
    config.skillTrees?.hunterSkills?.darktrap?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL]:
    config.skillTrees?.hunterSkills?.homingshot?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL]:
    config.skillTrees?.hunterSkills?.detection?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE]:
    config.skillTrees?.hunterSkills?.detection?.isActive || false,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL]:
    config.skillTrees?.hunterSkills?.cyclonearrow?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL]:
    config.skillTrees?.hunterSkills?.verticalair?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL]:
    config.skillTrees?.hunterSkills?.hunterbowgun?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL]:
    config.skillTrees?.hunterSkills?.multiplehunt?.level || 0,
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_ISACTIVE]:
    config.skillTrees?.hunterSkills?.multiplehunt?.isActive || false,

  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL]:
    config.skillTrees?.ninjaSkills?.ninjutsu?.level || 0,
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL]:
    config.skillTrees?.ninjaSkills?.ninjaspirit?.level || 0,
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL]:
    config.skillTrees?.ninjaSkills?.ninjutsudrilli?.level || 0,
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL]:
    config.skillTrees?.ninjaSkills?.ninjutsudrillii?.level || 0,

  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL]:
    config.skillTrees?.wizardSkills?.familia?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE]:
    config.skillTrees?.wizardSkills?.familia?.isActive || false,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL]:
    config.skillTrees?.wizardSkills?.lightning?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL]:
    config.skillTrees?.wizardSkills?.blizzard?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL]:
    config.skillTrees?.wizardSkills?.meteorstrike?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL]:
    config.skillTrees?.wizardSkills?.imperialray?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL]:
    config.skillTrees?.wizardSkills?.manacrystal?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL]:
    config.skillTrees?.wizardSkills?.stonebarrier?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL]:
    config.skillTrees?.wizardSkills?.advancedfamilia?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE]:
    config.skillTrees?.wizardSkills?.advancedfamilia?.isActive || false,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL]:
    config.skillTrees?.wizardSkills?.castmastery?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL]:
    config.skillTrees?.wizardSkills?.crystallaser?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL]:
    config.skillTrees?.wizardSkills?.overlimit?.level || 0,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE]:
    config.skillTrees?.wizardSkills?.overlimit?.isActive || false,
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL]:
    config.skillTrees?.wizardSkills?.sorceryguide?.level || 0,

  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL]:
    config.skillTrees?.priestSkills?.bless?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL]:
    config.skillTrees?.priestSkills?.gloria?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL]:
    config.skillTrees?.priestSkills?.enhancedbless?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL]:
    config.skillTrees?.priestSkills?.royalheal?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL]:
    config.skillTrees?.priestSkills?.holyfist?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL]:
    config.skillTrees?.priestSkills?.holylight?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL]:
    config.skillTrees?.priestSkills?.etherbarrier?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE]:
    config.skillTrees?.priestSkills?.etherbarrier?.isActive || false,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL]:
    config.skillTrees?.priestSkills?.prayer?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE]:
    config.skillTrees?.priestSkills?.prayer?.isActive || false,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL]:
    config.skillTrees?.priestSkills?.staffthrust?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL]:
    config.skillTrees?.priestSkills?.exorcism?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL]:
    config.skillTrees?.priestSkills?.holybook?.level || 0,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE]:
    config.skillTrees?.priestSkills?.holybook?.isActive || false,
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL]:
    config.skillTrees?.priestSkills?.nemesis?.level || 0,

  [ParamId.CHARACTER_CONSUMABLES]: config.consumables || [], // statmap for now
  [ParamId.CHARACTER_FOODBUFFS]: config.foodBuffs || [], // statmap for now

  [ParamId.CHARACTER_AILMENTS_WEAKEN_ISACTIVE]:
    config.ailments?.weaken || false,
  [ParamId.CHARACTER_AILMENTS_FLINCH_ISACTIVE]:
    config.ailments?.flinch || false,
  [ParamId.CHARACTER_AILMENTS_TUMBLE_ISACTIVE]:
    config.ailments?.tumble || false,
  [ParamId.CHARACTER_AILMENTS_STUN_ISACTIVE]:
    config.ailments?.stun || false,
  [ParamId.CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE]:
    config.ailments?.knockback || false,
  [ParamId.CHARACTER_AILMENTS_POISON_ISACTIVE]:
    config.ailments?.poison || false,
  [ParamId.CHARACTER_AILMENTS_PARALYSIS_ISACTIVE]:
    config.ailments?.paralysis || false,
  [ParamId.CHARACTER_AILMENTS_BLINDNESS_ISACTIVE]:
    config.ailments?.blindness || false,
  [ParamId.CHARACTER_AILMENTS_IGNITION_ISACTIVE]:
    config.ailments?.ignition || false,
  [ParamId.CHARACTER_AILMENTS_FREEZE_ISACTIVE]:
    config.ailments?.freeze || false,
  [ParamId.CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE]:
    config.ailments?.armorbreak || false,
  [ParamId.CHARACTER_AILMENTS_SLOW_ISACTIVE]:
    config.ailments?.slow || false,
  [ParamId.CHARACTER_AILMENTS_STOP_ISACTIVE]:
    config.ailments?.stop || false,
  [ParamId.CHARACTER_AILMENTS_FEAR_ISACTIVE]:
    config.ailments?.fear || false,
  [ParamId.CHARACTER_AILMENTS_DIZZY_ISACTIVE]:
    config.ailments?.weaken || false,
  [ParamId.CHARACTER_AILMENTS_LETHARGY_ISACTIVE]:
    config.ailments?.lethargy || false,
  [ParamId.CHARACTER_AILMENTS_SILENCE_ISACTIVE]:
    config.ailments?.silence || false,
  [ParamId.CHARACTER_AILMENTS_BLEED_ISACTIVE]:
    config.ailments?.bleed || false,
  [ParamId.CHARACTER_AILMENTS_FATIGUE_ISACTIVE]:
    config.ailments?.fatigue || false,
  [ParamId.CHARACTER_AILMENTS_DAZZLED_ISACTIVE]:
    config.ailments?.dazzled || false,

  [ParamId.CHARACTER_REGISLETS_ZEROSTANCE_LEVEL]:
    config.regislets?.zerostance || 0,
  [ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL]:
    config.regislets?.maxhpboost || 0,
  [ParamId.CHARACTER_REGISLETS_MAXMPBOOST_LEVEL]:
    config.regislets?.maxmpboost || 0,
  [ParamId.CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL]:
    config.regislets?.magicattackboost || 0,
  [ParamId.CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL]:
    config.regislets?.physicalattackboost || 0,
  [ParamId.CHARACTER_REGISLETS_MAGICDEFENSEBOOST_LEVEL]:
    config.regislets?.magicdefenseboost || 0,
  [ParamId.CHARACTER_REGISLETS_PHYSICALDEFENSEBOOST_LEVEL]:
    config.regislets?.physicaldefenseboost || 0,
  [ParamId.CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL]:
    config.regislets?.attackspeedboost || 0,
  [ParamId.CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL]:
    config.regislets?.magicspeedboost || 0,
  [ParamId.CHARACTER_REGISLETS_DODGEBOOST_LEVEL]:
    config.regislets?.dodgeboost || 0,
  [ParamId.CHARACTER_REGISLETS_ACCURACYBOOST_LEVEL]:
    config.regislets?.accuracyboost || 0,
  [ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL]:
    config.regislets?.focusresonance || 0,
  [ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL]:
    config.regislets?.speedresonance || 0,
  [ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL]:
    config.regislets?.powerresonance || 0,
});

// export export const calculate = (input: RPartial<input>) => {
//   export const intermediateinput = createIntermediateinput(input);

//   export const result = {
//     totalAGI: totalAGI(intermediateinput as Intermediateinput),
//   };
//   return result;
// };

// calculate({
//   properties: {
//     AGI: 500,
//   },
// });

// console.log(flattenedStats(sample as Intermediateinput));
// // CLEAN THIS TOMMORROW, REFRESH YOUR THINKING IN THIS PROJECT

// GOALS
// - create Input and Output types
