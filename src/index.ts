enum MainWeaponType {
  BARE_HAND,
  ONE_HANDED_SWORD,
  TWO_HANDED_SWORD,
  BOW,
  BOWGUN,
  STAFF,
  MAGIC_DEVICE,
  KNUCKLES,
  HALBERD,
  KATANA,
}

enum SubWeaponType {
  NONE,
  KATANA,
  ONE_HANDED_SWORD,
  MAGIC_DEVICE,
  DAGGER,
  SHIELD,
  NINJUTSU_SCROLL,
  ARROW,
}

enum StatId {
  FLAT_STR,
  PERCENT_STR,

  FLAT_INT,
  PERCENT_INT,

  FLAT_DEX,
  PERCENT_DEX,

  FLAT_VIT,
  PERCENT_VIT,

  FLAT_AGI,
  PERCENT_AGI,

  FLAT_WEAPON_ATK,
  PERCENT_WEAPON_ATK,

  FLAT_MATK,
  PERCENT_MATK,

  FLAT_ATK,
  PERCENT_ATK,

  FLAT_ASPD,
  PERCENT_ASPD,

  FLAT_CSPD,
  PERCENT_CSPD,

  FLAT_CRITICAL_RATE,
  PERCENT_CRITICAL_RATE,

  FLAT_CRITICAL_DAMAGE,
  PERCENT_CRITICAL_DAMAGE,

  FLAT_MAX_HP,
  PERCENT_MAX_HP,

  FLAT_MAX_MP,
  PERCENT_MAX_MP,

  FLAT_ACCURACY,
  PERCENT_ACCURACY,

  FLAT_DODGE,
  PERCENT_DODGE,

  FLAT_DEF,
  PERCENT_DEF,

  FLAT_MDEF,
  PERCENT_MDEF,

  FLAT_UNSHEATHE_ATTACK,
  PERCENT_UNSHEATHE_ATTACK,

  FLAT_ATTACK_MP_RECOVERY,
  PERCENT_ATTACK_MP_RECOVERY,

  FLAT_NATURAL_HP_REGEN,
  PERCENT_NATURAL_HP_REGEN,
  FLAT_NATURAL_MP_REGEN,
  PERCENT_NATURAL_MP_REGEN,

  STABILITY,

  MAGIC_PIERCE,
  PHYSICAL_PIERCE,

  LONG_RANGE_DAMAGE,
  SHORT_RANGE_DAMAGE,

  MOTION_SPEED,

  ATK_UP_STR,
  ATK_UP_INT,
  ATK_UP_DEX,
  ATK_UP_VIT,
  ATK_UP_AGI,

  MATK_UP_STR,
  MATK_UP_INT,
  MATK_UP_DEX,
  MATK_UP_VIT,
  MATK_UP_AGI,

  ATK_DOWN_STR,
  ATK_DOWN_INT,
  ATK_DOWN_DEX,
  ATK_DOWN_VIT,
  ATK_DOWN_AGI,

  MATK_DOWN_STR,
  MATK_DOWN_INT,
  MATK_DOWN_DEX,
  MATK_DOWN_VIT,
  MATK_DOWN_AGI,

  MAGIC_RESISTANCE,
  PHYSICAL_RESISTANCE,

  LIGHT_RESISTANCE,
  DARK_RESISTANCE,

  FIRE_RESISTANCE,
  WATER_RESISTANCE,
  EARTH_RESISTANCE,
  WIND_RESISTANCE,

  NEUTRAL_RESISTANCE,
  AILMENT_RESISTANCE,

  DAMAGE_TO_DARK,
  DAMAGE_TO_LIGHT,
  DAMAGE_TO_EARTH,
  DAMAGE_TO_WATER,
  DAMAGE_TO_FIRE,
  DAMAGE_TO_WIND,

  AGGRO,

  TUMBLE_UNAVAILABLE,
  FLINCH_UNAVAILABLE,
  STUN_UNAVAILABLE,

  DARK_ELEMENT,
  LIGHT_ELEMENT,
  EARTH_ELEMENT,
  WATER_ELEMENT,
  FIRE_ELEMENT,
  WIND_ELEMENT,

  GUARD_POWER,
  GUARD_RECHARGE,
  GUARD_BREAK,

  EVASION_RECHARGE,
  ANTICIPATE,

  ITEM_COOLDOWN,
  INVINCIBLE_AID,

  ABSOLUTE_ACCURACY,
  ABSOLUTE_DODGE,

  PHYSICAL_BARRIER,
  MAGIC_BARRIER,
  FRACTIONAL_BARRIER,
  BARRIER_COOLDOWN,

  ADDITIONAL_MELEE,
  ADDITIONAL_MAGIC,
}

type Stat = [StatId, number];

type StatMapBuilder = <I extends IntermediateConfig>(_: I) => Stat[];

enum PersonalStatId {
  CRT,
  LUK,
  TEC,
  MTL,
  NONE,
}

enum ArmorType {
  LIGHT,
  HEAVY,
  NORMAL,
  NONE,
}

// enum ElementType {
//   DARK,
//   LIGHT,
//   EARTH,
//   WATER,
//   FIRE,
//   WIND,
// }

enum ResonanceSet {
  MATK_AND_ATK,
  ACC_AND_CRIT,
  ASPD_AND_CSPD,
}

enum Param {
  CHARACTER_LEVEL,

  CHARACTER_BASE_STR,
  CHARACTER_BASE_INT,
  CHARACTER_BASE_DEX,
  CHARACTER_BASE_VIT,
  CHARACTER_BASE_AGI,

  CHARACTER_PERSONAL_STAT_NAME,
  CHARACTER_PERSONAL_STAT_VALUE,

  CHARACTER_MAINWEAPON_TYPE,
  CHARACTER_MAINWEAPON_ATK,
  CHARACTER_MAINWEAPON_REFINEMENT,
  CHARACTER_MAINWEAPON_STABILITY,
  CHARACTER_MAINWEAPON_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP,

  CHARACTER_SUBWEAPON_TYPE,
  CHARACTER_SUBWEAPON_ATK,
  CHARACTER_SUBWEAPON_DEF,
  CHARACTER_SUBWEAPON_REFINEMENT,
  CHARACTER_SUBWEAPON_STABILITY,
  CHARACTER_SUBWEAPON_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP,
  CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION,
  CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION,

  CHARACTER_ARMOR_DEF,
  CHARACTER_ARMOR_REFINEMENT,
  CHARACTER_ARMOR_TYPE,
  CHARACTER_ARMOR_STATMAP,
  CHARACTER_ARMOR_CRYSTAL1_STATMAP,
  CHARACTER_ARMOR_CRYSTAL2_STATMAP,

  CHARACTER_ADDITIONAL_GEAR_DEF,
  CHARACTER_ADDITIONAL_GEAR_REFINEMENT,
  CHARACTER_ADDITIONAL_GEAR_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SPECIAL_GEAR_DEF,
  CHARACTER_SPECIAL_GEAR_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN,
  CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_ISACTIVE,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS,
  CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_CHARGE,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_TIMEACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS,
  CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER,
  CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE,
  CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS,
  CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_TRIPLEACESHOTS_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_WOLFSNIPER_ISACTIVE,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL,

  CHARACTER_AILMENTS_WEAKEN_ISACTIVE,
  CHARACTER_AILMENTS_FLINCH_ISACTIVE,
  CHARACTER_AILMENTS_TUMBLE_ISACTIVE,
  CHARACTER_AILMENTS_STUN_ISACTIVE,
  CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE,
  CHARACTER_AILMENTS_POISON_ISACTIVE,
  CHARACTER_AILMENTS_PARALYSIS_ISACTIVE,
  CHARACTER_AILMENTS_BLINDNESS_ISACTIVE,
  CHARACTER_AILMENTS_IGNITION_ISACTIVE,
  CHARACTER_AILMENTS_FREEZE_ISACTIVE,
  CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE,
  CHARACTER_AILMENTS_SLOW_ISACTIVE,
  CHARACTER_AILMENTS_STOP_ISACTIVE,
  CHARACTER_AILMENTS_FEAR_ISACTIVE,
  CHARACTER_AILMENTS_DIZZY_ISACTIVE,
  CHARACTER_AILMENTS_LETHARGY_ISACTIVE,
  CHARACTER_AILMENTS_SILENCE_ISACTIVE,
  CHARACTER_AILMENTS_BLEED_ISACTIVE,
  CHARACTER_AILMENTS_FATIGUE_ISACTIVE,
  CHARACTER_AILMENTS_DAZZLED_ISACTIVE,

  CHARACTER_CONSUMABLES,
  CHARACTER_FOODBUFFS,
} // use THIS

interface IntermediateConfig {
  [Param.CHARACTER_LEVEL]: number;

  [Param.CHARACTER_BASE_STR]: number;
  [Param.CHARACTER_BASE_INT]: number;
  [Param.CHARACTER_BASE_DEX]: number;
  [Param.CHARACTER_BASE_VIT]: number;
  [Param.CHARACTER_BASE_AGI]: number;
  [Param.CHARACTER_PERSONAL_STAT_NAME]: PersonalStatId;
  [Param.CHARACTER_PERSONAL_STAT_VALUE]: number;

  [Param.CHARACTER_MAINWEAPON_TYPE]: MainWeaponType;
  [Param.CHARACTER_MAINWEAPON_ATK]: number;
  [Param.CHARACTER_MAINWEAPON_REFINEMENT]: number;
  [Param.CHARACTER_MAINWEAPON_STABILITY]: number;
  [Param.CHARACTER_MAINWEAPON_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;

  [Param.CHARACTER_SUBWEAPON_TYPE]: SubWeaponType;
  [Param.CHARACTER_SUBWEAPON_ATK]: number;
  [Param.CHARACTER_SUBWEAPON_DEF]: number;
  [Param.CHARACTER_SUBWEAPON_REFINEMENT]: number;
  [Param.CHARACTER_SUBWEAPON_STABILITY]: number;
  [Param.CHARACTER_SUBWEAPON_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION]: number;
  [Param.CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION]: number;

  [Param.CHARACTER_ARMOR_DEF]: number;
  [Param.CHARACTER_ARMOR_REFINEMENT]: number;
  [Param.CHARACTER_ARMOR_TYPE]: ArmorType;
  [Param.CHARACTER_ARMOR_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_ARMOR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_ARMOR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [Param.CHARACTER_ADDITIONAL_GEAR_DEF]: number;
  [Param.CHARACTER_ADDITIONAL_GEAR_REFINEMENT]: number;
  [Param.CHARACTER_ADDITIONAL_GEAR_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [Param.CHARACTER_SPECIAL_GEAR_DEF]: number;
  [Param.CHARACTER_SPECIAL_GEAR_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [Param.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [Param.CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN]: boolean;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_QADAL_CHARGE]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_QADAL_TIMEACTIVE]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET]: ResonanceSet;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_TRIPLEACESHOTS_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_HUNTERSKILLS_WOLFSNIPER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL]: number;
  [Param.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL]: number;
  [Param.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL]: number;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE]: boolean;
  [Param.CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL]: number;

  [Param.CHARACTER_CONSUMABLES]: Stat[]; // statmap for now
  [Param.CHARACTER_FOODBUFFS]: Stat[]; // statmap for now

  [Param.CHARACTER_AILMENTS_WEAKEN_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_FLINCH_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_TUMBLE_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_STUN_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_POISON_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_PARALYSIS_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_BLINDNESS_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_IGNITION_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_FREEZE_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_SLOW_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_STOP_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_FEAR_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_DIZZY_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_LETHARGY_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_SILENCE_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_BLEED_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_FATIGUE_ISACTIVE]: boolean;
  [Param.CHARACTER_AILMENTS_DAZZLED_ISACTIVE]: boolean;
}

// ---------- UTILS --------------

export const add = (a: number, b: number) => a + b;
export const finalizeTotal = (
  base: number,
  percent: number,
  flat: number,
) => base * (1 + percent / 100) + flat;

export const isUsingStatAccessibleSubWeapon = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.ARROW ||
  config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.DAGGER ||
  config[Param.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponType.NINJUTSU_SCROLL ||
  config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.SHIELD;

export const isUsingMainOHS = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponType.ONE_HANDED_SWORD;

export const isUsingSubOHS = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SUBWEAPON_TYPE] ===
  SubWeaponType.ONE_HANDED_SWORD;

export const isUsingMainTHS = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponType.TWO_HANDED_SWORD;

export const isUsingMainHAL = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.HALBERD;

export const isUsingDualSwords = (config: IntermediateConfig) =>
  isUsingMainOHS(config) &&
  isUsingSubOHS(config) &&
  config[Param.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL] >
    0;

export const isUsingMainBWG = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BOWGUN;

export const isUsingMainKN = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.KNUCKLES;

export const isUsingSubArrow = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.ARROW;

export const isNotUsingSubWeapon = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE;

export const flattenedStatsFromMainWeapon = (config: IntermediateConfig) =>
  config[Param.CHARACTER_MAINWEAPON_STATMAP](config);

export const flattenedStatsFromMainWeaponCrystal1 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP](config);

export const flattenedStatsFromMainWeaponCrystal2 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP](config);

export const flattenedStatsFromSubWeapon = (config: IntermediateConfig) =>
  isUsingStatAccessibleSubWeapon(config) ?
    config[Param.CHARACTER_SUBWEAPON_STATMAP](config)
  : [];

export const flattenedStatsFromArmor = (config: IntermediateConfig) =>
  config[Param.CHARACTER_ARMOR_STATMAP](config);

export const flattenedStatsFromArmorCrystal1 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_ARMOR_CRYSTAL1_STATMAP](config);

export const flattenedStatsFromArmorCrystal2 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_ARMOR_CRYSTAL2_STATMAP](config);

export const flattenedStatsFromAdditionalGear = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_ADDITIONAL_GEAR_STATMAP](config);

export const flattenedStatsFromAdditionalGearCrystal1 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP](config);

export const flattenedStatsFromAdditionalGearCrystal2 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP](config);

export const flattenedStatsFromSpecialGear = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_SPECIAL_GEAR_STATMAP](config);

export const flattenedStatsFromSpecialGearCrystal1 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP](config);

export const flattenedStatsFromSpecialGearCrystal2 = (
  config: IntermediateConfig,
) => config[Param.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP](config);

export const flattenedStats = (config: IntermediateConfig) =>
  ([] as Stat[]).concat(
    flattenedStatsFromMainWeapon(config),
    flattenedStatsFromMainWeaponCrystal1(config),
    flattenedStatsFromMainWeaponCrystal2(config),
    flattenedStatsFromSubWeapon(config),
    flattenedStatsFromArmor(config),
    flattenedStatsFromArmorCrystal1(config),
    flattenedStatsFromArmorCrystal2(config),
    flattenedStatsFromAdditionalGear(config),
    flattenedStatsFromAdditionalGearCrystal1(config),
    flattenedStatsFromAdditionalGearCrystal2(config),
    flattenedStatsFromSpecialGear(config),
    flattenedStatsFromSpecialGearCrystal1(config),
    flattenedStatsFromSpecialGearCrystal2(config),
    config[Param.CHARACTER_FOODBUFFS],
    config[Param.CHARACTER_CONSUMABLES],
  );

// ---------- BASIC STATS --------------

// AGI
export const totalPercentAGIFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentAGI = (config: IntermediateConfig) =>
  totalPercentAGIFromEquipment(config);

export const totalFlatAGIFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatAGI = (config: IntermediateConfig) =>
  totalFlatAGIFromEquipment(config) + godspeedTotalFlatAGI(config);

export const totalAGI = (config: IntermediateConfig) =>
  finalizeTotal(
    config[Param.CHARACTER_BASE_AGI],
    totalPercentAGI(config),
    totalFlatAGI(config),
  );

// DEX
export const totalPercentDEXFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentDEX = (config: IntermediateConfig) =>
  totalPercentDEXFromEquipment(config);

export const totalFlatDEXFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatDEX = (config: IntermediateConfig) =>
  totalFlatDEXFromEquipment(config);

export const totalDEX = (config: IntermediateConfig) =>
  finalizeTotal(
    config[Param.CHARACTER_BASE_DEX],
    totalPercentDEX(config),
    totalFlatDEX(config),
  );

// STR

export const totalPercentSTRFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentSTR = (config: IntermediateConfig) =>
  totalPercentSTRFromEquipment(config);

export const totalFlatSTRFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatSTR = (config: IntermediateConfig) =>
  totalFlatSTRFromEquipment(config);

export const totalSTR = (config: IntermediateConfig) =>
  finalizeTotal(
    config[Param.CHARACTER_BASE_STR],
    totalPercentSTR(config),
    totalFlatSTR(config),
  );

// INT

export const totalPercentINTFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentINT = (config: IntermediateConfig) =>
  totalPercentINTFromEquipment(config);

export const totalFlatINTFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatINT = (config: IntermediateConfig) =>
  totalFlatINTFromEquipment(config);

export const totalINT = (config: IntermediateConfig) =>
  finalizeTotal(
    config[Param.CHARACTER_BASE_INT],
    totalPercentINT(config),
    totalFlatINT(config),
  );

// VIT

export const totalPercentVITFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalPercentVIT = (config: IntermediateConfig) =>
  totalPercentVITFromEquipment(config);

export const totalFlatVITFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const totalFlatVIT = (config: IntermediateConfig) =>
  totalFlatVITFromEquipment(config);

export const totalVIT = (config: IntermediateConfig) =>
  finalizeTotal(
    config[Param.CHARACTER_BASE_VIT],
    totalPercentVIT(config),
    totalFlatVIT(config),
  );

// ---------- SKILLS AND PASSIVES --------------

// barehand skills

export const hiddenTalentLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL];

export const hiddenTalentTotalBaseGuardPower = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    hiddenTalentLevel(config) * 500
  : 0;

export const hiddenTalentTotalBaseGuardRecharge = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    5 + 2 * hiddenTalentLevel(config)
  : 0;

export const hiddenTalentTotalEvasionCount = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    Math.floor(2 + hiddenTalentLevel(config) * 0.4)
  : 0;

export const hiddenTalentTotalBaseEvasionRecharge = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    hiddenTalentLevel(config) < 10 ?
      0.1 * hiddenTalentLevel(config)
    : 10
  : 0;

export const hiddenTalentTotalCostQiReductionForNonBareHandSkills = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    Math.floor(0.5 * hiddenTalentLevel(config))
  : 0;

export const ultimaQiChargeLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL];

export const ultimaQiChargeTotalFlatAMPR = (config: IntermediateConfig) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    Math.floor(ultimaQiChargeLevel(config) * 0.5)
  : 0;

export const ultimaQiChargeTotalCostQiReductionForNonBareHandSkills = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    20 - ultimaQiChargeLevel(config)
  : 0;

export const unarmedMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL];

export const unarmedMasteryTotalFlatWeaponATK = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    Math.floor(
      (config[Param.CHARACTER_LEVEL] * unarmedMasteryLevel(config)) / 10,
    )
  : 0;

export const unarmedMasteryTotalQiChargeLimit = (
  config: IntermediateConfig,
) =>
  (
    config[Param.CHARACTER_MAINWEAPON_TYPE] === MainWeaponType.BARE_HAND &&
    config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.NONE
  ) ?
    unarmedMasteryLevel(config) < 10 ?
      10 + unarmedMasteryLevel(config) * 10
    : 100 + config[Param.CHARACTER_LEVEL]
  : 0;

// blade skills

export const berserkIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE];
export const berserkLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL];

export const berserkTotalPercentASPD = (config: IntermediateConfig) =>
  berserkIsActive(config) ? berserkLevel(config) * 10 : 0;

export const berserkTotalFlatASPD = (config: IntermediateConfig) =>
  berserkIsActive(config) ? berserkLevel(config) * 100 : 0;

export const berserkTotalFlatCriticalRate = (
  config: IntermediateConfig,
) =>
  berserkIsActive(config) ? Math.floor(berserkLevel(config) * 2.5) : 0;

export const berserkTotalStability = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) || isUsingMainTHS(config) ?
      Math.floor(berserkLevel(config) * 2.5)
    : berserkLevel(config) * 5
  : 0;

export const berserkTotalPercentDEF = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) && !isUsingDualSwords(config) ?
      Math.floor((100 - berserkLevel(config)) / 2)
    : 100 - berserkLevel(config)
  : 0;

export const berserkTotalPercentMDEF = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) && !isUsingDualSwords(config) ?
      Math.floor((100 - berserkLevel(config)) / 2)
    : 100 - berserkLevel(config)
  : 0;

export const busterBladeLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL];

export const busterBladeIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE];

export const busterBladeTotalPercentWeaponATK = (
  config: IntermediateConfig,
) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    busterBladeIsActive(config) ? busterBladeLevel(config)
    : 0
  : 0;

export const quickSlashLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL];

export const quickSlashTotalPercentASPD = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    quickSlashLevel(config)
  : 0;

export const quickSlashTotalFlatASPD = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    quickSlashLevel(config) * 10
  : 0;

export const swordMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL];

export const swordMasteryTotalPercentATK = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    swordMasteryLevel(config) >= 8 ? 3
    : swordMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

export const swordMasteryTotalPercentWeaponATK = (
  config: IntermediateConfig,
) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    swordMasteryLevel(config) * 3
  : 0;

export const warCryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL];

export const warCryIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE];

export const warCryTotalPercentATK = (config: IntermediateConfig) =>
  warCryIsActive(config) ?
    isUsingMainTHS(config) ? warCryLevel(config) * 10 + 5
    : warCryLevel(config) * 10
  : 0;

// dualswords skills

export const dualSwordControlLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL];

export const dualSwordControlTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? 5 + dualSwordControlLevel(config) * 3 : 0;

export const dualSwordControlTotalPercentAccuracy = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? 5 + dualSwordControlLevel(config) * 3 : 0;

export const dualSwordControlTotalFlatASPD = (
  config: IntermediateConfig,
) => (isUsingDualSwords(config) ? 50 * dualSwordControlLevel(config) : 0);

export const dualSwordMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL];

export const dualSwordMasteryTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? -55 + dualSwordMasteryLevel(config) * 3 : 0;

export const dualSwordMasteryTotalPercentAccuracy = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? -55 + dualSwordMasteryLevel(config) * 3 : 0;

export const flashBlastLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL];

export const flashBlastIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE];

export const flashBlastTotalPercentUnsheatheAttack = (
  config: IntermediateConfig,
) => (flashBlastIsActive(config) ? flashBlastLevel(config) : 0);

export const flashBlastTotalPercentMainWeaponATK = (
  config: IntermediateConfig,
) =>
  flashBlastIsActive(config) ?
    isUsingDualSwords(config) && flashBlastLevel(config) > 0 ?
      25
    : 0
  : 0;

export const godspeedLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

export const godspeedTotalFlatAGI = (config: IntermediateConfig) =>
  godspeedLevel(config) + Math.max(godspeedLevel(config) - 5, 0);

export const godspeedTotalPercentUnsheatheAttack = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ?
    godspeedLevel(config) + 15
  : godspeedLevel(config) + 5;

// guard skills

export const advancedEvasionLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL];

export const advancedEvasionTotalEvasionRecharge = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_ARMOR_TYPE] === ArmorType.LIGHT ?
    advancedEvasionLevel(config)
  : 0;

export const advancedGuardLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL];

export const advancedGuardTotalGuardRecharge = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_ARMOR_TYPE] === ArmorType.HEAVY ?
    advancedGuardLevel(config)
  : 0;

export const advancedGuardTotalGuardPower = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_ARMOR_TYPE] === ArmorType.HEAVY ?
    Math.floor((1 + advancedGuardLevel(config)) / 2)
  : 0;

export const heavyArmorMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL];

export const heavyArmorMasteryTotalGuardRecharge = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_ARMOR_TYPE] === ArmorType.HEAVY ?
    heavyArmorMasteryLevel(config)
  : 0;

export const lightArmorMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL];

export const lightArmorMasteryTotalEvasionRecharge = (
  config: IntermediateConfig,
) =>
  config[Param.CHARACTER_ARMOR_TYPE] === ArmorType.LIGHT ?
    lightArmorMasteryLevel(config)
  : 0;

export const criticalSpearLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL];

export const criticalSpearTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingMainHAL(config) ?
    Math.floor(criticalSpearLevel(config) * 0.5)
  : 0;

export const criticalSpearTotalFlatCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingMainHAL(config) ?
    Math.floor(criticalSpearLevel(config) * 0.5 + 0.5)
  : 0;

export const godspeedWieldStacks = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS];

export const godspeedWieldLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

export const godspeedWieldIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE];

export const godspeedWieldTotalFlatASPD = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      30 * godspeedWieldLevel(config) * godspeedWieldStacks(config) +
      100 * godspeedWieldStacks(config)
    : 30 * godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

export const godspeedWieldTotalMotionSpeed = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

export const almightyWieldLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL];

export const godspeedWieldTotalPhysicalResistance = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      -(
        (100 - 3 * godspeedWieldLevel(config)) *
          godspeedWieldStacks(config) +
        45 * godspeedWieldStacks(config) +
        Math.floor(almightyWieldLevel(config) * 0.5) *
          godspeedWieldStacks(config)
      )
    : -(
        (100 - 3 * godspeedWieldLevel(config)) *
        godspeedWieldStacks(config)
      )
  : 0;

export const godspeedWieldTotalMagicResistance = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      -(
        (100 - 3 * godspeedWieldLevel(config)) *
          godspeedWieldStacks(config) +
        45 * godspeedWieldStacks(config) +
        Math.floor(almightyWieldLevel(config) * 0.5) *
          godspeedWieldStacks(config)
      )
    : -(
        (100 - 3 * godspeedWieldLevel(config)) *
        godspeedWieldStacks(config)
      )
  : 0;

export const godspeedWieldTotalFlatMaxMP = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ? -(100 * godspeedWieldStacks(config)) : 0;

export const godspeedWieldTotalPercentEvasionRecharge = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

export const halberdMasteryLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL];

export const halberdMasteryTotalPercentATK = (
  config: IntermediateConfig,
) =>
  isUsingMainHAL(config) ?
    halberdMasteryLevel(config) >= 8 ? 3
    : halberdMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

export const halberdMasteryTotalPercentWeaponATK = (
  config: IntermediateConfig,
) => (isUsingMainHAL(config) ? halberdMasteryLevel(config) * 3 : 0);

export const quickAuraLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL];

export const quickAuraIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE];

export const quickAuraTotalFlatASPD = (config: IntermediateConfig) =>
  quickAuraIsActive(config) ? quickAuraLevel(config) * 50 : 0;

export const quickAuraTotalPercentASPD = (
  config: IntermediateConfig,
): number =>
  quickAuraIsActive(config) ? Math.floor(quickAuraLevel(config) * 2.5) : 0;

// hunter skills

export const hunterBowgunLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL];

export const hunterBowgunTotalBaseATK = (config: IntermediateConfig) =>
  (
    isUsingMainBWG(config) &&
    !(isUsingSubArrow(config) || isNotUsingSubWeapon(config))
  ) ?
    (1 + (Math.floor(hunterBowgunLevel(config) * 1.5) * 5) / 3 / 100) *
    config[Param.CHARACTER_MAINWEAPON_ATK]
  : 0;

// magic blade skills
export const conversionLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL];

//  export const conversionTotalFlatMATK = (config: IntermediateConfig) =>
//   (
//     isUsingMainTHS(config) ||
//     isUsingMainBWG(config) ||
//     isUsingMainKN(config) ||
//     isUsingMainOHS(config)
//   ) ?
//     Math.floor(
//       (conversionLevel(config) ** 2 / 100) *
//         (isUsingMainKN(config) ?
//           totalMainWeaponATK(config) * 0.5
//         : totalMainWeaponATK(config)),
//     )
//   : 0;

export const dualBringerLevel = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL];
export const dualBringerIsActive = (config: IntermediateConfig) =>
  config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE];

// refactor this
export const totalNumberOfMagicBladeSkills = (
  config: IntermediateConfig,
) =>
  [
    (
      config[
        Param.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL] > 0 ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL] > 0 ?
      1
    : 0,
    (
      config[
        Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL] > 0 ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL] > 0 ?
      1
    : 0,
    (
      config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      config[
        Param.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL] > 0 ?
      1
    : 0,
    (
      config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL] >
      0
    ) ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL] > 0 ?
      1
    : 0,
    (
      config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL] >
      0
    ) ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL] > 0 ?
      1
    : 0,
    config[Param.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL] > 0 ?
      1
    : 0,
  ].reduce(add, 0);

export const totalNegativePercentATK = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);
// + subWeaponMagicDevicePercentATKModifier(config);

export const totalNegativePercentMATK = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);

export const dualBringerTotalSkillModifier = (
  config: IntermediateConfig,
) =>
  Math.min(
    100,
    dualBringerLevel(config) * totalNumberOfMagicBladeSkills(config),
  );

//  export const dualBringerTotalATK = (config: IntermediateConfig) =>
//   (
//     dualBringerIsActive(config) &&
//     config[Param.CHARACTER_SUBWEAPON_TYPE] === SubWeaponType.MAGIC_DEVICE
//   ) ?
//     Math.floor(
//       Math.max(
//         0,
//         (totalMATK(config) - totalATK(config)) *
//           ((100 - Math.abs(totalNegativePercentATK(config))) / 100) *
//           (dualBringerTotalSkillModifier(config) / 100) -
//           (totalATK(config) * Math.abs(totalNegativePercentATK(config))) /
//             100,
//       ),
//     )
//   : 0;

//  export const dualBringerTotalMATK = (config: IntermediateConfig) =>
//   (
//     dualBringerIsActive(config) &&
//     config["character.subweapon.type"] === "magic-device"
//   ) ?
//     Math.floor(
//       Math.max(
//         0,
//         (totalATK(config) - totalMATK(config)) *
//           ((100 - Math.abs(totalNegativePercentMATK(config))) / 100) *
//           (dualBringerTotalSkillModifier(config) / 100) -
//           (totalMATK(config) *
//             Math.abs(totalNegativePercentMATK(config))) /
//             100,
//       ),
//     )
//   : 0;

//  export const dualBringerTotalDuration = (config: IntermediateConfig) =>
//   (
//     dualBringerIsActive(config) &&
//     config["character.subweapon.type"] === "magic-device"
//   ) ?
//     Math.max(10, floor(config["character.subweapon.ATK"] / 10))
//   : 0;

//  export const dualBringerTotalMagicCriticalDamageConversion = (
//   config: IntermediateConfig,
// ) =>
//   (
//     dualBringerIsActive(config) &&
//     config["character.subweapon.type"] === "magic-device" &&
//     totalINT(config) > totalSTR(config)
//   ) ?
//     floor(dualBringerLevel(config) * 2.5)
//   : 0;

//  export const dualBringerTotalMagicCriticalRateConversion = (
//   config: IntermediateConfig,
// ) =>
//   (
//     dualBringerIsActive(config) &&
//     config["character.subweapon.type"] === "magic-device" &&
//     totalSTR(config) > totalINT(config)
//   ) ?
//     floor(dualBringerLevel(config) * 2.5)
//   : 0;
