import { Add } from "ts-arithmetic";

type RecursivePartial<T> = {
  [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[]
  : T[P] extends object | undefined ? RecursivePartial<T[P]>
  : T[P];
};

enum MainWeaponTypeId {
  BARE_HAND,
  ONE_HANDED_SWORD,
  TWO_HANDED_SWORD,
  BOW,
  BOWGUN,
  STAFF,
  MAGIC_DEVICE,
  KNUCKLES,
  HALBERD,
  KATANA,
}

enum SubWeaponTypeId {
  NONE,
  KATANA,
  ONE_HANDED_SWORD,
  MAGIC_DEVICE,
  DAGGER,
  SHIELD,
  NINJUTSU_SCROLL,
  ARROW,
  KNUCKLES,
}

enum StatId {
  FLAT_STR,
  PERCENT_STR,

  FLAT_INT,
  PERCENT_INT,

  FLAT_DEX,
  PERCENT_DEX,

  FLAT_VIT,
  PERCENT_VIT,

  FLAT_AGI,
  PERCENT_AGI,

  FLAT_WEAPON_ATK,
  PERCENT_WEAPON_ATK,

  FLAT_MATK,
  PERCENT_MATK,

  FLAT_ATK,
  PERCENT_ATK,

  FLAT_ASPD,
  PERCENT_ASPD,

  FLAT_CSPD,
  PERCENT_CSPD,

  FLAT_CRITICAL_RATE,
  PERCENT_CRITICAL_RATE,

  FLAT_CRITICAL_DAMAGE,
  PERCENT_CRITICAL_DAMAGE,

  FLAT_MAX_HP,
  PERCENT_MAX_HP,

  FLAT_MAX_MP,
  PERCENT_MAX_MP,

  FLAT_ACCURACY,
  PERCENT_ACCURACY,

  FLAT_DODGE,
  PERCENT_DODGE,

  FLAT_DEF,
  PERCENT_DEF,

  FLAT_MDEF,
  PERCENT_MDEF,

  FLAT_UNSHEATHE_ATTACK,
  PERCENT_UNSHEATHE_ATTACK,

  FLAT_ATTACK_MP_RECOVERY,
  PERCENT_ATTACK_MP_RECOVERY,

  FLAT_NATURAL_HP_REGEN,
  PERCENT_NATURAL_HP_REGEN,
  FLAT_NATURAL_MP_REGEN,
  PERCENT_NATURAL_MP_REGEN,

  STABILITY,

  MAGIC_PIERCE,
  PHYSICAL_PIERCE,

  LONG_RANGE_DAMAGE,
  SHORT_RANGE_DAMAGE,

  MOTION_SPEED,

  ATK_UP_STR,
  ATK_UP_INT,
  ATK_UP_DEX,
  ATK_UP_VIT,
  ATK_UP_AGI,

  MATK_UP_STR,
  MATK_UP_INT,
  MATK_UP_DEX,
  MATK_UP_VIT,
  MATK_UP_AGI,

  ATK_DOWN_STR,
  ATK_DOWN_INT,
  ATK_DOWN_DEX,
  ATK_DOWN_VIT,
  ATK_DOWN_AGI,

  MATK_DOWN_STR,
  MATK_DOWN_INT,
  MATK_DOWN_DEX,
  MATK_DOWN_VIT,
  MATK_DOWN_AGI,

  MAGIC_RESISTANCE,
  PHYSICAL_RESISTANCE,

  LIGHT_RESISTANCE,
  DARK_RESISTANCE,

  FIRE_RESISTANCE,
  WATER_RESISTANCE,
  EARTH_RESISTANCE,
  WIND_RESISTANCE,

  NEUTRAL_RESISTANCE,
  AILMENT_RESISTANCE,

  DAMAGE_TO_DARK,
  DAMAGE_TO_LIGHT,
  DAMAGE_TO_EARTH,
  DAMAGE_TO_WATER,
  DAMAGE_TO_FIRE,
  DAMAGE_TO_WIND,

  AGGRO,

  TUMBLE_UNAVAILABLE,
  FLINCH_UNAVAILABLE,
  STUN_UNAVAILABLE,

  DARK_ELEMENT,
  LIGHT_ELEMENT,
  EARTH_ELEMENT,
  WATER_ELEMENT,
  FIRE_ELEMENT,
  WIND_ELEMENT,

  GUARD_POWER,
  GUARD_RECHARGE,
  GUARD_BREAK,

  EVASION_RECHARGE,
  ANTICIPATE,

  ITEM_COOLDOWN,
  INVINCIBLE_AID,

  ABSOLUTE_ACCURACY,
  ABSOLUTE_DODGE,

  PHYSICAL_BARRIER,
  MAGIC_BARRIER,
  FRACTIONAL_BARRIER,
  BARRIER_COOLDOWN,

  ADDITIONAL_MELEE,
  ADDITIONAL_MAGIC,
}

type Stat = [StatId, number];

type StatMapBuilder = <I extends IntermediateConfig>(_: I) => Stat[];

enum PersonalStatId {
  CRT,
  LUK,
  TEC,
  MTL,
  NONE,
}

enum ArmorTypeId {
  LIGHT,
  HEAVY,
  NORMAL,
  NONE,
}

// enum ElementType {
//   DARK,
//   LIGHT,
//   EARTH,
//   WATER,
//   FIRE,
//   WIND,
// }

enum ResonanceSetId {
  MATK_AND_ATK,
  ACC_AND_CRIT,
  ASPD_AND_CSPD,
}

enum ParamId {
  CHARACTER_LEVEL,

  CHARACTER_BASE_STR,
  CHARACTER_BASE_INT,
  CHARACTER_BASE_DEX,
  CHARACTER_BASE_VIT,
  CHARACTER_BASE_AGI,

  CHARACTER_PERSONAL_STAT_ID,
  CHARACTER_PERSONAL_STAT_VALUE,

  CHARACTER_MAINWEAPON_TYPE,
  CHARACTER_MAINWEAPON_ATK,
  CHARACTER_MAINWEAPON_REFINEMENT,
  CHARACTER_MAINWEAPON_STABILITY,
  CHARACTER_MAINWEAPON_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP,

  CHARACTER_SUBWEAPON_TYPE,
  CHARACTER_SUBWEAPON_ATK,
  CHARACTER_SUBWEAPON_DEF,
  CHARACTER_SUBWEAPON_REFINEMENT,
  CHARACTER_SUBWEAPON_STABILITY,
  CHARACTER_SUBWEAPON_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP,
  CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP,
  CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION,
  CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION,

  CHARACTER_ARMOR_DEF,
  CHARACTER_ARMOR_REFINEMENT,
  CHARACTER_ARMOR_TYPE,
  CHARACTER_ARMOR_STATMAP,
  CHARACTER_ARMOR_CRYSTAL1_STATMAP,
  CHARACTER_ARMOR_CRYSTAL2_STATMAP,

  CHARACTER_ADDITIONAL_GEAR_DEF,
  CHARACTER_ADDITIONAL_GEAR_REFINEMENT,
  CHARACTER_ADDITIONAL_GEAR_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SPECIAL_GEAR_DEF,
  CHARACTER_SPECIAL_GEAR_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP,
  CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP,

  CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE,
  CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL,
  CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE,
  CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN,
  CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_ISACTIVE,
  CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS,
  CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL,
  CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_CHARGE,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_QADAL_TIMEACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS,
  CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE,
  CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER,
  CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL,
  CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL,
  CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL,
  CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE,
  CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_ISACTIVE,
  CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL,
  CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE,
  CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL,
  CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE,
  CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL,
  CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL,
  CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE,
  CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL,
  CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE,
  CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS,
  CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL,
  CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE,
  CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL,
  CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL,
  CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL,
  CHARACTER_SKILLS_HUNTERSKILLS_TRIPLEACESHOTS_ISACTIVE,
  CHARACTER_SKILLS_HUNTERSKILLS_WOLFSNIPER_ISACTIVE,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL,
  CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL,
  CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE,
  CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL,
  CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE,
  CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL,

  CHARACTER_AILMENTS_WEAKEN_ISACTIVE,
  CHARACTER_AILMENTS_FLINCH_ISACTIVE,
  CHARACTER_AILMENTS_TUMBLE_ISACTIVE,
  CHARACTER_AILMENTS_STUN_ISACTIVE,
  CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE,
  CHARACTER_AILMENTS_POISON_ISACTIVE,
  CHARACTER_AILMENTS_PARALYSIS_ISACTIVE,
  CHARACTER_AILMENTS_BLINDNESS_ISACTIVE,
  CHARACTER_AILMENTS_IGNITION_ISACTIVE,
  CHARACTER_AILMENTS_FREEZE_ISACTIVE,
  CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE,
  CHARACTER_AILMENTS_SLOW_ISACTIVE,
  CHARACTER_AILMENTS_STOP_ISACTIVE,
  CHARACTER_AILMENTS_FEAR_ISACTIVE,
  CHARACTER_AILMENTS_DIZZY_ISACTIVE,
  CHARACTER_AILMENTS_LETHARGY_ISACTIVE,
  CHARACTER_AILMENTS_SILENCE_ISACTIVE,
  CHARACTER_AILMENTS_BLEED_ISACTIVE,
  CHARACTER_AILMENTS_FATIGUE_ISACTIVE,
  CHARACTER_AILMENTS_DAZZLED_ISACTIVE,

  CHARACTER_CONSUMABLES,
  CHARACTER_FOODBUFFS,

  CHARACTER_REGISLETS_ZEROSTANCE_LEVEL,
  CHARACTER_REGISLETS_MAXHPBOOST_LEVEL,
  CHARACTER_REGISLETS_MAXMPBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL,
  CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICDEFENSEBOOST_LEVEL,
  CHARACTER_REGISLETS_PHYSICALDEFENSEBOOST_LEVEL,
  CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL,
  CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL,
  CHARACTER_REGISLETS_DODGEBOOST_LEVEL,
  CHARACTER_REGISLETS_ACCURACYBOOST_LEVEL,
  CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL,
  CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL,
  CHARACTER_REGISLETS_POWERRESONANCE_LEVEL,
}

interface IntermediateConfig {
  [ParamId.CHARACTER_LEVEL]: number;

  [ParamId.CHARACTER_BASE_STR]: number;
  [ParamId.CHARACTER_BASE_INT]: number;
  [ParamId.CHARACTER_BASE_DEX]: number;
  [ParamId.CHARACTER_BASE_VIT]: number;
  [ParamId.CHARACTER_BASE_AGI]: number;
  [ParamId.CHARACTER_PERSONAL_STAT_ID]: PersonalStatId;
  [ParamId.CHARACTER_PERSONAL_STAT_VALUE]: number;

  [ParamId.CHARACTER_MAINWEAPON_TYPE]: MainWeaponTypeId;
  [ParamId.CHARACTER_MAINWEAPON_ATK]: number;
  [ParamId.CHARACTER_MAINWEAPON_REFINEMENT]: number;
  [ParamId.CHARACTER_MAINWEAPON_STABILITY]: number;
  [ParamId.CHARACTER_MAINWEAPON_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SUBWEAPON_TYPE]: SubWeaponTypeId;
  [ParamId.CHARACTER_SUBWEAPON_ATK]: number;
  [ParamId.CHARACTER_SUBWEAPON_DEF]: number;
  [ParamId.CHARACTER_SUBWEAPON_REFINEMENT]: number;
  [ParamId.CHARACTER_SUBWEAPON_STABILITY]: number;
  [ParamId.CHARACTER_SUBWEAPON_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_CRYSTAL2_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_CAST_TIME_REDUCTION]: number;
  [ParamId.CHARACTER_SUBWEAPON_SCROLL_MP_REDUCTION]: number;

  [ParamId.CHARACTER_ARMOR_DEF]: number;
  [ParamId.CHARACTER_ARMOR_REFINEMENT]: number;
  [ParamId.CHARACTER_ARMOR_TYPE]: ArmorTypeId;
  [ParamId.CHARACTER_ARMOR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ARMOR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ARMOR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_ADDITIONAL_GEAR_DEF]: number;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_REFINEMENT]: number;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SPECIAL_GEAR_DEF]: number;
  [ParamId.CHARACTER_SPECIAL_GEAR_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP]: StatMapBuilder;
  [ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP]: StatMapBuilder;

  [ParamId.CHARACTER_SKILLS_BLADESKILLS_HARDHIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_ASTUTE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_TRIGGERSLASH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_RAMPAGE_ISACTIVE]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_METEORBREAKER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SHUTOUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_LUNARSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SONICBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SPIRALAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTEMPEST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_AURABLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDTECHNIQUES_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_GLADIATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BLADESKILLS_SWIFTATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_POWERSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_BULLSEYE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARROWRAIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNIPE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_CROSSFIRE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_VANQUISHER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_TWINSTORM_ONCOOLDOWN]: boolean;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_RETROGRADESHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_MOEBASHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARALYSISSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SMOKEDUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_ARMBREAK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_PARABOLACANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_SNEAKATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_QUICKDRAW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_DECOYSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHOTSKILLS_FATALSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICARROWS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICJAVELIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICLANCES_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICIMPACT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICFINALE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHRONOSSHIFT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICWALL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBLAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICCRASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICKNIFE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_CHARGE]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_TIMEACTIVE]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MPCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_CHAINCAST_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_POWERWAVE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAXIMIZER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_RAPIDCHARGE_AMOUNTMPRECOVEREDFROMMAXIMIZER]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_ENCHANTEDBARRIERS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICGUARDIANBEAM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_PLAYDEAD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_EXPGAINUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_DROPRATEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SAFEREST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_HPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_FIGHTERSHIGH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SHORTREST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_SOBERANALYSIS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FIRSTAID_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MINIHEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_RECOVERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_SANCTUARY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_LIFERECOVERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_QUICKMOTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MAGICBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_IMMUNITY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_FASTREACTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CONCENTRATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_WHACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DESPERATERESIST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SECRETCHASEATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BATTLESKILLS_SUPERGRIP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ISSEN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_PULSEBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TRIPLETHRUST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_HASSOHAPPA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TENRYURANSEI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KASUMISETSUGETSUKA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_GARYOUTENSEI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHADOWLESSSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_POMMELSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MAGADACHI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_ZANTEISETTETSU_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_SHUKUCHI_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_NUKIUCHISENNOSEN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_MEIKYOUSHISUI_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_KAIRIKIRANSHIN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_DAUNTLESS_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BOUNCINGBLADE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SPINNINGSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_PHANTOMSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_AERIALCUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CROSSPARRYISPARRIED]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CHARGINGSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHADOWSTEP_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SHININGCROSS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_LUNARMISFORTUNE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_TWINBUSTERBLADE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_REFLEX_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_STORMREAPER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_GODSPEED_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_SABERAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_CRESCENTSABER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET]: ResonanceSetId;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDBASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDCANNON_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDUPPERCUT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_DUALSHIELDS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDREPAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_BELAGERUNG_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_PROTECTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_AEGIS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_SHIELDSKILLS_GUARDIAN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_PHYSICALGUARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_GUARDSKILLS_MIRAGEEVASION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_FLASHSTAB_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CANNONSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTAIL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DIVEIMPACT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRAGONTOOTH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DRACONICCHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_DEADLYSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_PUNISHRAY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_STRIKESTAB_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CHRONOSDIVINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_INFINITEDIMENSION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_TORNADOLANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_WARCRYOFSTRUGGLE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HALBERDSKILLS_BUSTERLANCE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SMASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_BASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SHELLBREAK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_HEAVYSMASH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHARIOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ABSTRACTARMS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SONICWAVE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_EARTHBIND_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_TRIPLEKICK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_RUSH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ASURAAURA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_FLASHBLINK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_CHAKRA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_ENERGYCONTROL_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_STRONGCHASEATTACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_MARTIALSKILLS_SLIDE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_QICHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_LIONRAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMALIONRAGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_RAVINGSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMARAVINGSTORM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_INTERNALELIXIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_CLASHOFENMITY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_MIRACLECOMEBACK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_EARTHSHAKER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_KICK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SUNRISEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MAGICARROW_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SATELLITEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_SLEEPTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_BEARTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_LANDMINE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DARKTRAP_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HOMINGSHOT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_DETECTION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_CYCLONEARROW_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_VERTICALAIR_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_MULTIPLEHUNT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_TRIPLEACESHOTS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_HUNTERSKILLS_WOLFSNIPER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSU_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLI_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJUTSUDRILLII_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_BLESS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_GLORIA_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ENHANCEDBLESS_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ROYALHEAL_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYFIST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYLIGHT_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_ETHERBARRIER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_STAFFTHRUST_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_EXORCISM_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_LEVEL]: number;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_HOLYBOOK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_SKILLS_PRIESTSKILLS_NEMESIS_LEVEL]: number;

  [ParamId.CHARACTER_CONSUMABLES]: Stat[]; // statmap for now
  [ParamId.CHARACTER_FOODBUFFS]: Stat[]; // statmap for now

  [ParamId.CHARACTER_AILMENTS_WEAKEN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FLINCH_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_TUMBLE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_STUN_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_KNOCKBACK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_POISON_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_PARALYSIS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_BLINDNESS_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_IGNITION_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FREEZE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_ARMORBREAK_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_SLOW_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_STOP_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FEAR_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_DIZZY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_LETHARGY_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_SILENCE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_BLEED_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_FATIGUE_ISACTIVE]: boolean;
  [ParamId.CHARACTER_AILMENTS_DAZZLED_ISACTIVE]: boolean;

  [ParamId.CHARACTER_REGISLETS_ZEROSTANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAXMPBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICDEFENSEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_PHYSICALDEFENSEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_DODGEBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_ACCURACYBOOST_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL]: number;
  [ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL]: number;
}

// ---------- UTILS --------------

const add = (a: number, b: number) => a + b;
const total = (base: number, percent: number, flat: number) =>
  base * (1 + percent / 100) + flat;

const isUsingStatAccessibleSubWeapon = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ||
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.DAGGER ||
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.NINJUTSU_SCROLL ||
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD;

const isUsingMainOHS = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponTypeId.ONE_HANDED_SWORD;

const isUsingSubOHS = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
  SubWeaponTypeId.ONE_HANDED_SWORD;

const isUsingMainTHS = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
  MainWeaponTypeId.TWO_HANDED_SWORD;

const isUsingMainHAL = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD;

const isUsingDualSwords = (config: IntermediateConfig) =>
  isUsingMainOHS(config) &&
  isUsingSubOHS(config) &&
  config[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL] >
    0;

const isUsingMainBWG = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN;

const isUsingMainKN = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES;

const isUsingSubArrow = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW;

const isNotUsingSubWeapon = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE;

const flattenedStatsFromMainWeapon = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_STATMAP](config);

const flattenedStatsFromMainWeaponCrystal1 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_MAINWEAPON_CRYSTAL1_STATMAP](config);

const flattenedStatsFromMainWeaponCrystal2 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_MAINWEAPON_CRYSTAL2_STATMAP](config);

const flattenedStatsFromSubWeapon = (config: IntermediateConfig) =>
  isUsingStatAccessibleSubWeapon(config) ?
    config[ParamId.CHARACTER_SUBWEAPON_STATMAP](config)
  : [];

const flattenedStatsFromArmor = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_STATMAP](config);

const flattenedStatsFromArmorCrystal1 = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_CRYSTAL1_STATMAP](config);

const flattenedStatsFromArmorCrystal2 = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_CRYSTAL2_STATMAP](config);

const flattenedStatsFromAdditionalGear = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ADDITIONAL_GEAR_STATMAP](config);

const flattenedStatsFromAdditionalGearCrystal1 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL1_STATMAP](config);

const flattenedStatsFromAdditionalGearCrystal2 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_ADDITIONAL_GEAR_CRYSTAL2_STATMAP](config);

const flattenedStatsFromSpecialGear = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SPECIAL_GEAR_STATMAP](config);

const flattenedStatsFromSpecialGearCrystal1 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL1_STATMAP](config);

const flattenedStatsFromSpecialGearCrystal2 = (
  config: IntermediateConfig,
) => config[ParamId.CHARACTER_SPECIAL_GEAR_CRYSTAL2_STATMAP](config);

const flattenedStats = (config: IntermediateConfig) =>
  ([] as Stat[]).concat(
    flattenedStatsFromMainWeapon(config),
    flattenedStatsFromMainWeaponCrystal1(config),
    flattenedStatsFromMainWeaponCrystal2(config),
    flattenedStatsFromSubWeapon(config),
    flattenedStatsFromArmor(config),
    flattenedStatsFromArmorCrystal1(config),
    flattenedStatsFromArmorCrystal2(config),
    flattenedStatsFromAdditionalGear(config),
    flattenedStatsFromAdditionalGearCrystal1(config),
    flattenedStatsFromAdditionalGearCrystal2(config),
    flattenedStatsFromSpecialGear(config),
    flattenedStatsFromSpecialGearCrystal1(config),
    flattenedStatsFromSpecialGearCrystal2(config),
    config[ParamId.CHARACTER_FOODBUFFS],
    config[ParamId.CHARACTER_CONSUMABLES],
  );

// ---------- BASIC STATS --------------

// AGI
const totalPercentAGIFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentAGI = (config: IntermediateConfig) =>
  totalPercentAGIFromEquipment(config);

const totalFlatAGIFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_AGI)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatAGI = (config: IntermediateConfig) =>
  totalFlatAGIFromEquipment(config) + godspeedTotalFlatAGI(config);

const totalAGI = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_BASE_AGI],
    totalPercentAGI(config),
    totalFlatAGI(config),
  );

// DEX
const totalPercentDEXFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentDEX = (config: IntermediateConfig) =>
  totalPercentDEXFromEquipment(config);

const totalFlatDEXFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_DEX)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatDEX = (config: IntermediateConfig) =>
  totalFlatDEXFromEquipment(config);

const totalDEX = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_BASE_DEX],
    totalPercentDEX(config),
    totalFlatDEX(config),
  );

// STR

const totalPercentSTRFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentSTR = (config: IntermediateConfig) =>
  totalPercentSTRFromEquipment(config);

const totalFlatSTRFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_STR)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatSTR = (config: IntermediateConfig) =>
  totalFlatSTRFromEquipment(config);

const totalSTR = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_BASE_STR],
    totalPercentSTR(config),
    totalFlatSTR(config),
  );

// INT

const totalPercentINTFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentINT = (config: IntermediateConfig) =>
  totalPercentINTFromEquipment(config);

const totalFlatINTFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_INT)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatINT = (config: IntermediateConfig) =>
  totalFlatINTFromEquipment(config);

const totalINT = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_BASE_INT],
    totalPercentINT(config),
    totalFlatINT(config),
  );

// VIT

const totalPercentVITFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentVIT = (config: IntermediateConfig) =>
  totalPercentVITFromEquipment(config);

const totalFlatVITFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_VIT)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatVIT = (config: IntermediateConfig) =>
  totalFlatVITFromEquipment(config);

const totalVIT = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_BASE_VIT],
    totalPercentVIT(config),
    totalFlatVIT(config),
  );

// ---------- DERIVED STATS --------------

// accuracy
const totalBaseAccuracy = (config: IntermediateConfig) =>
  Math.floor(config[ParamId.CHARACTER_LEVEL] + totalDEX(config));

const totalPercentAccuracyFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ACCURACY)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentAccuracyFromSkills = (config: IntermediateConfig) =>
  dualSwordMasteryTotalPercentAccuracy(config) +
  dualSwordControlTotalPercentAccuracy(config) +
  samuraiArcheryTotalPercentAccuracy(config) +
  twoHandedTotalPercentAccuracy(config);

const totalPercentAccuracy = (config: IntermediateConfig) =>
  totalPercentAccuracyFromEquipment(config) +
  totalFlatAccuracyFromSkills(config);

const totalFlatAccuracyFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_ACCURACY)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatAccuracyFromSkills = (config: IntermediateConfig) =>
  bushidoTotalFlatAccuracy(config) + accuracyUPTotalFlatAccuracy(config);

const totalFlatAccuracy = (config: IntermediateConfig) =>
  totalFlatAccuracyFromEquipment(config) +
  totalFlatAccuracyFromSkills(config);

const totalAccuracy = (config: IntermediateConfig) =>
  total(
    totalBaseAccuracy(config),
    totalPercentAccuracy(config),
    totalFlatAccuracy(config),
  );

const totalAnticipate = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.ANTICIPATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// ailment resistance

const totalAilmentResistanceFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.AILMENT_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalAilmentResistanceFromMTL = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.MTL ?
    Math.floor(config[ParamId.CHARACTER_PERSONAL_STAT_VALUE] / 3.4)
  : 0;

const totalAilmentResistance = (config: IntermediateConfig) =>
  totalAilmentResistanceFromEquipment(config) +
  totalAilmentResistanceFromMTL(config);

// ASPD

const totalDualWieldBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    100 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 4 +
      (totalAGI(config) + totalSTR(config) - 1) / 5,
  );

const totalOneHandedSwordBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    100 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 4 +
      (totalAGI(config) + totalSTR(config) - 1) / 5,
  );

const totalTwoHandedSwordBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    50 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 2 +
      (totalAGI(config) + totalSTR(config) - 1) / 5,
  );

const totalBowBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    75 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 3 +
      (totalAGI(config) + totalDEX(config) * 2 - 1) / 10,
  );

const totalBowgunBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    30 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 2.2 +
      totalDEX(config) * 0.2,
  );

const totalStaffBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    60 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) +
      (totalAGI(config) + totalINT(config) - 1) / 5,
  );

const totalMagicDeviceBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    90 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 4 +
      (totalINT(config) - 1) / 5,
  );

const totalKnuckleBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    120 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 4.6 +
      totalDEX(config) / 10 +
      totalSTR(config) / 10,
  );

const totalHalberdBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    25 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 3.5 +
      totalSTR(config) * 0.2,
  );

const totalKatanaBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    200 +
      config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 3.9 +
      totalSTR(config) * 0.3,
  );

const totalBareHandBaseASPD = (config: IntermediateConfig) =>
  Math.floor(
    1000 + config[ParamId.CHARACTER_LEVEL] + totalAGI(config) * 9.6,
  );

const totalBaseASPD = (config: IntermediateConfig) =>
  isUsingDualSwords(config) ? totalDualWieldBaseASPD(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseASPD(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseASPD(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseASPD(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseASPD(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseASPD(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseASPD(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseASPD(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD
  ) ?
    totalHalberdBaseASPD(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseASPD(config)
  : totalBareHandBaseASPD(config);

const totalPercentASPDFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ASPD)
    .map((stat) => stat[1])
    .reduce(add, 0) +
  armorTypeIdPercentASPDModifier(config) +
  subWeaponShieldPercentASPDModifier(config);

const totalPercentASPDFromSkills = (config: IntermediateConfig) =>
  quickSlashTotalPercentASPD(config) +
  berserkTotalPercentASPD(config) +
  quickAuraTotalPercentASPD(config);

const totalPercentASPD = (config: IntermediateConfig) =>
  totalPercentASPDFromEquipment(config) +
  totalPercentASPDFromSkills(config);

const totalFlatASPDFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_ASPD)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatASPDFromSkills = (config: IntermediateConfig) =>
  quickSlashTotalFlatASPD(config) +
  berserkTotalFlatASPD(config) +
  martialDisciplineTotalFlatASPD(config) +
  dualSwordControlTotalFlatASPD(config) +
  quickAuraTotalFlatASPD(config) +
  godspeedWieldTotalFlatASPD(config);

const totalFlatASPD = (config: IntermediateConfig) =>
  totalFlatASPDFromEquipment(config) + totalFlatASPDFromSkills(config);

const totalASPD = (config: IntermediateConfig) =>
  total(
    totalBaseASPD(config),
    totalPercentASPD(config),
    totalFlatASPD(config),
  );

// ATK

const totalDualWieldBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalSTR(config) +
  totalDEX(config) * 2 +
  totalAGI(config) +
  totalMainWeaponATK(config);

// A bit skeptical on this one, maybe this does not multiply STR/DEX by 2 if and only if STR/DEX  is equal to 1
const totalOneHandedSwordBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalSTR(config) * 2 +
  totalDEX(config) * 2 +
  totalMainWeaponATK(config);

const totalTwoHandedSwordBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalSTR(config) * 3 +
  totalDEX(config) +
  totalMainWeaponATK(config);

const totalBowBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalDEX(config) * 3 +
  totalSTR(config) +
  totalMainWeaponATK(config);

const totalBowgunBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalDEX(config) * 4 +
  totalMainWeaponATK(config) +
  hunterBowgunTotalBaseATK(config);

const totalStaffBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalSTR(config) * 3 +
  totalINT(config) +
  totalMainWeaponATK(config);

const totalMagicDeviceBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 2 +
  totalAGI(config) * 2 +
  totalMainWeaponATK(config);

const totalKnuckleBaseATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalAGI(config) * 2 +
      totalDEX(config) * 0.5 +
      totalMainWeaponATK(config),
  );

const totalHalberdBaseATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalSTR(config) * 2.5 +
      totalAGI(config) * 1.5 +
      totalMainWeaponATK(config),
  );

const totalKatanaBaseATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalSTR(config) * 1.5 +
      totalDEX(config) * 2.5 +
      totalMainWeaponATK(config),
  );

const totalBareHandBaseATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalSTR(config) +
  1 +
  totalMainWeaponATK(config);

const totalBaseATK = (config: IntermediateConfig) =>
  isUsingDualSwords(config) ? totalDualWieldBaseATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD
  ) ?
    totalHalberdBaseATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseATK(config)
  : totalBareHandBaseATK(config) +
    totalBaseATKValueFromATKUP(config) +
    totalBaseATKValueFromATKDOWN(config);

const totalPercentATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponMagicDevicePercentATKModifier(config);

const totalPercentATKFromSkills = (config: IntermediateConfig) =>
  swordMasteryTotalPercentATK(config) +
  shotMasteryTotalPercentATK(config) +
  martialMasteryTotalPercentATK(config) +
  halberdMasteryTotalPercentATK(config) +
  bushidoTotalPercentATK(config) +
  warCryTotalPercentATK(config);

const totalPercentATK = (config: IntermediateConfig) =>
  totalPercentATKFromEquipment(config) +
  totalPercentATKFromSkills(config) +
  castMasteryTotalPercentATK(config); // this one is a special case, so im not going to include it in skills func;

// this fuhction is only dedicated for wizard atk calculation

const totalFlatATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + physicalAttackBoostTotalFlatATK(config);

const totalFlatATKFromSkills = (config: IntermediateConfig) =>
  attackUPTotalFlatATK(config) + intimidatingPowerTotalFlatATK(config);

const totalFlatATK = (config: IntermediateConfig) =>
  totalFlatATKFromEquipment(config) + totalFlatATKFromSkills(config);

const totalATK = (config: IntermediateConfig) =>
  total(
    totalBaseATK(config),
    totalPercentATK(config),
    totalFlatATK(config),
  );

// cdmg

const totalBaseCriticalDamage = (config: IntermediateConfig) => {
  const agi = totalAGI(config);
  const str = totalSTR(config);

  return agi > str ?
      Math.floor(150 + (agi + str) / 10)
    : Math.floor(150 + str / 5);
};

const totalPercentCriticalDamageFromEquipment = (
  config: IntermediateConfig,
) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_CRITICAL_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentCriticalDamageFromSkills = (
  config: IntermediateConfig,
) => criticalUPTotalPercentCriticalDamage(config);

const totalPercentCriticalDamage = (config: IntermediateConfig) =>
  totalPercentCriticalDamageFromEquipment(config) +
  totalPercentCriticalDamageFromSkills(config);

const totalFlatCriticalDamage = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_CRITICAL_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalCriticalDamage = (config: IntermediateConfig) => {
  const val = total(
    totalBaseCriticalDamage(config),
    totalPercentCriticalDamage(config),
    totalFlatCriticalDamage(config),
  );

  return val > 300 ? 300 + Math.floor((val - 300) / 2) : val; // soft cap
};

const totalMagicCriticalDamageConversion = (config: IntermediateConfig) =>
  25 + spellBurstTotalMagicCriticalDamageConversion(config);

/** NOTE:
 * this is only for display purposes, magic critical damage is dynamic therefore
 * it is not advisable to add this function to the skill calculations due to
 * several factors that can increase the `mcdmg` conversion.
 */
const totalMagicCriticalDamage = (config: IntermediateConfig) =>
  Math.floor(
    100 +
      (totalCriticalDamage(config) - 100) *
        (totalMagicCriticalDamageConversion(config) / 100),
  );

// critrate
const totalBaseCriticalRate = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.CRT ?
    Math.floor(25 + config[ParamId.CHARACTER_PERSONAL_STAT_VALUE] / 3.4)
  : 0;

const totalPercentCriticalRateFromEquipment = (
  config: IntermediateConfig,
) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_CRITICAL_RATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentCriticalRateFromSkills = (config: IntermediateConfig) =>
  criticalSpearTotalPercentCriticalRate(config) +
  dualSwordMasteryTotalPercentCriticalRate(config) +
  dualSwordControlTotalPercentCriticalRate(config);

const totalPercentCriticalRate = (config: IntermediateConfig) =>
  totalPercentCriticalRateFromEquipment(config) +
  totalPercentCriticalRateFromSkills(config);

const totalFlatCriticalRateFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_CRITICAL_RATE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatCriticalRateFromSkills = (config: IntermediateConfig) =>
  criticalSpearTotalFlatCriticalRate(config) +
  twoHandedTotalFlatCriticalRate(config) +
  criticalUPTotalFlatCriticalRate(config);

const totalFlatCriticalRate = (config: IntermediateConfig) =>
  totalFlatCriticalRateFromEquipment(config) +
  totalFlatCriticalRateFromSkills(config);

const totalCriticalRate = (config: IntermediateConfig) => {
  return total(
    totalBaseCriticalRate(config),
    totalPercentCriticalRate(config),
    totalFlatCriticalRate(config),
  );
};

/** NOTE:
 * this is only for display purposes, magic critical damage is dynamic therefore
 * it is not advisable to add this function to the skill calculations due to
 * several factors that can increase the `mcdmg` conversion.
 */
const totalMagicCriticalRateConversion = (config: IntermediateConfig) =>
  spellBurstTotalMagicCriticalRateConversion(config);

const totalMagicCriticalRate = (config: IntermediateConfig) =>
  Math.floor(
    totalCriticalRate(config) *
      (totalMagicCriticalRateConversion(config) / 100),
  );

// add edge cases?
const totalMagicCriticalRateAgainstWeakenedTarget = (
  config: IntermediateConfig,
) => {
  const total =
    totalCriticalRate(config) *
    ((totalMagicCriticalRateConversion(config) + 50) / 100);

  return total;
};

// CSPD
const totalBaseCSPD = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      1.16 * totalAGI(config) +
      2.94 * totalDEX(config),
  );

const totalPercentCSPDFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_CSPD)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentCSPDFromSkills = (config: IntermediateConfig) =>
  magicWarriorMasteryTotalPercentCSPD(config) +
  highCycleTotalPercentCSPD(config) +
  castMasteryTotalPercentCSPD(config);

const totalPercentCSPD = (config: IntermediateConfig) =>
  totalPercentCSPDFromEquipment(config) +
  totalPercentCSPDFromSkills(config);

const totalFlatCSPDFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_CSPD)
    .map((stat) => stat[1])
    .reduce(add, 0) + magicSpeedBoostTotalFlatCSPD(config);

const totalFlatCSPDFromSkills = (config: IntermediateConfig) =>
  magicWarriorMasteryTotalFlatCSPD(config) +
  highCycleTotalFlatCSPD(config) +
  castMasteryTotalFlatCSPD(config) +
  overlimitTotalFlatCSPD(config);

const totalFlatCSPD = (config: IntermediateConfig) =>
  totalFlatCSPDFromEquipment(config) + totalFlatCSPDFromSkills(config);

const totalCSPD = (config: IntermediateConfig) =>
  total(
    totalBaseCSPD(config),
    totalPercentCSPD(config),
    totalFlatCSPD(config),
  );

// DEF
const normalArmorBaseDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalVIT(config) +
  totalEquipmentDEF(config);

const lightArmorBaseDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 0.8 +
      totalVIT(config) * 0.25 +
      totalEquipmentDEF(config),
  );

const heavyArmorBaseDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 1.2 +
      totalVIT(config) * 2 +
      totalEquipmentDEF(config),
  );

const noArmorBaseDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 0.4 +
      totalVIT(config) * 0.1 +
      totalEquipmentDEF(config),
  );

const totalBaseDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseDEF(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseDEF(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseDEF(config)
  : noArmorBaseDEF(config);

const totalPercentDEFFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_DEF)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponArrowPercentDEFModifier(config);

const totalPercentDEFFromSkills = (config: IntermediateConfig) =>
  berserkTotalPercentDEF(config) + forceShieldTotalPercentDEF(config);

const totalPercentDEF = (config: IntermediateConfig) =>
  totalPercentDEFFromEquipment(config) + totalPercentDEFFromSkills(config);

const totalFlatDEFFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_DEF)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatDEFFromSkills = (config: IntermediateConfig) =>
  forceShieldTotalFlatDEF(config) +
  defenseUPTotalFlatDEF(config) +
  defenseMasteryTotalFlatDEF(config);

const totalFlatDEF = (config: IntermediateConfig) =>
  totalFlatDEFFromEquipment(config) + totalFlatDEFFromSkills(config);

const totalDEF = (config: IntermediateConfig) =>
  total(
    totalBaseDEF(config),
    totalPercentDEF(config),
    totalFlatDEF(config),
  );

// Dodge
const normalArmorBaseDodge = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] + totalAGI(config);

const lightArmorBaseDodge = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 1.25 + totalAGI(config) * 1.75,
  ) + 30;

const heavyArmorBaseDodge = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 0.5 + totalAGI(config) * 0.75,
  ) - 15;

const noArmorBaseDodge = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 1.5 + totalAGI(config) * 2,
  ) + 75;

const totalBaseDodge = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseDodge(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseDodge(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseDodge(config)
  : noArmorBaseDodge(config);

const totalPercentDodge = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_DODGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatDodge = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_DODGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + dodgeUPTotalFlatDodge(config);

const totalDodge = (config: IntermediateConfig) =>
  total(
    totalBaseDodge(config),
    totalPercentDodge(config),
    totalFlatDodge(config),
  );

// MATK

const totalDualWieldBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config);

const totalOneHandedSwordBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config);

const totalTwoHandedSwordBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config);

const totalBowBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config);

const totalBowgunBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config);

const totalStaffBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 4 +
  totalDEX(config) +
  totalMainWeaponATK(config);

const totalMagicDeviceBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 4 +
  totalDEX(config) +
  totalMainWeaponATK(config);

const totalKnuckleBaseMATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalINT(config) * 4 +
      totalDEX(config) +
      totalMainWeaponATK(config) * 0.5,
  );

const totalHalberdBaseMATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalINT(config) * 2 +
      totalDEX(config) +
      totalAGI(config),
  );

const totalKatanaBaseMATK = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] +
      totalINT(config) * 1.5 +
      totalDEX(config),
  );

const totalBareHandBaseMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) * 3 +
  totalDEX(config) +
  1;

const totalBaseMATK = (config: IntermediateConfig) =>
  (isUsingDualSwords(config) ? totalDualWieldBaseMATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseMATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseMATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseMATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseMATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseMATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseMATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseMATK(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD
  ) ?
    totalHalberdBaseMATK(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseMATK(config)
  : totalBareHandBaseMATK(config)) +
  totalBaseMATKValueFromMATKUP(config) +
  totalBaseMATKValueFromMATKDOWN(config);

const totalPercentMATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponKnucklePercentMATKModifier(config);

const totalPercentMATKFromSkills = (config: IntermediateConfig) =>
  magicMasteryTotalPercentMATK(config) + prayerTotalPercentMATK(config);

const totalPercentMATK = (config: IntermediateConfig) =>
  totalPercentMATKFromEquipment(config) +
  totalPercentMATKFromSkills(config);

const totalFlatMATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_MATK)
    .map((stat) => stat[1])
    .reduce(add, 0) + magicAttackBoostTotalFlatMATK(config);

const totalFlatMATKFromSkills = (config: IntermediateConfig) =>
  magicUPTotalFlatMATK(config) +
  increasedEnergyTotalFlatMATK(config) +
  magicWarriorMasteryTotalFlatMATK(config) +
  conversionTotalFlatMATK(config);

const totalFlatMATK = (config: IntermediateConfig) =>
  totalFlatMATKFromEquipment(config) + totalFlatMATKFromSkills(config);

const totalMATK = (config: IntermediateConfig) =>
  total(
    totalBaseMATK(config),
    totalPercentMATK(config),
    totalFlatMATK(config),
  );

// MAX HP
const totalBaseMaxHP = (config: IntermediateConfig) =>
  93 +
  Math.floor(
    (totalVIT(config) + 22.4) * (config[ParamId.CHARACTER_LEVEL] / 3),
  ); // need to confirm this

const totalPercentMaxHPFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MAX_HP)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentMaxHPFromSkills = (config: IntermediateConfig) =>
  HPBoostTotalPercentMaxHP(config);

const totalPercentMaxHP = (config: IntermediateConfig) =>
  totalPercentMaxHPFromEquipment(config) +
  totalPercentMaxHPFromSkills(config);

const totalFlatMaxHPFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0) + maxHPBoostTotalFlatMaxMP(config);

const totalFlatMaxHPFromSkills = (config: IntermediateConfig) =>
  bushidoTotalFlatMaxHP(config) +
  HPBoostTotalFlatMaxHP(config) +
  forceShieldTotalFlatMaxHP(config) +
  magicalShieldTotalFlatMaxHP(config);

const totalFlatMaxHP = (config: IntermediateConfig) =>
  totalFlatMaxHPFromEquipment(config) + totalFlatMaxHPFromSkills(config);

const totalMaxHP = (config: IntermediateConfig) =>
  total(
    totalBaseMaxHP(config),
    totalPercentMaxHP(config),
    totalFlatMaxHP(config),
  );

// MAX MP

const totalBaseMaxMP = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_PERSONAL_STAT_ID] === PersonalStatId.TEC ?
    config[ParamId.CHARACTER_PERSONAL_STAT_VALUE] > 0 ?
      Math.floor(
        100 +
          config[ParamId.CHARACTER_LEVEL] +
          totalINT(config) / 10 +
          (config[ParamId.CHARACTER_PERSONAL_STAT_VALUE] - 1),
      )
    : Math.floor(
        100 + config[ParamId.CHARACTER_LEVEL] + totalINT(config) / 10,
      )
  : 0;

const totalPercentMaxMP = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatMaxMPFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_MAX_MP)
    .map((stat) => stat[1])
    .reduce(add, 0) + maxMPBoostTotalFlatMaxMP(config);

const totalFlatMaxMPFromSkills = (config: IntermediateConfig) =>
  bushidoTotalFlatMaxMP(config) + MPBoostTotalFlatMaxMP(config);

const totalFlatMaxMP = (config: IntermediateConfig) =>
  totalFlatMaxMPFromEquipment(config) + totalFlatMaxMPFromSkills(config);

const totalMaxMP = (config: IntermediateConfig) =>
  total(
    totalBaseMaxMP(config),
    totalPercentMaxMP(config),
    totalFlatMaxMP(config),
  );

// MDEF

const normalArmorBaseMDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_LEVEL] +
  totalINT(config) +
  totalEquipmentDEF(config);

const lightArmorBaseMDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 0.8 +
      totalINT(config) * 0.25 +
      totalEquipmentDEF(config),
  );

const heavyArmorBaseMDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 1.2 +
      totalINT(config) * 2 +
      totalEquipmentDEF(config),
  );

const noArmorBaseMDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] * 0.4 +
      totalINT(config) * 0.1 +
      totalEquipmentDEF(config),
  );

const totalBaseMDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorBaseMDEF(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorBaseMDEF(config)
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.NORMAL ?
    normalArmorBaseMDEF(config)
  : noArmorBaseMDEF(config);

const totalPercentMDEFFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MDEF)
    .map((stat) => stat[1])
    .reduce(add, 0) + subWeaponArrowPercentMDEFModifier(config);

const totalPercentMDEFFromSkills = (config: IntermediateConfig) =>
  berserkTotalPercentMDEF(config) + magicalShieldTotalPercentMDEF(config);

const totalPercentMDEF = (config: IntermediateConfig) =>
  totalPercentMDEFFromEquipment(config) +
  totalPercentMDEFFromSkills(config);

const totalFlatMDEFFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_MDEF)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatMDEFFromSkills = (config: IntermediateConfig) =>
  magicalShieldTotalFlatMDEF(config) +
  defenseUPTotalFlatMDEF(config) +
  defenseMasteryTotalFlatMDEF(config);

const totalFlatMDEF = (config: IntermediateConfig) =>
  totalFlatMDEFFromEquipment(config) + totalFlatMDEFFromSkills(config);

const totalMDEF = (config: IntermediateConfig) =>
  total(
    totalBaseMDEF(config),
    totalPercentMDEF(config),
    totalFlatMDEF(config),
  );

// modifiers
const armorTypeIdPercentASPDModifier = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ? 50
  : config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ? -50
  : 0;

const subWeaponMagicDevicePercentATKModifier = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    -15 + magicWarriorMasteryTotalPercentATKPenaltyReduction(config)
  : 0;

const subWeaponShieldPercentASPDModifier = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    -50 + shieldMasteryPercentASPDPenaltyReduction(config)
  : 0;

const subWeaponKnucklePercentMATKModifier = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KNUCKLES ?
    -15
  : 0;

const subWeaponArrowPercentMDEFModifier = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ?
    -25
  : 0;

const subWeaponArrowPercentDEFModifier = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.ARROW ?
    -25
  : 0;

// stability

const totalDualWieldBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(config) + totalDEX(config) * 3) / 40,
  );

const totalOneHandedSwordBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(config) + totalDEX(config) * 3) / 40,
  );

const totalTwoHandedSwordBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(config) / 10,
  );

const totalBowBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(config) + totalDEX(config)) / 20,
  );

const totalBowgunBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalSTR(config) / 20,
  );

const totalStaffBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalSTR(config) / 20,
  );

const totalMagicDeviceBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(config) / 10,
  );

const totalKnuckleBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] + totalDEX(config) / 40,
  );

const totalHalberdBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(config) + totalDEX(config)) / 20,
  );

const totalKatanaBaseStability = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_STABILITY] +
      (totalSTR(config) * 3 + totalDEX(config)) / 40,
  );
const totalBareHandBaseStability = (config: IntermediateConfig) =>
  Math.floor(1 + totalDEX(config) / 3);

const totalBaseStability = (config: IntermediateConfig) =>
  isUsingDualSwords(config) ? totalDualWieldBaseStability(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.ONE_HANDED_SWORD
  ) ?
    totalOneHandedSwordBaseStability(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.TWO_HANDED_SWORD
  ) ?
    totalTwoHandedSwordBaseStability(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW ?
    totalBowBaseStability(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOWGUN ?
    totalBowgunBaseStability(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ?
    totalStaffBaseStability(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
    MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    totalMagicDeviceBaseStability(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES
  ) ?
    totalKnuckleBaseStability(config)
  : (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.HALBERD
  ) ?
    totalHalberdBaseStability(config)
  : config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    totalKatanaBaseStability(config)
  : totalBareHandBaseStability(config);

// --------------- Equipment stats ---------------

// defensive
const totalEquipmentDEF = (config: IntermediateConfig) =>
  (config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    config[ParamId.CHARACTER_SUBWEAPON_DEF]
  : 0) +
  config[ParamId.CHARACTER_ARMOR_DEF] +
  config[ParamId.CHARACTER_ADDITIONAL_GEAR_DEF] +
  config[ParamId.CHARACTER_SPECIAL_GEAR_DEF];

const totalRefinementReduction = (config: IntermediateConfig) =>
  ((
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ||
    (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE && // magic skin
      magicSkinLevel(config) > 0)
  ) ?
    config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0) +
  config[ParamId.CHARACTER_ARMOR_REFINEMENT] +
  config[ParamId.CHARACTER_ADDITIONAL_GEAR_REFINEMENT];

// element
const mainWeaponElement = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_STATMAP](config)
    .filter(
      (stat) =>
        (stat[0] === StatId.EARTH_ELEMENT ||
          stat[0] === StatId.FIRE_ELEMENT ||
          stat[0] === StatId.WIND_ELEMENT ||
          stat[0] === StatId.WATER_ELEMENT ||
          stat[0] === StatId.DARK_ELEMENT ||
          stat[0] === StatId.LIGHT_ELEMENT) &&
        stat[1] > 0,
    )
    .map((stat) =>
      stat[0] === StatId.EARTH_ELEMENT ? "earth"
      : stat[0] === StatId.FIRE_ELEMENT ? "fire"
      : stat[0] === StatId.WIND_ELEMENT ? "wind"
      : stat[0] === StatId.WATER_ELEMENT ? "water"
      : stat[0] === StatId.DARK_ELEMENT ? "dark"
      : stat[0] === StatId.LIGHT_ELEMENT ? "light"
      : "neutral",
    )
    .reduce((prev, curr) => (curr !== "neutral" ? curr : prev), "neutral");

const subWeaponElement = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_STATMAP](config)
    .filter(
      (stat) =>
        (stat[0] === StatId.EARTH_ELEMENT ||
          stat[0] === StatId.FIRE_ELEMENT ||
          stat[0] === StatId.WIND_ELEMENT ||
          stat[0] === StatId.WATER_ELEMENT ||
          stat[0] === StatId.DARK_ELEMENT ||
          stat[0] === StatId.LIGHT_ELEMENT) &&
        stat[1] > 0,
    )
    .map((stat) =>
      stat[0] === StatId.EARTH_ELEMENT ? "earth"
      : stat[0] === StatId.FIRE_ELEMENT ? "fire"
      : stat[0] === StatId.WIND_ELEMENT ? "wind"
      : stat[0] === StatId.WATER_ELEMENT ? "water"
      : stat[0] === StatId.DARK_ELEMENT ? "dark"
      : stat[0] === StatId.LIGHT_ELEMENT ? "light"
      : "neutral",
    )
    .reduce((prev, curr) => (curr !== "neutral" ? curr : prev), "neutral");

// equipment related stability

const totalStabilityFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.STABILITY)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalStabilityFromSkills = (config: IntermediateConfig) =>
  berserkTotalStability(config) +
  samuraiArcheryTotalStability(config) +
  twoHandedTotalStability(config);

const totalStability = (config: IntermediateConfig) =>
  totalBaseStability(config) +
  totalStabilityFromEquipment(config) +
  totalStabilityFromSkills(config);

/** graze effect lacking here */
const totalMinimumStability = (config: IntermediateConfig) =>
  totalStability(config);

/** graze effect lacking here */
const totalMaximumStability = (config: IntermediateConfig) => 100;

const totalMagicStability = (config: IntermediateConfig) =>
  Math.floor((100 + totalStability(config)) / 2);

const totalMinimumMagicStability = (config: IntermediateConfig) =>
  totalMagicStability(config);

const totalMaximumMagicStability = (config: IntermediateConfig) =>
  totalMagicStability(config) > 90 ?
    totalMagicStability(config) - 90 + 100
  : 100;

// weapon atk

const totalMainWeaponRefinementBonusMainWeaponATK = (
  config: IntermediateConfig,
) =>
  Math.floor(
    config[ParamId.CHARACTER_MAINWEAPON_ATK] *
      (config[ParamId.CHARACTER_MAINWEAPON_REFINEMENT] ** 2 / 100),
  ) + config[ParamId.CHARACTER_MAINWEAPON_REFINEMENT];
const totalSubWeaponRefinementBonusSubWeaponATK = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ?
    Math.floor(
      config[ParamId.CHARACTER_SUBWEAPON_ATK] *
        (config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] ** 2 / 200),
    ) + config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0;

const totalPercentWeaponATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_WEAPON_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentWeaponATKFromSkills = (config: IntermediateConfig) =>
  swordMasteryTotalPercentWeaponATK(config) +
  shotMasteryTotalPercentWeaponATK(config) +
  martialMasteryTotalPercentWeaponATK(config) +
  magicMasteryTotalPercentWeaponATK(config) +
  halberdMasteryTotalPercentWeaponATK(config) +
  bushidoTotalPercentWeaponATK(config) +
  twoHandedTotalPercentWeaponATK(config) +
  braveAuraTotalPercentWeaponATK(config) +
  busterBladeTotalPercentWeaponATK(config);

const totalPercentWeaponATK = (config: IntermediateConfig) =>
  totalPercentWeaponATKFromEquipment(config) +
  totalPercentWeaponATKFromSkills(config);

const totalFlatWeaponATKFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_WEAPON_ATK)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatWeaponATKFromSkills = (config: IntermediateConfig) =>
  samuraiArcheryTotalFlatWeaponATK(config) +
  unarmedMasteryTotalFlatWeaponATK(config);

const totalFlatWeaponATK = (config: IntermediateConfig) =>
  totalFlatWeaponATKFromEquipment(config) +
  totalFlatWeaponATKFromSkills(config);

const totalMainWeaponATK = (config: IntermediateConfig) =>
  total(
    config[ParamId.CHARACTER_MAINWEAPON_ATK],
    totalPercentWeaponATK(config) +
      flashBlastTotalPercentMainWeaponATK(config),
    totalFlatWeaponATK(config) +
      totalMainWeaponRefinementBonusMainWeaponATK(config),
  );

const totalSubWeaponATK = (config: IntermediateConfig) =>
  isUsingDualSwords(config) ?
    total(
      config[ParamId.CHARACTER_SUBWEAPON_ATK],
      totalPercentWeaponATK(config),
      totalFlatWeaponATK(config),
    ) + totalSubWeaponRefinementBonusSubWeaponATK(config)
  : 0;

// non-derived

// damage to element/ dte

const totalMagicDamageToElementBasedFromINT = (
  config: IntermediateConfig,
) => Math.floor(config[ParamId.CHARACTER_BASE_INT] / 10);

const totalDamageToDark = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_DARK)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDamageToLight = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_LIGHT)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDamageToFire = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_FIRE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDamageToEarth = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_EARTH)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDamageToWind = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_WIND)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDamageToWater = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DAMAGE_TO_WATER)
    .map((stat) => stat[1])
    .reduce(add, 0);

// evasion
const totalBaseEvasionRecharge = (config: IntermediateConfig) => {
  // TODO
};

const totalPercentEvasionRecharge = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.EVASION_RECHARGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + godspeedWieldTotalPercentEvasionRecharge(config);

// NOTE: Not sure for this calculations atm, so i might not be finishing this for now

// guard
const totalBaseGuardPower = (config: IntermediateConfig) =>
  Math.min(
    [
      config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
        5000
      : 0,
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
        7500
      : 0,
      (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.TWO_HANDED_SWORD
      ) ?
        5000
      : 0,
      (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.HALBERD
      ) ?
        2500
      : 0,
      hiddenTalentTotalBaseGuardPower(config),
    ].reduce(add, 0),
    10000,
  );

const totalPercentGuardPower = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.GUARD_POWER)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalGuardPower = (config: IntermediateConfig) =>
  totalBaseGuardPower(config) * (totalPercentGuardPower(config) / 100);

const totalBaseGuardRecharge = (config: IntermediateConfig) =>
  [
    config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ? 25 : 0,
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
      75
    : 0,
    (
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.TWO_HANDED_SWORD
    ) ?
      50
    : 0,
    (
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.HALBERD
    ) ?
      25
    : 0,
    hiddenTalentTotalBaseGuardRecharge(config),
  ].reduce(add, 0);

const totalPercentGuardRecharge = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.GUARD_RECHARGE)
    .map((stat) => stat[1])
    .reduce(add, 0) + heavyArmorMasteryTotalGuardRecharge(config);

const totalGuardRecharge = (config: IntermediateConfig) =>
  Math.floor(
    (totalBaseGuardRecharge(config) * totalPercentGuardRecharge(config)) /
      100,
  );

const totalGuardBreak = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.GUARD_BREAK)
    .map((stat) => stat[1])
    .reduce(add, 0);

// pierce
const totalMagicPierce = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.MAGIC_PIERCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPhysicalPierce = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PHYSICAL_PIERCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// range damage
const totalLongRangeDamage = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.LONG_RANGE_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalShortRangeDamage = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.SHORT_RANGE_DAMAGE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// resistance
const totalPhysicalResistanceFromEquipment = (
  config: IntermediateConfig,
) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PHYSICAL_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPhysicalResistanceFromSkills = (config: IntermediateConfig) =>
  forceShieldTotalPhysicalResistance(config) +
  godspeedWieldTotalPhysicalResistance(config) +
  siphonBarrierTotalPhysicalResistance(config);

const totalPhysicalResistance = (config: IntermediateConfig) =>
  totalPhysicalResistanceFromEquipment(config) +
  totalPhysicalResistanceFromSkills(config);

const totalMagicResistanceFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.MAGIC_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalMagicResistanceFromSkills = (config: IntermediateConfig) =>
  magicalShieldTotalMagicResistance(config) +
  godspeedWieldTotalMagicResistance(config) +
  siphonBarrierTotalMagicResistance(config);

const totalMagicResistance = (config: IntermediateConfig) =>
  totalMagicResistanceFromEquipment(config) +
  totalMagicResistanceFromSkills(config);

const totalLightResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.LIGHT_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalDarkResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.DARK_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFireResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FIRE_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalEarthResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.EARTH_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalWindResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.WIND_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalWaterResistance = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.WATER_RESISTANCE)
    .map((stat) => stat[1])
    .reduce(add, 0);

// -------------SPECIAL STATS -------------

// ampr
const totalBaseAMPR = (config: IntermediateConfig) =>
  Math.floor(10 + totalMaxMP(config) / 100);

const totalPercentAMPR = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ATTACK_MP_RECOVERY)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatAMPRFromEquipment = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_ATTACK_MP_RECOVERY)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalFlatAMPRFromSkills = (config: IntermediateConfig) =>
  aggravateTotalFlatAMPR(config) +
  etherFlareTotalFlatAMPR(config) +
  ultimaQiChargeTotalFlatAMPR(config);

const totalFlatAMPR = (config: IntermediateConfig) =>
  totalFlatAMPRFromEquipment(config) + totalFlatAMPRFromSkills(config);

const totalAMPR = (config: IntermediateConfig) =>
  total(
    totalBaseAMPR(config),
    totalPercentAMPR(config),
    totalFlatAMPR(config),
  );

// ATK DOWN

const totalBaseATKValueFromATKDOWNAGI = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * config[ParamId.CHARACTER_BASE_AGI];

const totalBaseATKValueFromATKDOWNDEX = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_DEX];

const totalBaseATKValueFromATKDOWNINT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_INT];

const totalBaseATKValueFromATKDOWNSTR = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_STR];

const totalBaseATKValueFromATKDOWNVIT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_DOWN_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_VIT];

const totalBaseATKValueFromATKDOWN = (config: IntermediateConfig) =>
  [
    totalBaseATKValueFromATKDOWNAGI(config),
    totalBaseATKValueFromATKDOWNDEX(config),
    totalBaseATKValueFromATKDOWNINT(config),
    totalBaseATKValueFromATKDOWNSTR(config),
    totalBaseATKValueFromATKDOWNVIT(config),
  ].reduce(add);

// ATK UP

const totalBaseATKValueFromATKUPAGI = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_UP_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * config[ParamId.CHARACTER_BASE_AGI];

const totalBaseATKValueFromATKUPDEX = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_UP_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_DEX];

const totalBaseATKValueFromATKUPINT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_UP_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_INT];

const totalBaseATKValueFromATKUPSTR = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_UP_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_STR];

const totalBaseATKValueFromATKUPVIT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.ATK_UP_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_VIT];

const totalBaseATKValueFromATKUP = (config: IntermediateConfig) =>
  [
    totalBaseATKValueFromATKUPAGI(config),
    totalBaseATKValueFromATKUPDEX(config),
    totalBaseATKValueFromATKUPINT(config),
    totalBaseATKValueFromATKUPSTR(config),
    totalBaseATKValueFromATKUPVIT(config),
  ].reduce(add);

// MATK DOWN
const totalBaseMATKValueFromMATKDOWNAGI = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * config[ParamId.CHARACTER_BASE_AGI];

const totalBaseMATKValueFromMATKDOWNDEX = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_DEX];

const totalBaseMATKValueFromMATKDOWNINT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_INT];

const totalBaseMATKValueFromMATKDOWNSTR = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_STR];

const totalBaseMATKValueFromMATKDOWNVIT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_DOWN_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_VIT];

const totalBaseMATKValueFromMATKDOWN = (config: IntermediateConfig) =>
  [
    totalBaseMATKValueFromMATKDOWNAGI(config),
    totalBaseMATKValueFromMATKDOWNDEX(config),
    totalBaseMATKValueFromMATKDOWNINT(config),
    totalBaseMATKValueFromMATKDOWNSTR(config),
    totalBaseMATKValueFromMATKDOWNVIT(config),
  ].reduce(add);

// MATK UP

const totalBaseMATKValueFromMATKUPAGI = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_UP_AGI)
      .map((stat) => stat[1])
      .reduce(add, 0) / 100,
  ) * config[ParamId.CHARACTER_BASE_AGI];

const totalBaseMATKValueFromMATKUPDEX = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_UP_DEX)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_DEX];

const totalBaseMATKValueFromMATKUPINT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_UP_INT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_INT];

const totalBaseMATKValueFromMATKUPSTR = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_UP_STR)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_STR];

const totalBaseMATKValueFromMATKUPVIT = (config: IntermediateConfig) =>
  Math.floor(
    flattenedStats(config)
      .filter((stat) => stat[0] === StatId.MATK_UP_VIT)
      .map((stat) => stat[1])
      .reduce(add, 0) /
      100 /
      100,
  ) * config[ParamId.CHARACTER_BASE_VIT];

const totalBaseMATKValueFromMATKUP = (config: IntermediateConfig) =>
  [
    totalBaseMATKValueFromMATKUPAGI(config),
    totalBaseMATKValueFromMATKUPDEX(config),
    totalBaseMATKValueFromMATKUPINT(config),
    totalBaseMATKValueFromMATKUPSTR(config),
    totalBaseMATKValueFromMATKUPVIT(config),
  ].reduce(add, 0);

// CAST TIME REDUCTION

const totalCastTimeReduction = (config: IntermediateConfig) =>
  Math.floor(
    totalCSPD(config) > 1000 ?
      50 + ((totalCSPD(config) - 1000) / 90) * 0.5
    : totalCSPD(config) / 20,
  );

// motion speed
const totalMotionSpeed = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.MOTION_SPEED)
    .map((stat) => stat[1])
    .reduce(add, 0) + Math.floor((totalASPD(config) - 1000) / 180);

// unsheathe attack
const totalPercentUnsheatheAttackFromEquipment = (
  config: IntermediateConfig,
) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_UNSHEATHE_ATTACK)
    .map((stat) => stat[1])
    .reduce(add, 0);

const totalPercentUnsheatheAttackFromSkills = (
  config: IntermediateConfig,
) =>
  godspeedTotalPercentUnsheatheAttack(config) +
  flashBlastTotalPercentUnsheatheAttack(config);

const totalPercentUnsheatheAttack = (config: IntermediateConfig) =>
  totalPercentUnsheatheAttackFromEquipment(config) +
  totalPercentUnsheatheAttackFromSkills(config);

const totalFlatUnsheatheAttack = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.FLAT_UNSHEATHE_ATTACK)
    .map((stat) => stat[1])
    .reduce(add, 0);

// ---------- SKILLS AND PASSIVES --------------

// barehand skills

const hiddenTalentLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_HIDDENTALENT_LEVEL];

const hiddenTalentTotalBaseGuardPower = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    hiddenTalentLevel(config) * 500
  : 0;

const hiddenTalentTotalBaseGuardRecharge = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    5 + 2 * hiddenTalentLevel(config)
  : 0;

const hiddenTalentTotalEvasionCount = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(2 + hiddenTalentLevel(config) * 0.4)
  : 0;

const hiddenTalentTotalBaseEvasionRecharge = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    hiddenTalentLevel(config) < 10 ?
      0.1 * hiddenTalentLevel(config)
    : 10
  : 0;

const hiddenTalentTotalCostQiReductionForNonBareHandSkills = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(0.5 * hiddenTalentLevel(config))
  : 0;

const ultimaQiChargeLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_ULTIMAQICHARGE_LEVEL];

const ultimaQiChargeTotalFlatAMPR = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(ultimaQiChargeLevel(config) * 0.5)
  : 0;

const ultimaQiChargeTotalCostQiReductionForNonBareHandSkills = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    20 - ultimaQiChargeLevel(config)
  : 0;

const unarmedMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BAREHANDSKILLS_UNARMEDMASTERY_LEVEL];

const unarmedMasteryTotalFlatWeaponATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    Math.floor(
      (config[ParamId.CHARACTER_LEVEL] * unarmedMasteryLevel(config)) / 10,
    )
  : 0;

const unarmedMasteryTotalQiChargeLimit = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BARE_HAND &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
  ) ?
    unarmedMasteryLevel(config) < 10 ?
      10 + unarmedMasteryLevel(config) * 10
    : 100 + config[ParamId.CHARACTER_LEVEL]
  : 0;

// blade skills

const berserkIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_ISACTIVE];
const berserkLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_BERSERK_LEVEL];

const berserkTotalPercentASPD = (config: IntermediateConfig) =>
  berserkIsActive(config) ? berserkLevel(config) * 10 : 0;

const berserkTotalFlatASPD = (config: IntermediateConfig) =>
  berserkIsActive(config) ? berserkLevel(config) * 100 : 0;

const berserkTotalFlatCriticalRate = (config: IntermediateConfig) =>
  berserkIsActive(config) ? Math.floor(berserkLevel(config) * 2.5) : 0;

const berserkTotalStability = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) || isUsingMainTHS(config) ?
      Math.floor(berserkLevel(config) * 2.5)
    : berserkLevel(config) * 5
  : 0;

const berserkTotalPercentDEF = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) && !isUsingDualSwords(config) ?
      Math.floor((100 - berserkLevel(config)) / 2)
    : 100 - berserkLevel(config)
  : 0;

const berserkTotalPercentMDEF = (config: IntermediateConfig) =>
  berserkIsActive(config) ?
    isUsingMainOHS(config) && !isUsingDualSwords(config) ?
      Math.floor((100 - berserkLevel(config)) / 2)
    : 100 - berserkLevel(config)
  : 0;

const busterBladeLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_LEVEL];

const busterBladeIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_BUSTERBLADE_ISACTIVE];

const busterBladeTotalPercentWeaponATK = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    busterBladeIsActive(config) ? busterBladeLevel(config)
    : 0
  : 0;

const quickSlashLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_QUICKSLASH_LEVEL];

const quickSlashTotalPercentASPD = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    quickSlashLevel(config)
  : 0;

const quickSlashTotalFlatASPD = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    quickSlashLevel(config) * 10
  : 0;

const swordMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_SWORDMASTERY_LEVEL];

const swordMasteryTotalPercentATK = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    swordMasteryLevel(config) >= 8 ? 3
    : swordMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

const swordMasteryTotalPercentWeaponATK = (config: IntermediateConfig) =>
  isUsingMainOHS(config) || isUsingMainTHS(config) ?
    swordMasteryLevel(config) * 3
  : 0;

const warCryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_LEVEL];

const warCryIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BLADESKILLS_WARCRY_ISACTIVE];

const warCryTotalPercentATK = (config: IntermediateConfig) =>
  warCryIsActive(config) ?
    isUsingMainTHS(config) ? warCryLevel(config) * 10 + 5
    : warCryLevel(config) * 10
  : 0;

// dualswords skills

const dualSwordControlLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDCONTROL_LEVEL];

const dualSwordControlTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? 5 + dualSwordControlLevel(config) * 3 : 0;

const dualSwordControlTotalPercentAccuracy = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? 5 + dualSwordControlLevel(config) * 3 : 0;

const dualSwordControlTotalFlatASPD = (config: IntermediateConfig) =>
  isUsingDualSwords(config) ? 50 * dualSwordControlLevel(config) : 0;

const dualSwordMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_DUALSWORDMASTERY_LEVEL];

const dualSwordMasteryTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? -55 + dualSwordMasteryLevel(config) * 3 : 0;

const dualSwordMasteryTotalPercentAccuracy = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ? -55 + dualSwordMasteryLevel(config) * 3 : 0;

const flashBlastLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_LEVEL];

const flashBlastIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_DUALSWORDSKILLS_FLASHBLAST_ISACTIVE];

const flashBlastTotalPercentUnsheatheAttack = (
  config: IntermediateConfig,
) => (flashBlastIsActive(config) ? flashBlastLevel(config) : 0);

const flashBlastTotalPercentMainWeaponATK = (
  config: IntermediateConfig,
) =>
  flashBlastIsActive(config) ?
    isUsingDualSwords(config) && flashBlastLevel(config) > 0 ?
      25
    : 0
  : 0;

const godspeedLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

const godspeedTotalFlatAGI = (config: IntermediateConfig) =>
  godspeedLevel(config) + Math.max(godspeedLevel(config) - 5, 0);

const godspeedTotalPercentUnsheatheAttack = (
  config: IntermediateConfig,
) =>
  isUsingDualSwords(config) ?
    godspeedLevel(config) + 15
  : godspeedLevel(config) + 5;

// guard skills

const advancedEvasionLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDEVASION_LEVEL];

const advancedEvasionTotalEvasionRecharge = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    advancedEvasionLevel(config)
  : 0;

const advancedGuardLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_GUARDSKILLS_ADVANCEDGUARD_LEVEL];

const advancedGuardTotalGuardRecharge = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    advancedGuardLevel(config)
  : 0;

const advancedGuardTotalGuardPower = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    Math.floor((1 + advancedGuardLevel(config)) / 2)
  : 0;

const heavyArmorMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_GUARDSKILLS_HEAVYARMORMASTERY_LEVEL];

const heavyArmorMasteryTotalGuardRecharge = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.HEAVY ?
    heavyArmorMasteryLevel(config)
  : 0;

const lightArmorMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_GUARDSKILLS_LIGHTARMORMASTERY_LEVEL];

const lightArmorMasteryTotalEvasionRecharge = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_ARMOR_TYPE] === ArmorTypeId.LIGHT ?
    lightArmorMasteryLevel(config)
  : 0;

const criticalSpearLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_CRITICALSPEAR_LEVEL];

const criticalSpearTotalPercentCriticalRate = (
  config: IntermediateConfig,
) =>
  isUsingMainHAL(config) ?
    Math.floor(criticalSpearLevel(config) * 0.5)
  : 0;

const criticalSpearTotalFlatCriticalRate = (config: IntermediateConfig) =>
  isUsingMainHAL(config) ?
    Math.floor(criticalSpearLevel(config) * 0.5 + 0.5)
  : 0;

const godspeedWieldStacks = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_STACKS];

const godspeedWieldLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_LEVEL];

const godspeedWieldIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_GODSPEEDWIELD_ISACTIVE];

const godspeedWieldTotalFlatASPD = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      30 * godspeedWieldLevel(config) * godspeedWieldStacks(config) +
      100 * godspeedWieldStacks(config)
    : 30 * godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

const godspeedWieldTotalMotionSpeed = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ?
    godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

const almightyWieldLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_ALMIGHTYWIELD_LEVEL];

const godspeedWieldTotalPhysicalResistance = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      -(
        (100 - 3 * godspeedWieldLevel(config)) *
          godspeedWieldStacks(config) +
        45 * godspeedWieldStacks(config) +
        Math.floor(almightyWieldLevel(config) * 0.5) *
          godspeedWieldStacks(config)
      )
    : -(
        (100 - 3 * godspeedWieldLevel(config)) *
        godspeedWieldStacks(config)
      )
  : 0;

const godspeedWieldTotalMagicResistance = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ?
    isUsingMainHAL(config) ?
      -(
        (100 - 3 * godspeedWieldLevel(config)) *
          godspeedWieldStacks(config) +
        45 * godspeedWieldStacks(config) +
        Math.floor(almightyWieldLevel(config) * 0.5) *
          godspeedWieldStacks(config)
      )
    : -(
        (100 - 3 * godspeedWieldLevel(config)) *
        godspeedWieldStacks(config)
      )
  : 0;

const godspeedWieldTotalFlatMaxMP = (config: IntermediateConfig) =>
  godspeedWieldIsActive(config) ? -(100 * godspeedWieldStacks(config)) : 0;

const godspeedWieldTotalPercentEvasionRecharge = (
  config: IntermediateConfig,
) =>
  godspeedWieldIsActive(config) ?
    godspeedWieldLevel(config) * godspeedWieldStacks(config)
  : 0;

const halberdMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_HALBERDMASTERY_LEVEL];

const halberdMasteryTotalPercentATK = (config: IntermediateConfig) =>
  isUsingMainHAL(config) ?
    halberdMasteryLevel(config) >= 8 ? 3
    : halberdMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

const halberdMasteryTotalPercentWeaponATK = (
  config: IntermediateConfig,
) => (isUsingMainHAL(config) ? halberdMasteryLevel(config) * 3 : 0);

const quickAuraLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_LEVEL];

const quickAuraIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HALBERDSKILLS_QUICKAURA_ISACTIVE];

const quickAuraTotalFlatASPD = (config: IntermediateConfig) =>
  quickAuraIsActive(config) ? quickAuraLevel(config) * 50 : 0;

const quickAuraTotalPercentASPD = (config: IntermediateConfig): number =>
  quickAuraIsActive(config) ? Math.floor(quickAuraLevel(config) * 2.5) : 0;

// hunter skills

const hunterBowgunLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_HUNTERSKILLS_HUNTERBOWGUN_LEVEL];

const hunterBowgunTotalBaseATK = (config: IntermediateConfig) =>
  (
    isUsingMainBWG(config) &&
    !(isUsingSubArrow(config) || isNotUsingSubWeapon(config))
  ) ?
    (1 + (Math.floor(hunterBowgunLevel(config) * 1.5) * 5) / 3 / 100) *
    config[ParamId.CHARACTER_MAINWEAPON_ATK]
  : 0;

// magic blade skills
const conversionLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL];

const conversionTotalFlatMATK = (config: IntermediateConfig) =>
  (
    isUsingMainTHS(config) ||
    isUsingMainBWG(config) ||
    isUsingMainKN(config) ||
    isUsingMainOHS(config)
  ) ?
    Math.floor(
      (conversionLevel(config) ** 2 / 100) *
        (isUsingMainKN(config) ?
          totalMainWeaponATK(config) * 0.5
        : totalMainWeaponATK(config)),
    )
  : 0;

const dualBringerLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL];
const dualBringerIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_ISACTIVE];

// refactor this
const totalNumberOfMagicBladeSkills = (config: IntermediateConfig) =>
  [
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_CONVERSION_LEVEL] >
      0
    ) ?
      1
    : 0,
    config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL] > 0 ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDSPELL_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_DUALBRINGER_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ELEMENTSLASH_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTSWORD_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ENCHANTEDBURST_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    (
      config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_UNIONSWORD_LEVEL] >
      0
    ) ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_TELEPORT_LEVEL] > 0 ?
      1
    : 0,
    (
      config[
        ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONRECALL_LEVEL
      ] > 0
    ) ?
      1
    : 0,
    config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_FLOATDASH_LEVEL] > 0 ?
      1
    : 0,
    config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL] > 0 ?
      1
    : 0,
  ].reduce(add, 0);

const totalNegativePercentATK = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_ATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);
// + subWeaponMagicDevicePercentATKModifier(config);

const totalNegativePercentMATK = (config: IntermediateConfig) =>
  flattenedStats(config)
    .filter((stat) => stat[0] === StatId.PERCENT_MATK && stat[1] < 0)
    .map((stat) => stat[1])
    .reduce(add, 0);

const dualBringerTotalSkillModifier = (config: IntermediateConfig) =>
  Math.min(
    100,
    dualBringerLevel(config) * totalNumberOfMagicBladeSkills(config),
  );

const dualBringerTotalATK = (config: IntermediateConfig) =>
  (
    dualBringerIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.floor(
      Math.max(
        0,
        (totalMATK(config) - totalATK(config)) *
          ((100 - Math.abs(totalNegativePercentATK(config))) / 100) *
          (dualBringerTotalSkillModifier(config) / 100) -
          (totalATK(config) * Math.abs(totalNegativePercentATK(config))) /
            100,
      ),
    )
  : 0;

const dualBringerTotalMATK = (config: IntermediateConfig) =>
  (
    dualBringerIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.floor(
      Math.max(
        0,
        (totalATK(config) - totalMATK(config)) *
          ((100 - Math.abs(totalNegativePercentMATK(config))) / 100) *
          (dualBringerTotalSkillModifier(config) / 100) -
          (totalMATK(config) *
            Math.abs(totalNegativePercentMATK(config))) /
            100,
      ),
    )
  : 0;

const dualBringerTotalDuration = (config: IntermediateConfig) =>
  (
    dualBringerIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    Math.max(10, Math.floor(config[ParamId.CHARACTER_SUBWEAPON_ATK] / 10))
  : 0;

const dualBringerTotalMagicCriticalDamageConversion = (
  config: IntermediateConfig,
) =>
  (
    dualBringerIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    totalINT(config) > totalSTR(config)
  ) ?
    Math.floor(dualBringerLevel(config) * 2.5)
  : 0;

const dualBringerTotalMagicCriticalRateConversion = (
  config: IntermediateConfig,
) =>
  (
    dualBringerIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    totalSTR(config) > totalINT(config)
  ) ?
    Math.floor(dualBringerLevel(config) * 2.5)
  : 0;

const etherFlareLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_LEVEL];

const etherFlareInflictedIgniteOnEnemy = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_ETHERFLARE_ISACTIVE];

const etherFlareTotalFlatAMPR = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    etherFlareInflictedIgniteOnEnemy(config)
  ) ?
    15 +
    Math.floor(etherFlareLevel(config) / 6) * 5 +
    Math.floor(etherFlareLevel(config) / 5) * 5
  : 0;

const magicSkinLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICSKIN_LEVEL];

const magicSkinTotalRefinementReduction = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE && magicSkinLevel(config) > 0
  ) ?
    config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT]
  : 0;

const magicWarriorMasteryLevel = (config: IntermediateConfig) =>
  config[
    ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_MAGICWARRIORMASTERY_LEVEL
  ];

const magicWarriorMasteryTotalPercentATKPenaltyReduction = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(config) + (isUsingMainOHS(config) ? 5 : 0)
  : 0;

const magicWarriorMasteryTotalFlatMATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(config) * 2 +
    (magicWarriorMasteryLevel(config) - 5 > 0 ?
      magicWarriorMasteryLevel(config) - 5
    : 0)
  : 0;

const magicWarriorMasteryTotalFlatCSPD = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(config) * 10
  : 0;

const magicWarriorMasteryTotalPercentCSPD = (
  config: IntermediateConfig,
) =>
  (
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
    SubWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicWarriorMasteryLevel(config) * 1 +
    Math.max(magicWarriorMasteryLevel(config) - 5, 0)
  : 0;

const resonanceLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_LEVEL];
const resonanceIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ISACTIVE];
const resonanceActiveSet = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_RESONANCE_ACTIVESET];

const activeResonanceRegislet = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL] > 0 ?
    "focusResonance"
  : config[ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL] > 0 ?
    "speedResonance"
  : config[ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL] > 0 ?
    "powerResonance"
  : "none";

const resonanceTotalFlatATK = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "powerResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(config) * 2 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2 -
          (resonanceLevel(config) * 2 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2) *
            (powerResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.MATK_AND_ATK
  ) ?
    Math.floor(
      resonanceLevel(config) * 2 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2,
    )
  : 0;

const resonanceTotalFlatMATK = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "powerResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(config) * 2 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2 -
          (resonanceLevel(config) * 2 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2) *
            (powerResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.MATK_AND_ATK
  ) ?
    Math.floor(
      resonanceLevel(config) * 2 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 2,
    )
  : 0;

const resonanceTotalFlatASPD = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "speedResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(config) * 25 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50 -
          (resonanceLevel(config) * 25 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50) *
            (speedResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.ASPD_AND_CSPD
  ) ?
    Math.floor(
      resonanceLevel(config) * 25 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50,
    )
  : 0;

const resonanceTotalFlatCSPD = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "speedResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        resonanceLevel(config) * 25 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50 -
          (resonanceLevel(config) * 25 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50) *
            (speedResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.ASPD_AND_CSPD
  ) ?
    Math.floor(
      resonanceLevel(config) * 25 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 50,
    )
  : 0;

const resonanceTotalFlatAccuracy = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "focusResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        35 +
          resonanceLevel(config) * 2 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3 -
          (35 +
            resonanceLevel(config) * 2 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3) *
            (focusResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.ACC_AND_CRIT
  ) ?
    Math.floor(
      35 +
        resonanceLevel(config) * 2 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3,
    )
  : 0;

const resonanceTotalFlatCriticalRate = (config: IntermediateConfig) =>
  activeResonanceRegislet(config) === "focusResonance" ?
    (
      resonanceIsActive(config) &&
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      Math.floor(
        10 +
          resonanceLevel(config) * 2 +
          config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3 -
          (10 +
            resonanceLevel(config) * 2 +
            config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3) *
            (focusResonanceTotalReduction(config) / 100),
      )
    : 0
  : (
    resonanceIsActive(config) &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
      SubWeaponTypeId.MAGIC_DEVICE &&
    resonanceActiveSet(config) === ResonanceSetId.ACC_AND_CRIT
  ) ?
    Math.floor(
      10 +
        resonanceLevel(config) * 2 +
        config[ParamId.CHARACTER_SUBWEAPON_REFINEMENT] * 3,
    )
  : 0;

const siphonBarrierLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_LEVEL];

const siphonBarrierIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICBLADESKILLS_SIPHONBARRIER_ISACTIVE];

const siphonBarrierTotalPhysicalResistance = (
  config: IntermediateConfig,
) =>
  (
    (config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE) &&
    siphonBarrierIsActive(config)
  ) ?
    siphonBarrierLevel(config) * 9
  : 0;

const siphonBarrierTotalMagicResistance = (config: IntermediateConfig) =>
  (
    (config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE) &&
    siphonBarrierIsActive(config)
  ) ?
    siphonBarrierLevel(config) * 9
  : 0;

// magic skills

const magicMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICSKILLS_MAGICMASTERY_LEVEL];

const magicMasteryTotalPercentMATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicMasteryLevel(config) >= 8 ? 3
    : magicMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

const magicMasteryTotalPercentWeaponATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.STAFF ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    magicMasteryLevel(config) * 3
  : 0;

const qadalLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_LEVEL];

const qadalIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_ISACTIVE];

const qadalCharge = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_CHARGE];

const qadalTimeActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MAGICSKILLS_QADAL_TIMEACTIVE];

const qadalTotalLastDamageModifier = (config: IntermediateConfig) =>
  qadalIsActive(config) ?
    qadalCharge(config) > Math.floor(qadalTimeActive(config) / 3) ?
      Math.floor(qadalTimeActive(config) / 3)
    : qadalCharge(config)
  : 0;

// martial skills

const aggravateLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_AGGRAVATE_LEVEL];

const aggravateTotalFlatAMPR = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    Math.floor(aggravateLevel(config) * 0.5)
  : 0;

const aggravateTotalPercentAccuracy = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    aggravateLevel(config) * 2
  : 0;

const martialDisciplineLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALDISCIPLINE_LEVEL];

const martialDisciplineTotalMartialSkillDamageBonus = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(config)
  : 0;

const martialDisciplineTotalPercentASPD = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(config)
  : 0;

const martialDisciplineTotalFlatASPD = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialDisciplineLevel(config)
  : 0;

const martialMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MARTIALSKILLS_MARTIALMASTERY_LEVEL];

const martialMasteryTotalPercentATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialMasteryLevel(config) >= 8 ? 3
    : martialMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

const martialMasteryTotalPercentWeaponATK = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KNUCKLES ?
    martialMasteryLevel(config) * 3
  : 0;

// mononofu skills

const bushidoLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_BUSHIDO_LEVEL];

const bushidoTotalPercentATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    bushidoLevel(config) >= 8 ? 3
    : bushidoLevel(config) >= 3 ? 2
    : 1
  : 0;

const bushidoTotalPercentWeaponATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.KATANA ?
    bushidoLevel(config) * 3
  : 0;

const bushidoTotalFlatMaxHP = (config: IntermediateConfig) =>
  bushidoLevel(config) * 10;

const bushidoTotalFlatMaxMP = (config: IntermediateConfig) =>
  bushidoLevel(config) * 10;

const bushidoTotalFlatAccuracy = (config: IntermediateConfig) =>
  bushidoLevel(config);

const twoHandedLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_MONONOFUSKILLS_TWOHANDED_LEVEL];

// TODO MOVE THIS TO THE NINJASKILLS SECTION
//  const isNinjaSpiritMaxed = (config: IntermediateConfig) =>
//   config[ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL] === 10;

const twoHandedTotalPercentWeaponATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.KATANA ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(config) === 10) ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      twoHandedLevel(config)
    : 0
  : config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    twoHandedLevel(config)
  : 0;

const twoHandedTotalPercentAccuracy = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.KATANA ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(config) === 10) ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      twoHandedLevel(config)
    : 0
  : config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    twoHandedLevel(config)
  : 0;

const twoHandedTotalFlatCriticalRate = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.KATANA ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(config) === 10) ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.KATANA
      ) ?
        twoHandedLevel(config)
      : (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.ONE_HANDED_SWORD ||
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.MAGIC_DEVICE
      ) ?
        Math.floor(twoHandedLevel(config) * 0.5)
      : 0
    : 0
  : config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    Math.floor(twoHandedLevel(config) * 0.5)
  : 0;

const twoHandedTotalStability = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.KATANA ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.ONE_HANDED_SWORD ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE
  ) ?
    (
      (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(config) === 10) ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE
    ) ?
      (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.KATANA
      ) ?
        twoHandedLevel(config)
      : (
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.ONE_HANDED_SWORD ||
        config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
          MainWeaponTypeId.MAGIC_DEVICE
      ) ?
        Math.floor(twoHandedLevel(config) * 0.5)
      : 0
    : 0
  : config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ?
    Math.floor(twoHandedLevel(config) * 0.5)
  : 0;

const twoHandedTotalATKOnCrit = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.KATANA &&
    (config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.NONE ||
      (config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.NINJUTSU_SCROLL &&
        ninjaSpiritLevel(config) === 10))
  ) ?
    totalATK(config) * Math.floor((100 + 5 * twoHandedLevel(config)) / 100)
  : 0;

// ninja skills
const ninjaSpiritLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_NINJASKILLS_NINJASPIRIT_LEVEL];

const ninjaSpiritTotalFlatDodge = (config: IntermediateConfig) =>
  ninjaSpiritLevel(config);

// prayer skills

const prayerLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_LEVEL];

const prayerIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_PRIESTSKILLS_PRAYER_ISACTIVE];

const prayerTotalPercentMATK = (config: IntermediateConfig) =>
  prayerIsActive(config) ?
    (
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_SUBWEAPON_TYPE] ===
        SubWeaponTypeId.MAGIC_DEVICE
    ) ?
      prayerLevel(config) + 5
    : prayerLevel(config)
  : 0;

// Shield Skills

const forceShieldLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_FORCESHIELD_LEVEL];

const forceShieldTotalFlatDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(config) * 2
  : 0;

const forceShieldTotalPercentDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(config)
  : 0;

const forceShieldTotalFlatMaxHP = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(config) * 50
  : 0;

const forceShieldTotalPhysicalResistance = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    forceShieldLevel(config)
  : 0;

const magicalShieldLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_MAGICALSHIELD_LEVEL];

const magicalShieldTotalFlatMDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(config) * 2
  : 0;

const magicalShieldTotalPercentMDEF = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(config)
  : 0;

const magicalShieldTotalFlatMaxHP = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(config) * 50
  : 0;
const magicalShieldTotalMagicResistance = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    magicalShieldLevel(config)
  : 0;

const shieldMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHIELDSKILLS_SHIELDMASTERY_LEVEL];

const shieldMasteryPercentASPDPenaltyReduction = (
  config: IntermediateConfig,
) =>
  config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.SHIELD ?
    shieldMasteryLevel(config) * 5
  : 0;

// shot skills

const longRangeLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHOTSKILLS_LONGRANGE_LEVEL];

const longRangeTotalSkillDamageModifier = (config: IntermediateConfig) =>
  longRangeLevel(config);

const samuraiArcheryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_LEVEL];

const samuraiArcheryStacks = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SAMURAIARCHERY_STACKS];

const samuraiArcheryTotalFlatWeaponATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    Math.min(
      Math.floor(
        config[ParamId.CHARACTER_SUBWEAPON_ATK] *
          0.1 *
          samuraiArcheryLevel(config),
      ),
      Math.floor(
        config[ParamId.CHARACTER_MAINWEAPON_ATK] *
          Math.floor(
            config[ParamId.CHARACTER_MAINWEAPON_STABILITY] / 100,
          ) *
          0.1 *
          samuraiArcheryLevel(config),
      ),
    )
  : 0;

const samuraiArcheryTotalStability = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    Math.floor(config[ParamId.CHARACTER_SUBWEAPON_STABILITY] / 4)
  : 0;
const samuraiArcheryTotalPercentAccuracy = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW &&
    config[ParamId.CHARACTER_SUBWEAPON_TYPE] === SubWeaponTypeId.KATANA
  ) ?
    samuraiArcheryLevel(config) * samuraiArcheryStacks(config)
  : 0;

const shotMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SHOTSKILLS_SHOTMASTERY_LEVEL];

const shotMasteryTotalPercentATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BOWGUN ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW
  ) ?
    shotMasteryLevel(config) >= 8 ? 3
    : shotMasteryLevel(config) >= 3 ? 2
    : 1
  : 0;

const shotMasteryTotalPercentWeaponATK = (config: IntermediateConfig) =>
  (
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.BOWGUN ||
    config[ParamId.CHARACTER_MAINWEAPON_TYPE] === MainWeaponTypeId.BOW
  ) ?
    shotMasteryLevel(config) * 3
  : 0;

// support skills
const braveAuraLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_LEVEL];

const braveAuraIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_BRAVEAURA_ISACTIVE];

const braveAuraTotalPercentWeaponATK = (config: IntermediateConfig) =>
  braveAuraIsActive(config) ? 10 + braveAuraLevel(config) * 2 : 0;

const braveAuraTotalLastDamageModifier = (config: IntermediateConfig) =>
  braveAuraIsActive(config) ? braveAuraLevel(config) * 2 : 0;

const highCycleIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_ISACTIVE];

const highCycleLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_HIGHCYCLE_LEVEL];

const highCycleTotalFlatCSPD = (config: IntermediateConfig) =>
  highCycleIsActive(config) ? 50 + highCycleLevel(config) * 50 : 0;

const highCycleTotalPercentCSPD = (config: IntermediateConfig) =>
  highCycleIsActive(config) ? highCycleLevel(config) * 25 : 0;

const highCycleTotalPercentNMPR = (config: IntermediateConfig) =>
  highCycleIsActive(config) ?
    Math.floor(-50.5 - highCycleLevel(config) * 2.5)
  : 0;

const highCycleTotalPercentAMPR = (config: IntermediateConfig) =>
  highCycleIsActive(config) ?
    Math.floor(-90.5 - highCycleLevel(config) * 1.5)
  : 0;

const manaRechargeLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_LEVEL];

const manaRechargeIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SUPPORTSKILLS_MANARECHARGE_ISACTIVE];

const manaRechargeTotalLastDamageModifier = (
  config: IntermediateConfig,
) =>
  manaRechargeIsActive(config) ?
    -(50 - manaRechargeLevel(config) * 2.5)
  : 0;

// survival skills

const HPBoostLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL];

const HPBoostTotalPercentMaxHP = (config: IntermediateConfig) =>
  HPBoostLevel(config) * 2;

const HPBoostTotalFlatMaxHP = (config: IntermediateConfig) =>
  HPBoostLevel(config) * 100;

const MPBoostLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_SURVIVALSKILLS_MPBOOST_LEVEL];

const MPBoostTotalFlatMaxMP = (config: IntermediateConfig) =>
  MPBoostLevel(config) * 30;

// Wizard skills

const castMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL];

const wizardSkillsLevels = (config: IntermediateConfig) => [
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_LIGHTNING_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_BLIZZARD_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_METEORSTRIKE_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_IMPERIALRAY_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_MANACRYSTAL_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_STONEBARRIER_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_ADVANCEDFAMILIA_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CASTMASTERY_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_CRYSTALLASER_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL],
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL],
];

const totalWizardSkillsLearned = (config: IntermediateConfig) =>
  wizardSkillsLevels(config)
    .filter((level) => (level > 0 ? 1 : 0))
    .reduce(add, 0);

const totalWizardSkillsPoints = (config: IntermediateConfig) =>
  wizardSkillsLevels(config).reduce(add, 0);

const castMasteryTotalPercentCSPD = (config: IntermediateConfig) =>
  (
    (config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(config) > 0
  ) ?
    Math.floor(castMasteryLevel(config) * 1.5) +
    (totalWizardSkillsLearned(config) - 1) *
      Math.floor(castMasteryLevel(config) / 2)
  : 0;

const castMasteryTotalFlatCSPD = (config: IntermediateConfig) =>
  (
    (config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(config) > 0
  ) ?
    castMasteryLevel(config) * totalWizardSkillsPoints(config)
  : 0;

const castMasteryTotalPercentATK = (config: IntermediateConfig) =>
  (
    (config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
      MainWeaponTypeId.MAGIC_DEVICE ||
      config[ParamId.CHARACTER_MAINWEAPON_TYPE] ===
        MainWeaponTypeId.STAFF) &&
    castMasteryLevel(config) > 0
  ) ?
    -Math.ceil(50 - 2.5 * castMasteryLevel(config))
  : 0;

const familiaIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_ISACTIVE];

const familiaLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_FAMILIA_LEVEL];

const familiaTotalFlatMATK = (config: IntermediateConfig) =>
  familiaIsActive(config) ?
    Math.floor(
      config[ParamId.CHARACTER_LEVEL] / (10 - familiaLevel(config) * 0.6),
    )
  : 0;

const familiaTotalFlatMaxMP = (config: IntermediateConfig) =>
  familiaIsActive(config) ? 100 + familiaLevel(config) * 10 : 0;

const familiaTotalAdditionalMagic = (config: IntermediateConfig) =>
  familiaIsActive(config) ? 5 * familiaLevel(config) : 0;

const overlimitLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_LEVEL];

const overlimitIsActive = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_OVERLIMIT_ISACTIVE];

const overlimitTotalElementDamageModifier = (
  config: IntermediateConfig,
) =>
  overlimitIsActive(config) ?
    overlimitLevel(config) +
    sorceryGuideTotalElementDamageModifierBonusForOverlimit(config)
  : 0;

const overlimitTotalFlatCSPD = (config: IntermediateConfig) =>
  overlimitIsActive(config) ?
    -1000 + sorceryGuideTotalCSPDPenaltyReductionForOverlimit(config)
  : 0;

const sorceryGuideLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_WIZARDSKILLS_SORCERYGUIDE_LEVEL];

const sorceryGuideTotalCSPDPenaltyReductionForOverlimit = (
  config: IntermediateConfig,
) => sorceryGuideLevel(config) * 50;

const sorceryGuideTotalElementDamageModifierBonusForOverlimit = (
  config: IntermediateConfig,
) => sorceryGuideLevel(config);

const totalPercentATKForWizardSkills = (config: IntermediateConfig) =>
  totalPercentATKFromEquipment(config) + totalPercentATKFromSkills(config);

const totalATKForWizardSkills = (config: IntermediateConfig) =>
  Math.floor(
    total(
      totalBaseATK(config),
      totalPercentATKForWizardSkills(config),
      totalFlatATK(config),
    ) * 0.25,
  );

const totalMATKForWizardSkills = (config: IntermediateConfig) =>
  Math.floor(totalMATK(config) * 0.75);

const totalWizardATK = (config: IntermediateConfig) =>
  totalATKForWizardSkills(config) + totalMATKForWizardSkills(config);

// battle skills
const accuracyUPTotalFlatAccuracy = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_ACCURACYUP_LEVEL];

const attackUPLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_ATTACKUP_LEVEL];

const attackUPTotalFlatATK = (config: IntermediateConfig) =>
  Math.floor(
    (config[ParamId.CHARACTER_LEVEL] * (2.5 * attackUPLevel(config))) /
      100,
  );

const criticalUPLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_CRITICALUP_LEVEL];

const criticalUPTotalFlatCriticalRate = (config: IntermediateConfig) =>
  Math.floor(criticalUPLevel(config) / 2);

const criticalUPTotalPercentCriticalDamage = (
  config: IntermediateConfig,
) => Math.floor(criticalUPLevel(config) / 2);

const defenseMasteryLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEMASTERY_LEVEL];

const defenseMasteryTotalFlatDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseMasteryLevel(config)) / 100),
  );

const defenseMasteryTotalFlatMDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseMasteryLevel(config)) / 100),
  );

const defenseUPLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DEFENSEUP_LEVEL];

const defenseUPTotalFlatDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseUPLevel(config)) / 100),
  );

const defenseUPTotalFlatMDEF = (config: IntermediateConfig) =>
  Math.floor(
    config[ParamId.CHARACTER_LEVEL] *
      ((2.5 * defenseUPLevel(config)) / 100),
  );
const dodgeUPTotalFlatDodge = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_DODGEUP_LEVEL];
const increasedEnergyLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_INCREASEDENERGY_LEVEL];

const increasedEnergyTotalFlatMATK = (config: IntermediateConfig) =>
  (config[ParamId.CHARACTER_LEVEL] *
    (2.5 * increasedEnergyLevel(config))) /
  100;
const intimidatingPowerLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_INTIMIDATINGPOWER_LEVEL];

const intimidatingPowerTotalFlatATK = (config: IntermediateConfig) =>
  Math.floor(
    (config[ParamId.CHARACTER_LEVEL] *
      (2.5 * intimidatingPowerLevel(config))) /
      100,
  );

const magicUPLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_MAGICUP_LEVEL];

const magicUPTotalFlatMATK = (config: IntermediateConfig) =>
  Math.floor(
    (config[ParamId.CHARACTER_LEVEL] * (2.5 * magicUPLevel(config))) / 100,
  );
const spellBurstLevel = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_SKILLS_BATTLESKILLS_SPELLBURST_LEVEL];

const spellBurstTotalMagicCriticalDamageConversion = (
  config: IntermediateConfig,
) => spellBurstLevel(config) * 2.5;

const spellBurstTotalMagicCriticalRateConversion = (
  config: IntermediateConfig,
) => spellBurstLevel(config) * 2.5;
// regislets

const magicAttackBoostTotalFlatMATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_MAGICATTACKBOOST_LEVEL];

const physicalAttackBoostTotalFlatATK = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_PHYSICALATTACKBOOST_LEVEL];

const maxMPBoostTotalFlatMaxMP = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_MAXMPBOOST_LEVEL];

const maxHPBoostTotalFlatMaxMP = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_MAXHPBOOST_LEVEL] * 10;

const magicSpeedBoostTotalFlatCSPD = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_MAGICSPEEDBOOST_LEVEL];

const attackSpeedBoostTotalFlatCSPD = (config: IntermediateConfig) =>
  config[ParamId.CHARACTER_REGISLETS_ATTACKSPEEDBOOST_LEVEL];

const focusResonanceTotalReduction = (config: IntermediateConfig) =>
  95 - 5 * config[ParamId.CHARACTER_REGISLETS_FOCUSRESONANCE_LEVEL];

const speedResonanceTotalReduction = (config: IntermediateConfig) =>
  95 - 5 * config[ParamId.CHARACTER_REGISLETS_SPEEDRESONANCE_LEVEL];

const powerResonanceTotalReduction = (config: IntermediateConfig) =>
  95 - 5 * config[ParamId.CHARACTER_REGISLETS_POWERRESONANCE_LEVEL];

//  interface Config {

//   // FIGURE OUT WHAT KIND OF BULLSHEIIETHETT YOU WANNA DO HERE
// }

// features and improvements
// - library api
// - eliminate string data in the calculator (use enums instead)

type Enumerate<N extends number, Acc extends number[] = []> =
  Acc["length"] extends N ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>;

type NumRange<F extends number, T extends number> = Exclude<
  Enumerate<T>,
  Enumerate<F>
>;

//

export type OneHandedSword = "one-handed-sword";

export type TwoHandedSword = "two-handed-sword";

export type Bow = "bow";

export type Bowgun = "bowgun";

export type Staff = "staff";

export type MagicDevice = "magic-device";

export type Halberd = "halberd";

export type Katana = "katana";

export type Knuckle = "knuckle";

export type BareHand = "bare-hand";

export type MainWeaponType =
  | OneHandedSword
  | TwoHandedSword
  | Bow
  | Bowgun
  | Staff
  | MagicDevice
  | Halberd
  | Katana
  | Knuckle
  | BareHand;

export type NinjutsuScroll = "ninjutsu-scroll";

export type Arrow = "arrow";

export type Shield = "shield";

export type Dagger = "dagger";

export type None = "none";

export type SubWeaponType =
  | OneHandedSword
  | Katana
  | Knuckle
  | MagicDevice
  | NinjutsuScroll
  | Arrow
  | Shield
  | Dagger
  | None;

export type Light = "light";

export type Heavy = "heavy";

export type Normal = "normal";

export type ArmorType = Light | Heavy | Normal | None;

interface Config {
  properties: {
    level: number;
    STR: number;
    INT: number;
    DEX: number;
    VIT: number;
    AGI: number;
    personalStat: "LUK" | "MTL" | "TEC" | "CRT";
    personalStatValue: number;
  };

  equipments: {
    mainweapon: {
      type: MainWeaponType;
      ATK: number;
      refinement: NumRange<1, 16>;
      stability: NumRange<0, 101>;

      stats: StatMapBuilder; // change this later with type callable | xtal name
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    subweapon: {
      type: SubWeaponType;

      ATK: number;
      DEF: number;
      refinement: NumRange<1, 16>;
      stability: NumRange<0, 101>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
      scrollCastTimeReduction: number;
      scrollMPReduction: number;
    };

    armor: {
      type: ArmorType;
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    additionalGear: {
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };

    specialGear: {
      refinement: NumRange<1, 16>;
      stats: StatMapBuilder;
      crystal1: StatMapBuilder;
      crystal2: StatMapBuilder;
    };
  };

  skillTrees: {
    bladeSkills: {
      hardhit: { level: number };
      astute: { level: number };
      triggerslash: { level: number; isActive: boolean };

      rampage: { level: number; isActive: boolean };

      meteorbreaker: { level: number };
      shutout: { level: number };
      lunarslash: { level: number };
      sonicblade: { level: number };
      spiralair: { level: number };
      swordtempest: { level: number };
      busterblade: { level: number; isActive: boolean };

      aurablade: { level: number };
      swordmastery: { level: number };
      quickslash: { level: number };
      swordtechniques: { level: number };
      warcry: { level: number; isActive: boolean };

      berserk: { level: number; isActive: boolean };

      gladiate: { level: number };
      swiftattack: { level: number };
    };

    shotSkills: {
      powershot: { level: number };
      bullseye: { level: number };
      arrowrain: { level: number };
      snipe: { level: number };
      crossfire: { level: number };
      vanquisher: { level: number };
      twinstorm: {
        level: number;
        isActive: boolean;
        onCooldown: boolean;
      };

      retrogradeshot: { level: number };
      moebashot: { level: number };
      paralysisshot: { level: number };
      smokedust: { level: number };
      armbreak: { level: number };
      parabolacannon: { level: number };
      shotmastery: { level: number };
      samuraiarchery: { level: number; stacks: number };
      sneakattack: { level: number };
      longrange: { level: number };
      quickdraw: { level: number };
      decoyshot: { level: number };
      fatalshot: { level: number };
    };

    magicSkills: {
      magicarrows: { level: number };
      magicjavelin: { level: number };
      magiclances: { level: number };
      magicimpact: { level: number };
      magicfinale: { level: number };
      chronosshift: { level: number };
      magicwall: { level: number };
      magicblast: { level: number };
      magicstorm: { level: number };
      magicburst: { level: number };
      magiccannon: { level: number };
      magiccrash: { level: number };
      magicmastery: { level: number };
      magicknife: { level: number };
      qadal: {
        level: number;
        burden: number;
        combatTime: number;
        isActive: boolean;
      };
      mpcharge: { level: number };
      chaincast: { level: number; isActive: boolean; stacks: number };
      powerwave: { level: number };
      maximizer: { level: number };
      rapidcharge: {
        level: number;
        isActive: boolean;
        amountMPRecoveredFromMaximizer: number;
      };
      enchantedbarriers: { level: number };
      magicguardianbeam: { level: number };
    };

    survivalSkills: {
      playdead: { level: number };
      expgainup: { level: number };
      droprateup: { level: number };
      saferest: { level: number };
      hpboost: { level: number };
      fightershigh: { level: number };
      shortrest: { level: number };
      mpboost: { level: number };
      soberanalysis: { level: number };
    };

    supportSkills: {
      firstaid: { level: number };
      miniheal: { level: number };
      recovery: { level: number };
      sanctuary: { level: number };
      heal: { level: number };
      liferecovery: { level: number };
      braveaura: { level: number; isActive: boolean };
      highcycle: { level: number; isActive: boolean };
      quickmotion: { level: number; isActive: boolean };
      manarecharge: { level: number; isActive: boolean };
      magicbarrier: { level: number; isActive: boolean };
      immunity: { level: number; isActive: boolean };
      fastreaction: { level: number; isActive: boolean };
    };

    battleSkills: {
      magicup: { level: number };
      concentrate: { level: number };
      attackup: { level: number };
      whack: { level: number };
      defenseup: { level: number };
      dodgeup: { level: number };
      desperateresist: { level: number };
      criticalup: { level: number };
      accuracyup: { level: number };
      increasedenergy: { level: number };
      intimidatingpower: { level: number };
      defensemastery: { level: number };
      spellburst: { level: number };
      secretchaseattack: { level: number };
      supergrip: { level: number };
    };

    mononofuSkills: {
      issen: { level: number };
      pulseblade: { level: number };
      triplethrust: { level: number; isActive: boolean };

      hassohappa: { level: number };
      tenryuransei: { level: number };
      kasumisetsugetsuka: { level: number };
      garyoutensei: { level: number };
      shadowlessslash: { level: number };
      pommelstrike: { level: number };
      magadachi: { level: number };
      zanteisettetsu: { level: number };
      bushido: { level: number };
      shukuchi: { level: number; isActive: boolean };

      nukiuchisennosen: { level: number };
      twohanded: { level: number };
      meikyoushisui: { level: number; isActive: boolean };
      kairikiranshin: { level: number; isActive: boolean };

      dauntless: { level: number; stacks: number };
      dauntless_stacks: number;
      bouncingblade: { level: number; isActive: boolean };
    };

    dualSwordSkills: {
      dualswordmastery: { level: number };
      twinslash: { level: number };
      spinningslash: { level: number };
      phantomslash: { level: number };
      aerialcut: { level: number };
      crossparry: { level: number; isActive: boolean };

      crossparryisparried: number;
      chargingslash: { level: number };
      shadowstep: { level: number; isActive: boolean };

      shiningcross: { level: number };
      lunarmisfortune: { level: number };
      twinbusterblade: { level: number; isActive: boolean };

      reflex: { level: number };
      flashblast: { level: number; isActive: boolean };

      stormreaper: { level: number };
      dualswordcontrol: { level: number };
      godspeed: { level: number };
      saberaura: { level: number };
      crescentsaber: { level: number };
    };

    magicBladeSkills: {
      magicwarriormastery: { level: number };
      conversion: { level: number; isActive: boolean };

      resonance: { level: number; isActive: boolean };

      resonance_activeset: ResonanceSetId;
      enchantedspell: { level: number };
      dualbringer: { level: number; isActive: boolean };

      etherflare: { level: number; isActive: boolean };

      elementslash: { level: number };
      enchantsword: { level: number };
      enchantedburst: { level: number };
      unionsword: { level: number };
      siphonbarrier: { level: number; isActive: boolean };

      teleport: { level: number };
      siphonrecall: { level: number };
      floatdash: { level: number };
      magicskin: { level: number };
    };
  };

  consumables: Stat[];
  foodBuffs: Stat[];

  character_skills_shieldskills_shieldmastery_level: number;
  character_skills_shieldskills_shieldbash_level: number;
  character_skills_shieldskills_shieldcannon_level: number;
  character_skills_shieldskills_guardstrike_level: number;
  character_skills_shieldskills_forceshield_level: number;
  character_skills_shieldskills_magicalshield_level: number;
  character_skills_shieldskills_shielduppercut_level: number;
  character_skills_shieldskills_dualshields_level: number;
  character_skills_shieldskills_shieldrepair_level: number;
  character_skills_shieldskills_belagerung_level: number;
  character_skills_shieldskills_protection_level: number;
  character_skills_shieldskills_protection_isactive: boolean;
  character_skills_shieldskills_aegis_level: number;
  character_skills_shieldskills_aegis_isactive: boolean;
  character_skills_shieldskills_guardian_level: number;
  character_skills_guardskills_heavyarmormastery_level: number;
  character_skills_guardskills_advancedguard_level: number;
  character_skills_guardskills_physicalguard_level: number;
  character_skills_guardskills_lightarmormastery_level: number;
  character_skills_guardskills_advancedevasion_level: number;
  character_skills_guardskills_mirageevasion_level: number;
  character_skills_halberdskills_flashstab_level: number;
  character_skills_halberdskills_cannonspear_level: number;
  character_skills_halberdskills_dragontail_level: number;
  character_skills_halberdskills_diveimpact_level: number;
  character_skills_halberdskills_dragontooth_level: number;
  character_skills_halberdskills_draconiccharge_level: number;
  character_skills_halberdskills_deadlyspear_level: number;
  character_skills_halberdskills_punishray_level: number;
  character_skills_halberdskills_strikestab_level: number;
  character_skills_halberdskills_chronosdivine_level: number;
  character_skills_halberdskills_infinitedimension_level: number;
  character_skills_halberdskills_halberdmastery_level: number;
  character_skills_halberdskills_criticalspear_level: number;
  character_skills_halberdskills_tornadolance_level: number;
  character_skills_halberdskills_quickaura_level: number;
  character_skills_halberdskills_quickaura_isactive: boolean;
  character_skills_halberdskills_warcryofstruggle_level: number;
  character_skills_halberdskills_godspeedwield_level: number;
  character_skills_halberdskills_godspeedwield_isactive: boolean;
  character_skills_halberdskills_godspeedwield_stacks: number;
  character_skills_halberdskills_almightywield_level: number;
  character_skills_halberdskills_busterlance_level: number;
  character_skills_martialskills_smash_level: number;
  character_skills_martialskills_bash_level: number;
  character_skills_martialskills_shellbreak_level: number;
  character_skills_martialskills_heavysmash_level: number;
  character_skills_martialskills_chariot_level: number;
  character_skills_martialskills_abstractarms_level: number;
  character_skills_martialskills_sonicwave_level: number;
  character_skills_martialskills_earthbind_level: number;
  character_skills_martialskills_triplekick_level: number;
  character_skills_martialskills_rush_level: number;
  character_skills_martialskills_rush_isactive: boolean;
  character_skills_martialskills_asuraaura_level: number;
  character_skills_martialskills_asuraaura_isactive: boolean;
  character_skills_martialskills_flashblink_level: number;
  character_skills_martialskills_martialmastery_level: number;
  character_skills_martialskills_martialdiscipline_level: number;
  character_skills_martialskills_chakra_level: number;
  character_skills_martialskills_chakra_isactive: boolean;
  character_skills_martialskills_energycontrol_level: number;
  character_skills_martialskills_energycontrol_isactive: boolean;
  character_skills_martialskills_aggravate_level: number;
  character_skills_martialskills_strongchaseattack_level: number;
  character_skills_martialskills_slide_level: number;
  character_skills_barehandskills_unarmedmastery_level: number;
  character_skills_barehandskills_qicharge_level: number;
  character_skills_barehandskills_lionrage_level: number;
  character_skills_barehandskills_ultimalionrage_level: number;
  character_skills_barehandskills_ravingstorm_level: number;
  character_skills_barehandskills_ultimaravingstorm_level: number;
  character_skills_barehandskills_internalelixir_level: number;
  character_skills_barehandskills_clashofenmity_level: number;
  character_skills_barehandskills_miraclecomeback_level: number;
  character_skills_barehandskills_ultimaqicharge_level: number;
  character_skills_barehandskills_hiddentalent_level: number;
  character_skills_barehandskills_earthshaker_level: number;
  character_skills_barehandskills_earthshaker_isactive: boolean;
  character_skills_hunterskills_kick_level: number;
  character_skills_hunterskills_sunrisearrow_level: number;
  character_skills_hunterskills_magicarrow_level: number;
  character_skills_hunterskills_magicarrow_isactive: boolean;
  character_skills_hunterskills_satellitearrow_level: number;
  character_skills_hunterskills_sleeptrap_level: number;
  character_skills_hunterskills_beartrap_level: number;
  character_skills_hunterskills_landmine_level: number;
  character_skills_hunterskills_darktrap_level: number;
  character_skills_hunterskills_homingshot_level: number;
  character_skills_hunterskills_detection_level: number;
  character_skills_hunterskills_detection_isactive: boolean;
  character_skills_hunterskills_cyclonearrow_level: number;
  character_skills_hunterskills_verticalair_level: number;
  character_skills_hunterskills_hunterbowgun_level: number;
  character_skills_hunterskills_multiplehunt_level: number;
  character_skills_hunterskills_tripleaceshots_isactive: boolean;
  character_skills_hunterskills_wolfsniper_isactive: boolean;
  character_skills_ninjaskills_ninjutsu_level: number;
  character_skills_ninjaskills_ninjaspirit_level: number;
  character_skills_ninjaskills_ninjutsudrilli_level: number;
  character_skills_ninjaskills_ninjutsudrillii_level: number;
  character_skills_wizardskills_familia_level: number;
  character_skills_wizardskills_familia_isactive: boolean;
  character_skills_wizardskills_lightning_level: number;
  character_skills_wizardskills_blizzard_level: number;
  character_skills_wizardskills_meteorstrike_level: number;
  character_skills_wizardskills_imperialray_level: number;
  character_skills_wizardskills_manacrystal_level: number;
  character_skills_wizardskills_stonebarrier_level: number;
  character_skills_wizardskills_advancedfamilia_level: number;
  character_skills_wizardskills_advancedfamilia_isactive: boolean;
  character_skills_wizardskills_castmastery_level: number;
  character_skills_wizardskills_crystallaser_level: number;
  character_skills_wizardskills_overlimit_level: number;
  character_skills_wizardskills_overlimit_isactive: boolean;
  character_skills_wizardskills_sorceryguide_level: number;
  character_skills_priestskills_bless_level: number;
  character_skills_priestskills_gloria_level: number;
  character_skills_priestskills_enhancedbless_level: number;
  character_skills_priestskills_royalheal_level: number;
  character_skills_priestskills_holyfist_level: number;
  character_skills_priestskills_holylight_level: number;
  character_skills_priestskills_etherbarrier_level: number;
  character_skills_priestskills_etherbarrier_isactive: boolean;
  character_skills_priestskills_prayer_level: number;
  character_skills_priestskills_prayer_isactive: boolean;
  character_skills_priestskills_staffthrust_level: number;
  character_skills_priestskills_exorcism_level: number;
  character_skills_priestskills_holybook_level: number;
  character_skills_priestskills_holybook_isactive: boolean;
  character_skills_priestskills_nemesis_level: number;

  character_consumables: Stat[]; // tatmap for now
  character_foodbuffs: Stat[]; // tatmap for now

  character_ailments_weaken_isactive: boolean;
  character_ailments_flinch_isactive: boolean;
  character_ailments_tumble_isactive: boolean;
  character_ailments_stun_isactive: boolean;
  character_ailments_knockback_isactive: boolean;
  character_ailments_poison_isactive: boolean;
  character_ailments_paralysis_isactive: boolean;
  character_ailments_blindness_isactive: boolean;
  character_ailments_ignition_isactive: boolean;
  character_ailments_freeze_isactive: boolean;
  character_ailments_armorbreak_isactive: boolean;
  character_ailments_slow_isactive: boolean;
  character_ailments_stop_isactive: boolean;
  character_ailments_fear_isactive: boolean;
  character_ailments_dizzy_isactive: boolean;
  character_ailments_lethargy_isactive: boolean;
  character_ailments_silence_isactive: boolean;
  character_ailments_bleed_isactive: boolean;
  character_ailments_fatigue_isactive: boolean;
  character_ailments_dazzled_isactive: boolean;

  character_regislets_zerostance_level: number;
  character_regislets_maxhpboost_level: number;
  character_regislets_maxmpboost_level: number;
  character_regislets_magicattackboost_level: number;
  character_regislets_physicalattackboost_level: number;
  character_regislets_magicdefenseboost_level: number;
  character_regislets_physicaldefenseboost_level: number;
  character_regislets_attackspeedboost_level: number;
  character_regislets_magicspeedboost_level: number;
  character_regislets_dodgeboost_level: number;
  character_regislets_accuracyboost_level: number;
  character_regislets_focusresonance_level: number;
  character_regislets_speedresonance_level: number;
  character_regislets_powerresonance_level: number;
}
